(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1113259,      21583]
NotebookOptionsPosition[   1090404,      21221]
NotebookOutlinePosition[   1090811,      21237]
CellTagsIndexPosition[   1090768,      21234]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Support Vector Machines", "Title",
 CellChangeTimes->{{3.822981123991681*^9, 
  3.822981127870563*^9}},ExpressionUUID->"289eaf38-3e93-40a8-bc2b-\
d9c992b97006"],

Cell["\<\
In this notebook we will develop support vector machine models for several \
datasets by using them to formulate a constrained optimisation problem. \
First, we review how constrained optimisation is done in Mathematica.\
\>", "Text",
 CellChangeTimes->{{3.8229929850392323`*^9, 3.822993064350775*^9}, {
  3.822993467940414*^9, 
  3.8229934796060667`*^9}},ExpressionUUID->"ef24bbba-1885-49f3-bd5c-\
aeaabe0bc185"],

Cell[CellGroupData[{

Cell["Constrained Optimisation", "Section",
 CellChangeTimes->{{3.8229934593339653`*^9, 
  3.822993463574456*^9}},ExpressionUUID->"bde7937b-f30f-4050-93b6-\
58fce63e9674"],

Cell[TextData[{
 "Consider the problem of minimising ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], TraditionalForm]],ExpressionUUID->
  "97fd13ae-a8c4-45f0-bfa8-25c24353824b"],
 " subject to the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"3", "x"}], "+", 
     RowBox[{"2", "y"}]}], "\[GreaterEqual]", "7"}], TraditionalForm]],
  ExpressionUUID->"36983e70-4823-425b-b43d-e06434e46d92"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "+", 
     RowBox[{"2", "y"}]}], "\[GreaterEqual]", "6"}], TraditionalForm]],
  ExpressionUUID->"91b1bb6b-a7e4-4ce5-af40-72ebd5063be6"],
 ". We can solve this using NMinimize:"
}], "Text",
 CellChangeTimes->{{3.8229935434061613`*^9, 3.82299355669022*^9}, {
  3.8229944857040873`*^9, 
  3.822994533796236*^9}},ExpressionUUID->"cadd491c-50ed-4874-93d3-\
6fd1c6d20aee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NMinimize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"3", " ", "x"}], "+", 
        RowBox[{"2", " ", "y"}]}], "\[GreaterEqual]", "7"}], "&&", 
      RowBox[{
       RowBox[{"x", "+", 
        RowBox[{"2", " ", "y"}]}], "\[GreaterEqual]", "6"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823250963225556*^9, 3.8232510304983377`*^9}, {
  3.8232511764343386`*^9, 3.8232511770559044`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"f1d5892e-59bc-4c87-a022-44f65051edb4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.2000000013477745`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "1.2000000008838432`"}], ",", 
     RowBox[{"y", "\[Rule]", "2.399999999838865`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.823251033505032*^9, 3.823251179859268*^9, 
  3.823253257378172*^9, 3.8238536166607456`*^9, 3.823948870807463*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"1ac94df0-8a00-4286-b002-df3c923ec3c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NMinimize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"3", " ", "x"}], "+", 
         RowBox[{"2", " ", "y"}]}], "\[GreaterEqual]", "7"}], ",", 
       RowBox[{
        RowBox[{"x", "+", 
         RowBox[{"2", " ", "y"}]}], "\[GreaterEqual]", "6"}]}], "]"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8232511881724186`*^9, 3.8232511959988165`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"feac82ae-7f5e-4e08-a8c3-a1f554c91966"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.2000000013477745`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "1.2000000008838432`"}], ",", 
     RowBox[{"y", "\[Rule]", "2.399999999838865`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8232511974196553`*^9, 3.8232532574679637`*^9, 
  3.823853616921052*^9, 3.8239488709929667`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"6e53b46b-f83e-4627-a745-ee772f20c088"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s visualise the solution along with the constraints and \
the function we are trying to minimise.\
\>", "Text",
 CellChangeTimes->{{3.822994555250189*^9, 
  3.822994574520455*^9}},ExpressionUUID->"395ea9a3-acfc-487f-b9f9-\
78cf4694122f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"RegionFunction", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"3", " ", "x"}], "+", 
           RowBox[{"2", " ", "y"}]}], "\[GreaterEqual]", "7"}], "&&", 
         RowBox[{
          RowBox[{"x", "+", 
           RowBox[{"2", " ", "y"}]}], "\[GreaterEqual]", "6"}]}]}], "]"}]}]}],
     "]"}], ",", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Gray", ",", 
      RowBox[{"InfinitePlane", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"0.5", " ", 
            RowBox[{"(", 
             RowBox[{"7", "-", 
              RowBox[{"3", " ", "x"}]}], ")"}]}], ",", 
           RowBox[{"RandomReal", "[", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "3"}], "}"}]}], "]"}], "]"}]}], "}"}], "]"}], ",", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Gray", ",", 
      RowBox[{"InfinitePlane", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"0.5", " ", 
            RowBox[{"(", 
             RowBox[{"6", "-", "x"}], ")"}]}], ",", 
           RowBox[{"RandomReal", "[", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "3"}], "}"}]}], "]"}], "]"}]}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.823251124411245*^9, 3.823251351209351*^9}, {
  3.8232514260568237`*^9, 3.8232514291712437`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"b32f8fb6-b992-46ba-8ab9-0eb4ea9eda06"],

Cell[BoxData[
 Graphics3DBox[{{GraphicsComplex3DBox[CompressedData["
1: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
/7FnqyOWO/BjhfFLTsQ5Y/kC7wrM23T7mCvdL8XwhsC7LGN5Dywv4C61VfMW
hdB7KtCe0tMibU+p/sAdZn0pVY+i91QAj8jl3/hqOBx1Nuu8slq8cDCZKakm
nv3SDnUG3nF2XrX4NTvUGfiCBwfSMv74IaAzcMXOb6vr39qjzsAnpyiVxd11
QJ2BO64ZuCjwC4fui2X4lQ9VS1LGOaHOwKuE9vQ4o87AU14/3lr1wRV1Bi5Y
Kn+qUc4DdQY+x2XbNhN3gjoDt4jq6xbf5Yk6A78b8HR7igy9pwK40fchky8e
90GdgQeR2/7Jwb6os57BOzvR2j/+1Lg9ak1zOKgncKUtbc2BFfTeD+DX84a/
OrjIkd43x/DffvP1rSY5oZ7A33mFlsnHO6OewKdnGlV4vKf3fgCPiyw0u5Hq
hnoCtzps+jklxgP1BO6lfok1fixBPYG7Hrjmun49vfcDuGil8YnQ1/TeD+Dp
eSz3jxN9UE/gv8Z7isl9pfd+AB88u++p7vERpCL22IGcIHky4pmWYxLrO3eV
LllUlGhNdBfWnNiqPhh52QDfUNOFduT1wccJPqmKyM0eld70O8Ahex4+CfjZ
pYT8UvLiiDEyLqRaqfX4wzoZjMtk1qce2dJsRnyXtU10LRyE/Od4ZeN3e//4
8wt61zx5qIA8aPKFgXOX2xHVgz+nbnalcd/UO5p+7vs45HHFLxuvMzTum7py
ziYdMRdSGOMlW8YehPHavRxXeb0X1mT/33FdAbnyKXOF5VftSMABfU5NM40H
DWytuZHlHKJQwR6UGkTjvhq2RPkFbRfC3z9SUfUojb9Gh3Eezld3JKPLRzVW
ytE4a9DSDN7DmS7kzSg/08KgLi7480/GWCdMVdMhpfKjNx1Q/IXcK+Km6Lbp
emTqF+NlBXUs9P/jpi/PWq9jQLyzLZ7uOUDjpuiDhQG/7czJVTnr9eJxND7K
6rcZModrTSwW2TpET6Bx0LVhAcHqJ23JsSr7+ncWNN4J38djaY9xILL7Djw4
KU7jmuw18iJLHJ1ISdnBY9OjafzCrz4ZMjjMlRmHaLwjM891QGyZC0nuPRSv
XEvjF+VUeVXWIw/ySK50Gev1N4xfXmW8uWQlrkuqeJ/3C9idyO9wVpeZndQj
12Wbe/MEvcg/7L+7t/gBmzxuWG7B47EwXpDf83vGtvVG5FRkcnN/ngzytzd/
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
Bzj7+tSi8lAO+X+bXeSn
     "], {{
       {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
a+9WrNsJnNOY9gzHzcF2pW1rYPD+lR7YxPi9dS1wXLTuWpP3yx38/zPYN1ir
S191zftrDPyVrNHXg3/RWvHfLPCSbIeyx5Pl70rncOeC/4HDaX8y7hCOn9d6
Ks4rdyms/bTHXwFb0hdL79uzpB1L+74/onV7S34q0XdG6dyhgvysdCi8LVix
tB9ZFa2bN0ovlB6nMa2lCUtfbxtp2dL5Q01+9iqtmWqDu5f2iVcG+xPpu2uD
57w++DoH5GtNztfSNddGP8evrOFj9DVgzASwSunn0bNoPRqWXhOtQaO8Dv8q
Z4GvVlwCtyvtb//h+Gz4BsUBsG5p7aucR/f+arCeGq+9LCeSry1/rrXcN6/n
mvyuH856RvYqTZNK35/uTRNWymur/Pp25lvLfL/n9dd7mJptQLYwi/8PL30P
eifH5nN3Kv2O9VzVStuBnndd9DPpWS4tnd/1D85tVUd4AzyT/uPzf9uXtmPZ
sOLgW4XtrTn3NJTzLk7OfaT/pQ/rKzbQHtX98//R8KnBNYRJea9spm1b2pb+
yXagdfwpX1P3dUayf70QrFXatvSuWyTnZO3B1rSLStvYmfCbFO+l40rbnOxt
l9I2J3ublhxXaiXv3c15P8v//JV9wpLgHGEbxiwLzpW2hS8K1upbwb8Pzvu2
hofoXFJ67yh4p8I6qmGOZdJjdaNjkPTYeck56/XgntExSBq1Udb/0mb14ecW
1qvS9V209qXzX8WE66QPg+sPCf6ndF9hLbopOBeWRv0rOJ+Vdr0tuSayPbgS
rEt/ZXiZz+2ndxCteaSN5wXn3VvAvw3OjyvCvw72RRWk/ZLzqs7gucm51OXg
7tHxWnp1RHIuqtzk4Gg9Jk2reo20UB3p6+iYvgd8x2gNI838ZXTueXl0rqN7
7gG2Yb6b4XPgy/jvR703xeocF2WXO0frImnyO4PzSNmH4s5z4D/0t0zOWZpF
51/SfsqtBmZ9rpxIuVFbxQj5xegagnKEitE1NNlSrWjtIU1+UPR46eo60RpG
+vxv5jm4cE6xVXTNbTf4lvBjC+cgNWXH8PrwCtG1C+ULW0fX5XbXsyTX8nbR
OgePHy9fFTzPcHh3CQCOK4Hrg3VmVXjz6HztJHiLaN1+st5ddI52iuJXtK4+
En5itJZWbnJ8tB0qLxibXGtQXvlo8vtQnvhlcL7cSc8dnQucmJyD9oTPVTyh
/2r40cop6N9N+52+L6Lzcb3HhfTXg18B/xReDX4JfHZwDaoD/JPgGlFH+HnB
sX0B858WnXeslA1GX/cE5TvBWiXCP4JvC2/H/98F1zSu1Dzyt/CmjFkaXFu4
ir7Po3W+9P7i4NpFl2gfIp0hHaJc+W6Nke+KzrmOk9+m/zD4zfStCa499pC2
Ca5P3gCfGK05pT03Btdpb5HNB9dye8KPoXUunH/9mtenCnxtcD32Jv5fF1yb
2k57LjpXUo52ZHTuozxudXAN9kb6VmWb7C4/HFz/vFX7KbjWejV8BbwB/Fr4
8uDaS1ftregc/9jk/aN9dAz8TPhN8CbwLaLzoNvB/6RL4L3k+7N/uwN8N1oj
KteppHcA7w3+G1ybvQ1eLbre0gd8k3kbBPuK6tF1nn5a7+S6kp5r/+j622A9
d3I9UTZ2QHTdbAh4YHStbCjYN7kWrOuqhqu6reLufnnN742uoyqmKb53Sq6H
ys47JNe8ZJOXJNesZatXyf+Wtp8r5aNL21gX+ejS9nMFfGNpO1eNXvnMEPCZ
5Fqk3m/jvF/uAx9LrjnKhick1/Lknx9MrhsOZ8zTyfVQ+faJeX756jHJdcmR
jHkkuf44Gv5Qcj1xFLxedB3ybrCBngd+Dzg+uXamWFM7ug45AByXXNN8UH46
ulZ5l2w5ue75QLZt1Z5XJsf3yrTpHHdMrrtp/0rj1YC/CT6bXJ+VDT8TnWep
/nNjcv1RtnpTcu1P++g/2sys925IrhVqT/2UnFtqLytflk5XXUhzSuOrtqbc
Sq5SeWEvxjbh3GnB+ZTyX+XBym2l2fRtQvlR7cJ5c48cUxRbFI//H5fp7wb/
t3Re/2/Ws6oFdlUMKL13+iR/b5D9t0uuk8oXqU4+obC+vSX5u4X2/q3J30vk
E3olf0fRPr09+XuG9oj0/w7MM0OxMblOKp+wd3Ttd5DsiP7Npfd17+RvRdqb
PZO/r8hH3ZH8jUf79OXoHEI1w6fyudJCT2bblv6R7lJeq28I+u4zpXAO83Jw
bW5KsJZTnqpvKcrjlI89r+cJrqeqRittvxvnvxf87UN1aX0DUm3kPfh70TVb
1WCfDo4Xyof+TP528BX988Am0dpA9nxc9kUjs59RLWddsj9XzrohOS9Wrv6s
9l1wDiv+XbTGVy1Umk15uvL1vYPzV+XPqmspV1XO+lAer/OUpy+DTwqOTZvy
OijXmwmfGZ2nL4E/Eaxhfipc41We2Ibnfzc4BzwP/naw1qpT+LvKFRxXp/8d
2WBwbUHXkgbbo7Bukk6WPpwLP4J2HXwEeFdyTVI+c0D2paq19ofvE+xj70mu
N2ovD06uJQ6E351c51Ttd1Ty94lh8HuT65DyG/2S1+hO7bPs66SZH88+UBpy
dPI3Cd3PA8nfP+6H7xX97UPXGpRc55SfOTT6G4qudXj0dxP5upHJ30XkG1Vn
VNyXtjss+juL5lSeotq+vptJH87Ja6465IfZ30oHyh4XgqdG19bkG4cm143l
A+9L/u6oWDAkubasPXVKtGaQr5uU97hyh+HJ3yEUX+5P/q6guDMs+fuBYlPT
6DqD/OePyXUxabCZ+V1IGy9NruVJw6xJzqlUZ/ghuaYm/fZdcj1dsXj76G+j
Wv/nkr97SfstT67ZSft9n1xzlz7ZmPzNVXtncnI+IN24LLneJ/22Pvlbsvbg
6uR9q++Yi5Nr+or13ybX+qXrfk/+pis7fy1Zp0qvfp38zUDacnpyDU6a9o3k
Op308KLk+r60xPPJulY5y/8A0tTFbw==
             "]], 
            Polygon3DBox[CompressedData["
1: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
MnkOiE8/lZ4b9tcJwrvqOitZixI7/yytSVnTjeGy4LW+SdfDCQesbfhb93ue
8AHC84UrCLcglgi/KPydrocJl7rOSN4TJwvvmfcK7xyth+ZjLbBf2UtR15ns
Z7XVUn8L2fzoZ7yr9D38ljmbPQEnwU2d87t4nz2SORluhrPhltujuRnOhXuP
iNafJ6rvPdaq8GrhJ2XPRK8nPruf+vvn94O2rhustdBgaLE6avtEbdOCtc+7
xAj5Z2n8APkXBetN9BVaAE3wZnR+UU+fP1h2FrEmeL+ukY2XP1ptb5Recw01
dk10rDhIfdvU11x4oPDFwfF0CPtaeIqsQrDGgusPDNZeXaP5FQ2LloVTiWWs
AdbCR3m/zwjWXzzzxNJ7irkgRn0qv17w/HG/G9ifmWMOic5fj5H/bvKeItYT
89lrj8HT8EXhHJacj1jdODgXhIMHZf7cnDmeWEYM2ZLHkys2Cs4nj4zOV08K
zifRuGjdQ4XfSOYkYi8xEa76Ljo/fEttn6jvVdkkYp1scXJOTr7cUGOXJetQ
9Cj8Oi6v+Z75fbMXyEnbyD8lOFetn9fXscG5Ppx0X55fuArOG1Z6T8KFj0W/
r9dlj0bvUfIj8qWtmcOG5/XL/JOnkq9Ol/XIHMh8EVPhxpAcX0bK35z5G62K
Zn0czg3Wk3cU1pdoNrQN9Qm0HP1oz02FNedVauteOiadm6wZmMu9g7UEnEF+
Vz+vHzQhWviEYK2IxmZPoqk/DdbQXbJe/zJ4TbeV3ySv9dqlc2hy5/sL7/kX
CutluIAY2E7+qcGx8Ub2PDkD+yZzBvuRmA+XXCk/yCqW1n9oULTuycHaFI1L
7nF8sPZFs3fN+QNceKL8yqU10JzCGh2tjkb6PHjPsnfnB+s5NFKl0veLdiKH
IJcg5n4WXLvYQzaicA2jvvwqpWMmNRxiDLHmDPhM/m7Ja41n4tmI4dcG61di
+1b2vPCxRbG96HB5dP3ii8K1oveCtd9XsnU8a3Q+va5w/kGONzmYk+CmxdHa
8jU4LPPN2sJ7nr3/U7Lu3D6GtRNd12JNziWWRnPnR7JVaOvkOsCszKezo7U4
MXBOxuReL8mWBWsytBlz0UL+FdFrfRkmv4vsKe6V35C/PPrZ1jO/aJ3otfu9
bKP8Jfqut+S/jQm/EZ1nLMn8u0m/8XKwBkWLfsd6Da5P/BQ8p8ztO3k+Wkdz
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
K6IZOfvmvJUzacafkaxx+smfHVw7/j9Sv7YM
             "]], 
            Polygon3DBox[CompressedData["
1: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
             "]], 
            Polygon3DBox[{{898, 552, 673, 1109, 785, 786}}]},
           Annotation[#, "Charting`Private`Tag$3557#1"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
           "Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0+dLVWEcwPHHnaZZqZVtm3qzsmFmtsscTU1tF1SvC+ovaNqwQX9C/0Kv
mjYlDHwZ7WkkQpAFmSOvnwPB/fB9OM/zu/ecA7fg8PH6YwkhhBc8TwzBJ9zg
kIt1jGUFiylnOY8dqtWR/HN2hxYwlBTCGL1jf57G7e3UXFaxhNv2VmoFm8lk
0NyQs/XWM3jgTI4Wk0Aj47jr+lpdyl8za3Q1W8iKHoInzjToTPKYTxK7eGpv
gg6Y3aClrGcdW7lvf5Qm0sQsxrOAVntxcynWe5jIJpZRySP7G3Ub2SSzm34z
s/Wh/XxdSBr7mEwNZVRTxfbonZoZrak8M7dX5zCJEkawnyncs1+khfSZO6hz
WUQ6B6L7TQ6hzbmp1jFuelXBtWnW08mInsWl7Oh3abQu1qNaoSe1W3/oAKf5
Qw/9vDJ/Rn/x2vqsvtFz+lbP6ztt1vd6QT/oRy5af9JL+lkv6xdt0a96RTv1
qn7Ta3rLs/zUQa7Ty2+a3OMprdYTWq5HNKZFNFhnaaXGfUdZdM8a0y79Hr0j
65eaqx2aqe2aGtVs+///yTDk4VqE
         "]]}, 
       {GrayLevel[0.2], 
        Line3DBox[{712, 971, 972, 941, 940, 1261, 711, 955, 956, 1007, 1022}],
         Line3DBox[{714, 863, 1119, 713, 862, 1118, 1105, 975, 861, 1117, 
         1101, 957, 860, 989, 1116, 1097, 925, 859, 952, 1265, 944, 1016}], 
        Line3DBox[{718, 867, 1123, 717, 866, 1122, 716, 865, 1121, 715, 864, 
         1120, 1106, 976, 1262, 1026, 943, 958, 1256, 1025, 990, 924, 928, 
         1104, 1257, 1019}], 
        Line3DBox[{726, 869, 1125, 725, 868, 1124, 724, 1188, 1029, 723, 1187,
          1028, 722, 1186, 1027, 721, 1270, 978, 991, 977, 992, 720, 1271, 
         979, 946, 947, 945, 719, 1266, 959, 927, 1008, 926, 1009, 1260, 
         1023}], Line3DBox[{743, 879, 1135, 741, 1194, 1036, 739, 1193, 1035, 
         737, 1192, 1034, 735, 1191, 1033, 733, 1190, 1032, 731, 1189, 1031, 
         729, 1272, 980, 993, 995, 994, 1275, 728, 982, 983, 948, 1263, 1102, 
         727, 961, 962, 1018}], 
        Line3DBox[{754, 889, 1146, 753, 888, 1145, 752, 887, 1144, 751, 886, 
         1143, 750, 885, 1142, 749, 1197, 1039, 748, 1196, 1038, 747, 1195, 
         1037, 1141, 746, 884, 1140, 745, 883, 1139, 1108, 984, 882, 1138, 
         949, 963, 881, 1137, 929, 931, 938, 1258, 1099, 935, 1017}], 
        Line3DBox[{767, 894, 1152, 766, 893, 1151, 765, 892, 1150, 764, 1204, 
         1046, 763, 1203, 1045, 762, 1202, 1044, 761, 1201, 1043, 760, 1200, 
         1042, 1149, 759, 891, 1148, 758, 890, 1147, 757, 1199, 1041, 756, 
         1198, 1040, 755, 1259, 933, 936, 932, 939, 1006, 1015, 1113}], 
        Line3DBox[{781, 897, 1156, 780, 896, 1155, 779, 1213, 1055, 778, 1212,
          1054, 777, 1211, 1053, 776, 1210, 1052, 775, 1209, 1051, 774, 1208, 
         1050, 1154, 773, 895, 1153, 772, 1207, 1049, 771, 1206, 1048, 770, 
         1205, 1047, 769, 1267, 965, 973, 964, 974, 768, 1268, 966, 934, 937, 
         1024}], Line3DBox[{784, 968, 1056, 1269, 986, 985, 1157, 898, 786, 
         1158, 899, 788, 1159, 900, 790, 1160, 901, 792, 1161, 902, 794, 1162,
          1062, 1221, 796, 1064, 1223, 798, 1163, 903, 800, 1164, 904, 802, 
         1165, 905, 804, 1166, 906, 806, 1167, 907, 808, 1168, 908, 810}], 
        Line3DBox[{809, 1229, 1070, 807, 1228, 1069, 805, 1227, 1068, 803, 
         1226, 1067, 801, 1225, 1066, 799, 1224, 1065, 797, 1222, 1063, 795, 
         1220, 1219, 1061, 793, 1218, 1060, 791, 1217, 1059, 789, 1216, 1058, 
         787, 1215, 1057, 785, 1109, 1214, 997, 999, 998, 782, 1110, 1274, 
         987, 969, 967, 783}], 
        Line3DBox[{812, 1071, 1230, 811, 1072, 1231, 813, 1169, 909, 814, 
         1170, 910, 815, 1171, 911, 816, 1172, 912, 817, 1173, 1073, 1232, 
         818, 1074, 1233, 819, 1075, 1234, 820, 1174, 913, 821, 1175, 914, 
         822, 1176, 915, 823, 1177, 916, 824, 1178, 917, 825}], 
        Line3DBox[{827, 1076, 1235, 826, 1077, 1236, 828, 1078, 1237, 829, 
         1079, 1238, 830, 1179, 918, 831, 1180, 919, 832, 1181, 1080, 1239, 
         833, 1081, 1240, 834, 1082, 1241, 835, 1083, 1242, 836, 1084, 1243, 
         837, 1182, 920, 838, 1183, 921, 839, 1184, 922, 840}], 
        Line3DBox[{854, 1005, 1004, 1276, 853, 1255, 1095, 852, 1254, 1094, 
         851, 1253, 1093, 850, 1252, 1092, 849, 1251, 1091, 848, 1250, 1090, 
         847, 1249, 1089, 1185, 846, 1248, 1088, 845, 1247, 1087, 844, 1246, 
         1086, 843, 1245, 1085, 842, 1111, 1244, 1003, 841, 1277, 1001, 1000, 
         1002}], Line3DBox[{970, 858, 1115, 1100, 954, 857, 988, 1114, 1096, 
         923, 856, 951, 942, 1112, 1264, 1010, 1013, 855, 1020}], 
        Line3DBox[{1021, 1014, 1011, 1012, 950, 953, 870, 930, 1098, 1126, 
         996, 871, 960, 1103, 1127, 872, 981, 1107, 1128, 1030, 1273, 730, 
         1129, 873, 732, 1130, 874, 734, 1131, 875, 736, 1132, 876, 738, 1133,
          877, 740, 1134, 878, 742, 1136, 880, 744}]}, 
       {GrayLevel[0.2], 
        Line3DBox[{472, 596, 693, 692, 1277, 687, 457, 581, 1235, 442, 566, 
         1230, 427, 551, 1269, 674, 676, 675, 1274, 412, 536, 655, 652, 654, 
         1268, 653, 397, 521, 627, 624, 710}], 
        Line3DBox[{473, 597, 688, 1244, 458, 582, 1236, 443, 567, 1231, 428, 
         1157, 552, 673, 1214, 413, 537, 1267, 651, 398, 522, 1259, 623, 383, 
         626, 625, 1258, 700}], 
        Line3DBox[{474, 598, 1245, 459, 583, 1237, 444, 1169, 568, 429, 1158, 
         553, 1215, 414, 538, 1205, 399, 523, 1198, 384, 1137, 510, 649, 621, 
         650, 709}], 
        Line3DBox[{475, 599, 1246, 460, 584, 1238, 445, 1170, 569, 430, 1159, 
         554, 1216, 415, 539, 1206, 400, 524, 1199, 385, 1138, 176, 177, 950, 
         311}], Line3DBox[{476, 600, 1247, 461, 1179, 585, 446, 1171, 570, 
         431, 1160, 555, 1217, 416, 540, 1207, 401, 1147, 525, 386, 1139, 671,
          672, 670, 686, 685, 1126, 619, 622, 618, 704}], 
        Line3DBox[{477, 601, 1248, 462, 1180, 586, 447, 1172, 571, 432, 1161, 
         556, 1218, 417, 1153, 541, 402, 1148, 526, 387, 1140, 511, 373, 1127,
          636, 648, 635, 1263, 637, 705}], 
        Line3DBox[{479, 603, 1249, 464, 588, 1239, 449, 573, 1232, 434, 558, 
         1221, 1220, 419, 543, 1208, 404, 528, 1200, 389, 513, 1195, 375, 502,
          1273, 1272, 667, 365, 494, 645, 647, 1266, 646, 357, 487, 701}], 
        Line3DBox[{480, 604, 1250, 465, 589, 1240, 450, 574, 1233, 435, 559, 
         1223, 1222, 420, 544, 1209, 405, 529, 1201, 390, 514, 1196, 376, 
         1129, 503, 1189, 366, 495, 664, 666, 1271, 665, 358, 488, 640, 1257, 
         617, 708}], 
        Line3DBox[{481, 605, 1251, 466, 590, 1241, 451, 575, 1234, 436, 1163, 
         560, 1224, 421, 545, 1210, 406, 530, 1202, 391, 515, 1197, 377, 1130,
          504, 1190, 367, 496, 1270, 663, 359, 489, 1256, 643, 614, 644, 
         707}], Line3DBox[{482, 606, 1252, 467, 591, 1242, 452, 1174, 576, 
         437, 1164, 561, 1225, 422, 546, 1211, 407, 531, 1203, 392, 1142, 516,
          378, 1131, 505, 1191, 368, 497, 1186, 360, 490, 1262, 660, 634, 662,
          353, 639, 1265, 638, 699}], 
        Line3DBox[{483, 607, 1253, 468, 592, 1243, 453, 1175, 577, 438, 1165, 
         562, 1226, 423, 547, 1212, 408, 532, 1204, 393, 1143, 517, 379, 1132,
          506, 1192, 369, 498, 1187, 361, 1120, 659, 661, 658, 681, 680, 1116,
          612, 615, 611, 702}], 
        Line3DBox[{484, 608, 1254, 469, 1182, 593, 454, 1176, 578, 439, 1166, 
         563, 1227, 424, 548, 1213, 409, 1150, 533, 394, 1144, 518, 380, 1133,
          507, 1193, 370, 499, 1188, 362, 1121, 491, 354, 1117, 632, 642, 631,
          633, 1264, 696, 697}], 
        Line3DBox[{485, 609, 1255, 470, 1183, 594, 455, 1177, 579, 440, 1167, 
         564, 1228, 425, 1155, 549, 410, 1151, 534, 395, 1145, 519, 381, 1134,
          508, 1194, 371, 1124, 500, 363, 1122, 492, 355, 1118, 656, 657, 679,
          678, 677, 1114, 610, 613, 698}], 
        Line3DBox[{691, 690, 1276, 689, 471, 1184, 595, 456, 1178, 580, 441, 
         1168, 565, 1229, 426, 1156, 550, 411, 1152, 535, 396, 1146, 520, 382,
          1136, 1135, 509, 372, 1125, 501, 364, 1123, 493, 356, 1119, 486, 
         352, 1115, 629, 641, 1261, 628, 630, 695, 706}], 
        Line3DBox[{478, 1185, 602, 463, 1181, 587, 448, 1173, 572, 433, 1162, 
         557, 1219, 418, 1154, 542, 403, 1149, 527, 388, 1141, 512, 374, 1128,
          668, 669, 684, 1275, 683, 682, 616, 620, 694, 1260, 703}]}, {}, {}}},
     VertexNormals->CompressedData["
1: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
      "]], {}}, 
   {GrayLevel[0.5], Opacity[0.5], 
    TagBox[
     ConicHullRegion3DBox[{{1, 2., 0.596155534596962}, {
       2, 0.5, 0.37576259690409564`}, {3, -1., 0.882634736024364}}],
     "InfinitePlane"]}, 
   {GrayLevel[0.5], Opacity[0.5], 
    TagBox[
     ConicHullRegion3DBox[{{1, 2.5, 0.2712126464791027}, {
       2, 2., 0.10139296522350993`}, {3, 1.5, 0.4334048316906207}}],
     "InfinitePlane"]}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{341.5345426031606, 261.8120310694716},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0, 5}, {0, 5}, {7.203487975691672, 49.999992857143106`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-0.7289435137075484, -2.817458973727002, 1.726431662472893},
  ViewVertical->{0.12779484575430372`, 0.49394325924542887`, 
   0.8600514717414515}]], "Output",
 CellChangeTimes->{{3.823251262460496*^9, 3.8232512698397818`*^9}, 
   3.82325135165182*^9, 3.8232514297706394`*^9, 3.82325325755676*^9, 
   3.8238536172063193`*^9, 3.823948871285187*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"4200c751-75db-457d-959d-8448c6879998"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Linear Support Vector Machine", "Section",
 CellChangeTimes->{{3.822981114493249*^9, 
  3.8229811230414*^9}},ExpressionUUID->"3b64852d-85ac-42fc-81d6-a533fd895d6a"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s now produce a support vector machine for the example \
from the video lectures. First, we need to define the samples, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "f288ea17-79ce-4336-9348-f91588a93c17"],
 ". These are points in a 2D vector space which are labelled as either \
\[OpenCurlyDoubleQuote]Plus\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]Minus\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.822992977829295*^9, 3.822992978514311*^9}, {
  3.8229945867032957`*^9, 
  3.822994651725788*^9}},ExpressionUUID->"05d2161c-cfdb-419e-8627-\
028b75f6b563"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Plus\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1.284422952732416`", ",", "2.481901856407326`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.4879960382523703`", ",", "2.402086883623099`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.193340935618989`", ",", "2.0674820899685353`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.07511361074236`", ",", "2.8655605261563037`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.5621522276001985`", ",", "2.3036590135818598`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.0734941576442104`", ",", "2.7567100412409644`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"2.0267587486366514`", ",", "1.8146817202743937`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.7160467347301873`", ",", "2.2314527869285374`"}], "}"}]}],
        "}"}]}], ",", 
     RowBox[{"\"\<Minus\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.3650725217541822`", ",", "1.4540111456859945`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.8799169703454597`", ",", "1.3235540770631689`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.2775167301897557`", ",", "0.026781782266628973`"}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"1.7185797382262036`", ",", "0.8439744313421516`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.0440125841941863`", ",", "0.8714161830961258`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.009012707820185`", ",", "0.4883132746354524`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.0444111436444237`", ",", "1.0249991478151106`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.4175016236764821`", ",", "0.3949618274790252`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.40287782851680287`", ",", "0.35796696425588426`"}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"1.3129335119181957`", ",", "0.193320544474747`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.6678854129083547`", ",", "0.5245058562945744`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"3.62477502445507`", ",", "0.2321920742831569`"}], "}"}]}], 
       "}"}]}]}], "|>"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82297614437396*^9, 3.822976192253549*^9}, {
  3.82297643933304*^9, 3.8229764440907087`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"1baf39a4-fe3b-48a8-8f4b-14e1da2c8efc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822976418959372*^9, 3.822976467491787*^9}, {
  3.8229777597299623`*^9, 3.822977836251227*^9}, {3.8229796327265263`*^9, 
  3.822979638236968*^9}, {3.822994660347761*^9, 3.822994673036398*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"277a89e2-d112-4ae2-ab84-e40a68fffb47"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{{
                GrayLevel[1], 
                DiskBox[{0, 0}, 
                 Offset[{3, 3}]]}, 
               AbsoluteThickness[1.5], 
               Dashing[{}], 
               CircleBox[{0, 0}, 
                Offset[{3, 3}]]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Scaled[9.75]], {{{1.284422952732416, 2.481901856407326}}, {{
         1.4879960382523703`, 2.402086883623099}}, {{4.193340935618989, 
         2.0674820899685353`}}, {{1.07511361074236, 2.8655605261563037`}}, {{
         4.5621522276001985`, 2.3036590135818598`}}, {{0.0734941576442104, 
         2.7567100412409644`}}, {{2.0267587486366514`, 
         1.8146817202743937`}}, {{1.7160467347301873`, 
         2.2314527869285374`}}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{{
                GrayLevel[1], 
                PolygonBox[
                 NCache[{
                   Offset[{0, 4}], 
                   Offset[{(-2) 3^Rational[1, 2], -2}], 
                   Offset[{2 3^Rational[1, 2], -2}]}, {
                   Offset[{0, 4}], 
                   Offset[{-3.4641016151377544`, -2}], 
                   Offset[{3.4641016151377544`, -2}]}]]}, 
               AbsoluteThickness[1.5], 
               Dashing[{}], 
               JoinedCurveBox[
                NCache[
                 Line[{
                   Offset[{0, 4}], 
                   Offset[{(-2) 3^Rational[1, 2], -2}], 
                   Offset[{2 3^Rational[1, 2], -2}], 
                   Offset[{0, 4}]}], 
                 Line[{
                   Offset[{0, 4}], 
                   Offset[{-3.4641016151377544`, -2}], 
                   Offset[{3.4641016151377544`, -2}], 
                   Offset[{0, 4}]}]], CurveClosed -> True]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Scaled[9.75]], {{{0.3650725217541822, 1.4540111456859945`}}, {{
         1.8799169703454597`, 1.3235540770631689`}}, {{0.2775167301897557, 
         0.026781782266628973`}}, {{1.7185797382262036`, 
         0.8439744313421516}}, {{1.0440125841941863`, 0.8714161830961258}}, {{
         4.009012707820185, 0.4883132746354524}}, {{0.0444111436444237, 
         1.0249991478151106`}}, {{1.4175016236764821`, 
         0.3949618274790252}}, {{0.40287782851680287`, 
         0.35796696425588426`}}, {{1.3129335119181957`, 
         0.193320544474747}}, {{1.6678854129083547`, 0.5245058562945744}}, {{
         3.62477502445507, 0.2321920742831569}}}]}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 4.5621522276001985`}, {0, 2.8655605261563037`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{{
                    GrayLevel[1], 
                    DiskBox[{0, 0}, 
                    Offset[{3, 3}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    CircleBox[{0, 0}, 
                    Offset[{3, 3}]]}, {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 9.75}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.09205128205128206] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{{
                    GrayLevel[1], 
                    PolygonBox[
                    NCache[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}]}, {
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}]}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    JoinedCurveBox[
                    NCache[
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}], 
                    Offset[{0, 4}]}], 
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}], 
                    Offset[{0, 4}]}]], CurveClosed -> True]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 9.75}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.09205128205128206] -> 
                    Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{{
                    GrayLevel[1], 
                    DiskBox[{0, 0}, 
                    Offset[{3, 3}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    CircleBox[{0, 0}, 
                    Offset[{3, 3}]]}], ",", "9.75`"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{{
                    GrayLevel[1], 
                    PolygonBox[
                    NCache[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}]}, {
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}]}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    JoinedCurveBox[
                    NCache[
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}], 
                    Offset[{0, 4}]}], 
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}], 
                    Offset[{0, 4}]}]], CurveClosed -> True]}], ",", "9.75`"}],
                    "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.823251438306387*^9, 3.823253257690331*^9, 
  3.823853617492527*^9, 3.8239488715624743`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"f74db8e6-c34c-4481-b732-161819d716b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving the primal problem", "Subsection",
 CellChangeTimes->{{3.822994686625305*^9, 
  3.822994691530304*^9}},ExpressionUUID->"a0d87674-85da-448f-9f75-\
c4c4fc2b0335"],

Cell["\<\
We can directly solve the primal problem. To do so we need to set up the \
constraints imposed by the samples.\
\>", "Text",
 CellChangeTimes->{{3.8227591223385363`*^9, 3.822759128684408*^9}, {
  3.822994742076789*^9, 
  3.822994758658195*^9}},ExpressionUUID->"572c21a5-143a-4be7-99b8-\
0e67f833dbbf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plusConstraints", "=", 
  RowBox[{"Apply", "[", 
   RowBox[{"And", ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", "x"}], "+", "b"}], 
       "\[GreaterEqual]", "1"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"data", "[", "\"\<Plus\>\"", "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8232524722635984`*^9, 3.8232525292313175`*^9}, {
  3.8232526120147557`*^9, 3.8232526402696037`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"ab79a048-191a-44be-b0dd-4f6f4c591807"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.284422952732416`", " ", "w1"}], "+", 
    RowBox[{"2.481901856407326`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.4879960382523703`", " ", "w1"}], "+", 
    RowBox[{"2.402086883623099`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.193340935618989`", " ", "w1"}], "+", 
    RowBox[{"2.0674820899685353`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.07511361074236`", " ", "w1"}], "+", 
    RowBox[{"2.8655605261563037`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.5621522276001985`", " ", "w1"}], "+", 
    RowBox[{"2.3036590135818598`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.0734941576442104`", " ", "w1"}], "+", 
    RowBox[{"2.7567100412409644`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"2.0267587486366514`", " ", "w1"}], "+", 
    RowBox[{"1.8146817202743937`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.7160467347301873`", " ", "w1"}], "+", 
    RowBox[{"2.2314527869285374`", " ", "w2"}]}], "\[GreaterEqual]", 
   "1"}]}]], "Output",
 CellChangeTimes->{
  3.823252531046199*^9, {3.823252620137495*^9, 3.8232526451480637`*^9}, 
   3.823253257760717*^9, 3.823853617559662*^9, 3.823948871617324*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"ef580280-4c09-4b09-a629-f18ede000bba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"minusConstraints", "=", 
  RowBox[{"Apply", "[", 
   RowBox[{"And", ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", "x"}], "+", "b"}], 
       "\[LessEqual]", 
       RowBox[{"-", "1"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"data", "[", "\"\<Minus\>\"", "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.823252651039193*^9, 3.8232526610834093`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"78dc4baa-6592-4038-b870-fee62d3c5cd0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.3650725217541822`", " ", "w1"}], "+", 
    RowBox[{"1.4540111456859945`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.8799169703454597`", " ", "w1"}], "+", 
    RowBox[{"1.3235540770631689`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.2775167301897557`", " ", "w1"}], "+", 
    RowBox[{"0.026781782266628973`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.7185797382262036`", " ", "w1"}], "+", 
    RowBox[{"0.8439744313421516`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.0440125841941863`", " ", "w1"}], "+", 
    RowBox[{"0.8714161830961258`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.009012707820185`", " ", "w1"}], "+", 
    RowBox[{"0.4883132746354524`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.0444111436444237`", " ", "w1"}], "+", 
    RowBox[{"1.0249991478151106`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.4175016236764821`", " ", "w1"}], "+", 
    RowBox[{"0.3949618274790252`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.40287782851680287`", " ", "w1"}], "+", 
    RowBox[{"0.35796696425588426`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.3129335119181957`", " ", "w1"}], "+", 
    RowBox[{"0.193320544474747`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.6678854129083547`", " ", "w1"}], "+", 
    RowBox[{"0.5245058562945744`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"3.62477502445507`", " ", "w1"}], "+", 
    RowBox[{"0.2321920742831569`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}]}]], "Output",
 CellChangeTimes->{3.823252661318779*^9, 3.823253257809553*^9, 
  3.8238536176214666`*^9, 3.823948871672181*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"1b7ea952-a212-4874-8c26-2e12bdb299bf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allConstraints", "=", 
  RowBox[{"Join", "[", 
   RowBox[{"plusConstraints", ",", "minusConstraints"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8232526724021726`*^9, 3.82325268157698*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"a9912735-3d83-4ff2-ba99-4378d90fc8c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.284422952732416`", " ", "w1"}], "+", 
    RowBox[{"2.481901856407326`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.4879960382523703`", " ", "w1"}], "+", 
    RowBox[{"2.402086883623099`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.193340935618989`", " ", "w1"}], "+", 
    RowBox[{"2.0674820899685353`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.07511361074236`", " ", "w1"}], "+", 
    RowBox[{"2.8655605261563037`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.5621522276001985`", " ", "w1"}], "+", 
    RowBox[{"2.3036590135818598`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.0734941576442104`", " ", "w1"}], "+", 
    RowBox[{"2.7567100412409644`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"2.0267587486366514`", " ", "w1"}], "+", 
    RowBox[{"1.8146817202743937`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.7160467347301873`", " ", "w1"}], "+", 
    RowBox[{"2.2314527869285374`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.3650725217541822`", " ", "w1"}], "+", 
    RowBox[{"1.4540111456859945`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.8799169703454597`", " ", "w1"}], "+", 
    RowBox[{"1.3235540770631689`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.2775167301897557`", " ", "w1"}], "+", 
    RowBox[{"0.026781782266628973`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.7185797382262036`", " ", "w1"}], "+", 
    RowBox[{"0.8439744313421516`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.0440125841941863`", " ", "w1"}], "+", 
    RowBox[{"0.8714161830961258`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.009012707820185`", " ", "w1"}], "+", 
    RowBox[{"0.4883132746354524`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.0444111436444237`", " ", "w1"}], "+", 
    RowBox[{"1.0249991478151106`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.4175016236764821`", " ", "w1"}], "+", 
    RowBox[{"0.3949618274790252`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.40287782851680287`", " ", "w1"}], "+", 
    RowBox[{"0.35796696425588426`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.3129335119181957`", " ", "w1"}], "+", 
    RowBox[{"0.193320544474747`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.6678854129083547`", " ", "w1"}], "+", 
    RowBox[{"0.5245058562945744`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"3.62477502445507`", " ", "w1"}], "+", 
    RowBox[{"0.2321920742831569`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}]}]], "Output",
 CellChangeTimes->{3.82325268195098*^9, 3.8232532578577375`*^9, 
  3.8238536176807423`*^9, 3.823948871722044*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"74c1ad90-7b99-4cb4-b8f7-382ea551e404"]
}, Open  ]],

Cell["\<\
Now we can use NMinimise to find the  solution to the constrained \
optimisation problem.\
\>", "Text",
 CellChangeTimes->{{3.822995475106427*^9, 
  3.8229955228847837`*^9}},ExpressionUUID->"b2879cb0-22d2-4c9a-b278-\
59ac4e9c8e3c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"norm2", ",", "sol"}], "}"}], "=", 
  RowBox[{"NMinimize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"0.5", " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["w1", "2"], "+", 
         SuperscriptBox["w2", "2"]}], ")"}]}], ",", "allConstraints"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2", ",", "b"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8232526864027176`*^9, 3.823252739179363*^9}, {
  3.823253237195903*^9, 3.8232532418010406`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"88731b18-b2c1-422e-9fbd-c5aa2f168574"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.611251674354541`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"w1", "\[Rule]", "1.1176497303899737`"}], ",", 
     RowBox[{"w2", "\[Rule]", "3.738096096794236`"}], ",", 
     RowBox[{"b", "\[Rule]", 
      RowBox[{"-", "8.048661024444451`"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.823252739621645*^9, {3.8232532433591146`*^9, 3.823253257924596*^9}, 
   3.8238536179233837`*^9, 3.823948871778864*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"81fcf7e0-5224-4317-9f41-3641e40d0610"]
}, Open  ]],

Cell["This means that our decision function is", "Text",
 CellChangeTimes->{{3.8229793983076553`*^9, 3.822979403507124*^9}, {
  3.82299555567955*^9, 
  3.8229955584655323`*^9}},ExpressionUUID->"bd7948a8-251a-46fc-afb2-\
461b6156a944"],

Cell[BoxData[
 RowBox[{
  RowBox[{"decision", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.1176497303899737`", ",", "3.738096096794236`"}], "}"}], ".", 
    "x"}], "+", 
   RowBox[{"(", 
    RowBox[{"-", "8.048661024444451`"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.823252787097602*^9, 3.8232528247119226`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"5f3d2c05-c50b-4d8e-af22-0a156dc29575"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decision", "[", 
  RowBox[{"{", 
   RowBox[{"1.2", ",", "1.3"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.823252830467828*^9, 3.8232528351009617`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"a47f2ed9-44c1-4039-a71f-6ae93bb1cd54"],

Cell[BoxData[
 RowBox[{"-", "1.8479564221439757`"}]], "Output",
 CellChangeTimes->{3.8232528354101324`*^9, 3.823253257978649*^9, 
  3.823853617992199*^9, 3.823948872005293*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"11c62e23-c283-4f7c-95fb-6398ac24ed33"]
}, Open  ]],

Cell["Then, our decision line is", "Text",
 CellChangeTimes->{{3.822979465258322*^9, 3.8229794691165257`*^9}, {
  3.822979519821231*^9, 
  3.8229795380222807`*^9}},ExpressionUUID->"8f936eb6-5958-47e8-975c-\
20e978b0b6cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", "0"}], ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.823252860838023*^9, 3.8232529027372203`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"09059c0b-eb6e-4ea1-8d32-4ea7266a6105"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"8.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8232528826830883`*^9, 3.8232529030081143`*^9}, 
   3.8232532580260506`*^9, 3.8238536180581317`*^9, 3.823948872028199*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"81f74a17-ad8e-4b7f-95a7-5745615ddf16"]
}, Open  ]],

Cell["and our margins are", "Text",
 CellChangeTimes->{{3.822979540778611*^9, 
  3.822979543062613*^9}},ExpressionUUID->"4c0682ec-235b-4b88-9fdc-\
5ef34b86fb08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", "1"}], ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8232529061067505`*^9, 3.823252925516968*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"1b6cf5d2-b20e-4968-a33b-e45c57aca0e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"9.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.823252921466853*^9, 3.8232529290354476`*^9}, 
   3.823253258076893*^9, 3.823853618107999*^9, 3.8239488720471787`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"0af0ee9b-608f-4282-87b6-9898826fa8c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", 
    RowBox[{"-", "1"}]}], ",", "y"}], "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"51e59949-6a90-4721-afb8-925bc279d4ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"7.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.823252931290131*^9, 3.8232532580878973`*^9, 
  3.823853618158865*^9, 3.8239488720631313`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"16097642-a847-42a7-b6d3-a51a9374e928"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s now plot our decision line, margins and data \
points", "Text",
 CellChangeTimes->{{3.822995736250307*^9, 
  3.822995749390864*^9}},ExpressionUUID->"71aa4012-4450-45c2-aab6-\
28babcd20107"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "data", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"9.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}], ",", 
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"7.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}], ",", 
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"8.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], ",", 
     
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.82325294375043*^9, 3.823253001453394*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"50e8ad4c-f090-4dd4-a90d-01ca68b7d208"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1.284422952732416, 2.481901856407326}, {
          1.4879960382523703`, 2.402086883623099}, {4.193340935618989, 
          2.0674820899685353`}, {1.07511361074236, 2.8655605261563037`}, {
          4.5621522276001985`, 2.3036590135818598`}, {0.0734941576442104, 
          2.7567100412409644`}, {2.0267587486366514`, 1.8146817202743937`}, {
          1.7160467347301873`, 2.2314527869285374`}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{0.3650725217541822, 1.4540111456859945`}, {
          1.8799169703454597`, 1.3235540770631689`}, {0.2775167301897557, 
          0.026781782266628973`}, {1.7185797382262036`, 0.8439744313421516}, {
          1.0440125841941863`, 0.8714161830961258}, {4.009012707820185, 
          0.4883132746354524}, {0.0444111436444237, 1.0249991478151106`}, {
          1.4175016236764821`, 0.3949618274790252}, {0.40287782851680287`, 
          0.35796696425588426`}, {1.3129335119181957`, 0.193320544474747}, {
          1.6678854129083547`, 0.5245058562945744}, {3.62477502445507, 
          0.2321920742831569}}]}}}, {{}, {{}, {}}}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVzH080wkcwPHNyMXC/MpxwiaRh7p0V6cn32/05PGU5KKus+ShpOa2XkWu
kpK8MNoVebmdPJTyeE3Rg4tEeUxKD7h2HnItv4UZm7Fd/fF5vf/7sNiHt+/X
olAoPp/7Yu5v7DnOoXGuIXSq/Zk9NGzoYnoHMnfBy7Y7jZm7aahprD3DZEaC
R3p06NVgGuY+TLXSYR6HFca9wrpdNIxazzs0ZZUM2qZ3TCg7adilihCMWmVD
0aJD2vG+NNTt6bcjrYqBXPPm3VGgYV6zkPPRqgaORVZeOsCiYVl5ck/UsmbQ
bXCVuYu1MBw6s0diuqDgw42L0flaGD1kPyAqewO/oryiOVwL9ViJdu9cxHBX
sPCBqZ0Wphm1OOT9MgAMkfW8agkV2T07/qa1voe+ZzreHsVU5DxOZB+2k0Cf
ZZMuPZKKlUfo/qYeJIz8EK7LXErFvLiDkuWBo8DxHZQvHqFggnBm28TIGOgs
xyXx5RSkdInxfqwM2txiX+lwKWjLDTu2w0EOev4ZvFPfUXBQfnmn/oNJqNht
UJ4l1YDn0IH4TI4CVhuI/OZHacB3kO9oaTkNi61NRsY/qkHyiH3qSakKnFtX
GnK5aljG6LZw3zsLjhxDozfjs6AH8pBemRrcS4qyxMdnYQsZNGUdQEHP/il1
y+QMvK4PpQY5UbEqVmfvN0dnoOp8w89MORVdi59t1lerIEyHJ25v18LbzwPo
4jgV7IuJq6JfoaF3ZtauQC0VfBvu2O4doo1bRJf/dE6Zhg5jJ33eah1c1un3
+NPcabhXlpDjRJuDqxKbOH4ZSoijOvi19s1BxxUKlcBACXq9sVujRbqY6DZ0
cl2aAoaKWALhia9w5r/0lHMmChAsMdOuCZiL7AsTXJFgCvhXwppCmHo4XGfy
PtF8CoIEe9rpw3rYESz3qy6YBMXGQqWwVh+LRlOzOxZNwsCQ27H6JDrmmA9G
Jt+Uw9X1zuZtIfPw5IaJr+3s5VB6lscIX2qAp2frfMLLJyApYJ8XTW6Aw+be
8XouE7CyN684qc0Q167kX8i4LYMs+5zSNi8jLB3MsLq3XgYnH6ZmedUYoWG6
T+aTu+PgYx5Q2GzDwBc5j9Uua8ZhQ3RTMCOZgTWuqnGv+jEQLmTbtMoZmNIr
aXDDMbB5dO2Sb7AxxhllWfY2jgJ/ab3D81pj7Cyixrz+cRTCZNqdTx0ItD3i
uZmT+wnYlePM5HQCJbX06qMlUohK8J/xzCCQ/zLoltt1KfD8Ra/oFwl0Gble
ZlAghfNyXhr/EoFJZpsKi3KkULZaqbqc+/nHjc/sviAFZZ2mu+gmgaH20qhV
kVLgP6enNjQR2HexgzW5WApX8g9FnHtK4JkbFhb1LCnkc9vdt7YQ6FR30DTN
Qgq3TfjTLe0Exkp1DW0XSKE3iIjoekmgmQfOBGhLwW7AzL1/gMBAdUV3VT8J
y0WxlgVDBGrmazpP/0PCmrM9yv3DBBY6+rT5vCXB2y634oOEQMVPHx4NdZIQ
c5BpOTZG4O+3WJUL6kg4se608i8ZgWubD5f8e5+Es/P6X3DlBA6IH1wrrSYh
qzw/RaEg8HuDoD82VZBw9ZR2+N1pAt/aXM9mlJBwc9t+txMzBCasnRT0XSNB
ZN1o4aom0GH7Rn5xPgm1MlulRkPgs4jMFJ6QhP8BMktLBw==
           "]]}, 
         Annotation[#, "Charting`Private`Tag$3927#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVzH8803kcwPFp9GM2Z/veJRRTHlvmx/HoUZHT+3PSox9KSSiKs5l1pRU1
CtGR0D3MlJByO6S7rqiuVQ+SE4qU9ciU+5ormSUzF1tjs5nr/ng9nv+9XNhH
dnHnEQiE7V/638pM9nyf+PT1VzUrlPnuZmiX0bdF0vdCoaCY/rubGeaeNufQ
6T9Cit4c3cE0Q2VLobMV/SRsMuM9Vq5mSAwQHJ52LoDRRaKW7KVmkBkPlEw4
XwJvF9PlDIoZFsiHmOPO1+Hhjt5dRz/NQlWXOGnMuQF6bp5pibw7C/W3CuSJ
Xl0wESc+SfKZBR68uqROlgGrLrUx9oEJ+Eo3haQeh2dRZJ0dMgHJ5Qzzne8g
7CFGUyTNRhDaPmdV/aAAYiCvTrPRCGz57r+ILz7AL+me7t+0zUDSkzPsI0wV
XLG7XV0ROAN3jpLDlmwZh8YtE1WtXQaoSj+k8o6cgPYUVaZ0swGyxabQz+pJ
GPerVmS81ANBNoia0rSQEbs4ULhHD4zjCSd2s3QwnRWUmdM3DcO6sgjrR1Nw
fo13oGPsNGxVHjx1PkkPjh9fK0oHpiBkWOTu5DQDC01rswT7pkDVxj7dWWcE
7Fpk9dSwDryob5ZtiJ0FSrBPTTRHByTQxQ1ozcA42+nOUX2GTeNR08vDCciz
yf58CO8z/N0abxHlYYHKdjM1Vz5o4V5+ewxdZ4FccjR4IV8LCVaCQal0Hiq/
mSpmqzXASU6/R64gIq/ERjWerIFvee7SbXGWyE3YsEpinISXNA9rgZ8Vot5I
3pOcNgkP67MvexDnoyUxo5Yyi0lIt2DtfPHPfEQhOxTZZU0AaSBtM1+yAHX7
2jAyZz+B8ppLiThjIXqUywmg2XyCkpX2lg3hi9C5Tg9bPulfEFUkdMTRSejC
2iSNzZJxiCrZLyWPkFD8Ia9OAUsN+qBag7jZGtEuxu69unIMFMrAE615ZGRS
Wc/Y+aqgOsDHsTuOgtrWeESErRqFulwBledpgzrqOx7L4CPkhXOCiTobdGFM
TncIHYHVA1XX87q/Qv5O8f4rQz5Audvluu5gW0Q/xeOm71NCVktheXCDLRp+
9XZracQwbHcMr+1ypSL+mHRFargCvud3RFMLqGiNzzpyJXcIxEvZri90VDSQ
aH/7XNx7cG37rTQkmoaaeo9xHvEHQeTZyupppqHuecKvEy3eQYLW8tUzFobe
bFqKq00DwL6joRcUYShG+WvTtIMcErPDTFuLMfQHLeBuEU0OgjBJH/kChoyA
X2eS5JCvEwhFpRgqr6CWRRr6od7PYCyr/PLbkZ30oK8fDI/n3ly7gaHQRg4j
taQfRD3kwvYODAUVMURTlH6oqDl84OwzDBU3tZ4VWvVDzXHphs3PMfR+NOYU
YxaH+4tFM8+lGMoMKjsYocZhIAo7IHuNoSbDgo33u3BgKuw3DCkw5Bs/ahDk
4eAtSXO6qsRQfnHuBCULh3W5cgN3BEO9zS4jtSk4bGNW3h5VYSjNPqr3NReH
5EN0p8lJDN2VdtWvDsIh47ufDH9qMUQwJdR2++OQSxnqPa7D0E434hXuKhzK
b9X8rNdjaDLHv+DichyqT1vyGmcwFHCnL8vTAYcbodzADBOGhG+PpTyh4iBZ
/nTZejOG3lrbHt6/CIdmLcMwN4chd7+bHB0Bh/8AhmRTtQ==
           "]]}, 
         Annotation[#, "Charting`Private`Tag$3927#2"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVxX040wkcAPAtL8lb5td1ysvGqWUtUnlCp+831Inlrth56c3mtUsvZNcL
nXJW1E1THpbOs0To8SBndQ9JTjUvRWWX4+hJ9Fs1dDTLZl7u7o/P83HkH9kV
u4BCoez4z/8X/cQ3do9J3dyX0d5Z4kXFRwoGJ4wRAcH+Zw7WeVJxXt70M4Nx
AFqMNi56uJGKRc0iuhHjJFRmlfoPeVAx0UdwaIqeDadz0u8x1lFRoU/IG6df
BXqhx60iFhUX9g8xx+i3ILa2OLPAlorFHdKkEXo9jL8+ueniLAWra7L7E107
IN17oSSmkYLx8OLqaLIC7KOOeV5Kp+Bh0mVYVt0Ho3fvc0f8KGjqmMl87TkI
681InpcBBXOsnrCKo4bBmtsTXSuaB35/6AODp0qoyvn1jcJ0HpIeZ/KPMFVQ
yaJHRFyYg9qj5iE228egbc/+8LPWc1CcelC1NmwcFNkRHiLxLGRIZ3ZOjk7A
DIdWuOnLWaAoBrHxlBouJAu1nOszsDIl7kQoSwPGV+o2+NJn4K2m4Huz+5+h
eLtU21emh0Dyh9OXk7TA0vsXcp31EPxWvNrBYRqWLi732FA6DaqH/DNtVXpw
qpeH32FPgyutx95v/yzY7bsesbxSB6ag4Q2o58Dj6sYhx3U6+GYscsqJS8FN
z7ICLGq00NsSQ41kU7EsPr9it6sW7mQ92sfQUNEtnyfm3J2COCPBYFfXAix/
oOQ6bpiC6OTUO+aFBuiT7lIiafgMbvGruzg8Q/QsXqVK9vsMz6zZZgIvI6Q3
vbF0b9HAveqMa2wDY2Qmhd/L3a6BVCrru6evjNGOnr21Rz4JpgOnAg7LFqLA
7cf209smgSxzzJOmmeDYS8bL1i415K1aZljPXYShx4VNGo4axIVxrTyGKfZW
l7vJFZ8gMm9vl/k7U2wOOFeo2/MJtP43ddImMyx45TBsNTABw6TviZbz5viL
iaCuI3oCbvi423byLPCoq5CX8GYcqoQCWvwaS0xW7SqoiB+H89zoIAONJd6m
NYgKBv8Bj4HiW+c7F2O4v2/FzVcfQeJyraozyAp9SrZ2a0fGIL1ZJAmqt0Kq
tvF3QjkKO2y5NzucaXiRViWefDsCWw637qZl0zA0zObkco0KpHZ856caGuou
T9mZTHwA54fl+cG7rbFveudz77n3IF7TwupussZM5orj663eQ5za8EU7i8BF
gYl9aot3wK/9xMi+RGCnxDVIZ6eExIyQmcBcAo/VpG17bKMEQYjsL/MrBNrK
O7bkLlFClkaQI84n8IA6ztPFXAnVXjp9QRGBJsHSFRF6EnR/zPeUVRK4zcCK
Ut9HgrjbXPSolcDmQxOyE/kkFJYcSjjXTmBcJtz2v0xCSUqXX8ATAi2viSqt
cki4u1Q8/aSLwL1tLjcqhCQMRBIJipcE6p34l3pTSGAOL/MbGibQq7f7gGcI
CWtlpxxKSQKHPjJiDb8lwVvYr4t9R2CW0ZGo54EkcJhFtz+oCPx7nVlYgi8J
yQcZDhMTBB4X+flL3ElI+/qs7jc1gfaluRCzhgShxdCfKRoC5Q2vvde6kCCp
Kbmo1RK49H2qexuDhBtnDOMbpglsnGtn59mRULkz1jdthsCYL2xWRdmQIHOS
22+eI9CCHfcVewkJTeqVuvl5Aut8ZQ7axST8C3yvQzE=
           "]]}, 
         Annotation[#, "Charting`Private`Tag$3927#3"]& ]}}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 4.5621522276001985`}, {0, 2.8655605261563037`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.8232529465295167`*^9, {3.8232529921444273`*^9, 3.823253001946108*^9}, 
   3.8232532581946106`*^9, 3.823853618311802*^9, 3.8239488722675896`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"e6df9cbe-c6e6-46d7-a1bd-bff01ded4a08"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving the dual problem", "Subsection",
 CellChangeTimes->{{3.822995606787013*^9, 
  3.82299560948449*^9}},ExpressionUUID->"e82e002d-49e0-42cc-8e54-\
e6f0cebf4365"],

Cell[TextData[{
 "We could also solve the dual problem. First, we build up the matrix X and \
vectors ",
 StyleBox["y",
  FontWeight->"Bold"],
 ", ",
 StyleBox["\[Lambda]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["e",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.8227406354649*^9, 3.822740643071721*^9}, {
  3.8229956177110577`*^9, 
  3.822995659533616*^9}},ExpressionUUID->"e94c3f54-6f1d-429b-ac94-\
ebd841892928"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"X", "=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"data", "[", "\"\<Plus\>\"", "]"}], ",", 
    RowBox[{"-", 
     RowBox[{"data", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8232533481772623`*^9, 3.8232533658386745`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"4f12c307-d5c6-4051-8f19-8645f8d460f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.284422952732416`", ",", "2.481901856407326`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.4879960382523703`", ",", "2.402086883623099`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.193340935618989`", ",", "2.0674820899685353`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.07511361074236`", ",", "2.8655605261563037`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.5621522276001985`", ",", "2.3036590135818598`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.0734941576442104`", ",", "2.7567100412409644`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.0267587486366514`", ",", "1.8146817202743937`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.7160467347301873`", ",", "2.2314527869285374`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.3650725217541822`"}], ",", 
     RowBox[{"-", "1.4540111456859945`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.8799169703454597`"}], ",", 
     RowBox[{"-", "1.3235540770631689`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.2775167301897557`"}], ",", 
     RowBox[{"-", "0.026781782266628973`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.7185797382262036`"}], ",", 
     RowBox[{"-", "0.8439744313421516`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.0440125841941863`"}], ",", 
     RowBox[{"-", "0.8714161830961258`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.009012707820185`"}], ",", 
     RowBox[{"-", "0.4883132746354524`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.0444111436444237`"}], ",", 
     RowBox[{"-", "1.0249991478151106`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.4175016236764821`"}], ",", 
     RowBox[{"-", "0.3949618274790252`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.40287782851680287`"}], ",", 
     RowBox[{"-", "0.35796696425588426`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.3129335119181957`"}], ",", 
     RowBox[{"-", "0.193320544474747`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.6678854129083547`"}], ",", 
     RowBox[{"-", "0.5245058562945744`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.62477502445507`"}], ",", 
     RowBox[{"-", "0.2321920742831569`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8232533663852167`*^9, 3.8238536183816495`*^9, 
  3.8239488722955165`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"d176a937-c512-4e13-9078-d24ae81b4860"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Y", "=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"ConstantArray", "[", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", 
       RowBox[{"data", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{"Length", "[", 
       RowBox[{"data", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8232533777893705`*^9, 3.8232534138573065`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"4b254041-e79e-4be5-9e0f-f02a0cb937df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{3.823253414193444*^9, 3.823853618432508*^9, 
  3.823948872317457*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"136a7376-0dfb-4f9d-9177-f7fa88f404b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "=", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"1", ",", 
    RowBox[{"Length", "[", "X", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8232534188491497`*^9, 3.8232534322402596`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"326f6f52-2f16-4169-8daa-8e72b1306e04"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.823253432649004*^9, 3.8238536184983034`*^9, 
  3.823948872334411*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"ee798250-1711-4b22-8632-8197cd9c24f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Lambda]", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8232534356872454`*^9, 3.8232534559275703`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"4aa41e78-9b6c-4fd7-b8ff-43ec276f41d7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[Lambda]i", "[", "1", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "2", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "3", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "4", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "5", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "6", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "7", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "8", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "9", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "10", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "11", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "12", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "13", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "14", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "15", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "16", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "17", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "18", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "19", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "20", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.823253456989194*^9, 3.8238536185511937`*^9, 
  3.823948872353368*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"7448e7df-c65d-49b8-9d25-b2a5014d110b"]
}, Open  ]],

Cell["Now we can solve the dual optimisation problem", "Text",
 CellChangeTimes->{{3.822995706595687*^9, 
  3.822995714144512*^9}},ExpressionUUID->"ed6a3e03-94c6-463e-8ee5-\
edd2ba5ddf24"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"max", ",", "sol\[Lambda]"}], "}"}], "=", 
  RowBox[{"NMaximize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.5"}], " ", 
        RowBox[{"\[Lambda]", ".", "X", ".", 
         RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
       RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
      RowBox[{"\[Lambda]", "\[GreaterEqual]", "0"}], ",", 
      RowBox[{
       RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
    "\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8232534603865223`*^9, 3.8232535050779066`*^9}, {
  3.82385360394095*^9, 3.8238536102278605`*^9}, {3.8238537308140945`*^9, 
  3.8238537323284383`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"2dc7405a-f135-4529-82e5-c54a16740582"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.611250668063176`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", 
      "5.141651875511748`*^-7"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", 
      "4.728329761466717`*^-10"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", 
      "2.8168875792481384`*^-8"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", 
      "7.611844626770019`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", 
      "5.403584142733451`*^-8"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", 
      "7.6118452236127565`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0.`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.823253511926103*^9, 3.8238536254407787`*^9, 
  3.8238537403645315`*^9, 3.823948878718342*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"2f4510bf-a19b-4940-ba72-e517c3be8368"]
}, Open  ]],

Cell[TextData[{
 "Notice that only a small number of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],ExpressionUUID->
  "12925eaa-8f0b-4839-a8ab-ed03e79204c8"],
 "\[CloseCurlyQuote]s are non-zero; these are the ones corresponding to the \
support vectors."
}], "Text",
 CellChangeTimes->{{3.822995768165753*^9, 
  3.8229957970898952`*^9}},ExpressionUUID->"4a17afa9-4bb3-4bfa-9e7e-\
1967d1f6127a"],

Cell[TextData[{
 "We can next compute the value for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  ExpressionUUID->"5474ab15-868f-48a3-8489-06a2766e72b9"],
 " and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],ExpressionUUID->
  "4980f3de-72db-43d6-b1b1-60a511f23ea9"],
 " actually being an equality (rather than an inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, {
  3.822995801432269*^9, 3.8229958171482553`*^9}, {3.822996118638393*^9, 
  3.8229961193526917`*^9}},ExpressionUUID->"4e33ebd1-1ff3-4600-8d97-\
0b8096964f14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wsol\[Lambda]", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823853540053524*^9, 3.823853554435337*^9}, {
  3.8238536422713737`*^9, 3.8238536500344543`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"d0d0e41d-e8bf-48d3-ba87-b9d3e9fb4bd7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", "1.1177364349637913`"}], ",", 
   RowBox[{"w2", "\[Rule]", "3.7383879975571177`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.823853660298842*^9, 3.823853742983026*^9, 
  3.8239488788569703`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"1926ac02-4337-490a-bb58-135e426ec7cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bsol\[Lambda]", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
       "plusConstraints", "\[LeftDoubleBracket]", "7", 
        "\[RightDoubleBracket]"}], "/.", "wsol\[Lambda]"}], "/.", 
      RowBox[{"GreaterEqual", "\[Rule]", "Equal"}]}], ",", "b"}], "]"}], "[", 
   
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8238536614359074`*^9, 3.8238536738890657`*^9}, {
  3.823853747041804*^9, 3.823853793212621*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"3d9386e4-3958-4c6c-af60-5bad263c8bd8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", 
   RowBox[{"-", "8.049366460692902`"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.823853783768937*^9, 3.823853794807042*^9}, 
   3.823948878907834*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"e41120e7-c1f9-4ac5-b45b-42337fffdbc2"]
}, Open  ]],

Cell["\<\
Check this agrees with what we found when solving the primal version\
\>", "Text",
 CellChangeTimes->{{3.822995837229766*^9, 3.8229958642857313`*^9}, {
  3.822996125451795*^9, 
  3.8229961292871017`*^9}},ExpressionUUID->"35032774-e30d-4dbf-99f5-\
7cc7e51618d1"],

Cell[CellGroupData[{

Cell[BoxData["sol"], "Input",
 CellChangeTimes->{{3.8238538042577653`*^9, 3.823853805229763*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"2dacb5bc-25d5-480e-a23d-0e2725cf975d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", "1.1176497303899737`"}], ",", 
   RowBox[{"w2", "\[Rule]", "3.738096096794236`"}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{"-", "8.048661024444451`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8238538069070787`*^9, 3.823948878954675*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"b2b588da-8d0d-4e97-b2f9-a6ca4810344c"]
}, Open  ]],

Cell["\<\
Knowing the support vectors, we could also go the other way and obtain the \
\[Lambda]\[CloseCurlyQuote]s from the w and b found by solving the primal \
problem\
\>", "Text",
 CellChangeTimes->{{3.822740658820961*^9, 3.8227406684311666`*^9}, {
  3.822980644743555*^9, 3.822980660425441*^9}, {3.822995891711063*^9, 
  3.822995902827364*^9}},ExpressionUUID->"140257a3-8af3-40b2-a63b-\
ffe6b06ec56d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Inverse", "[", 
   RowBox[{"Transpose", "[", 
    RowBox[{"X", "\[LeftDoubleBracket]", 
     RowBox[{"{", 
      RowBox[{"7", ",", "10"}], "}"}], "\[RightDoubleBracket]"}], "]"}], 
   "]"}], ".", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2"}], "}"}], "/.", "sol"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.8238538350678253`*^9, 3.8238538687982264`*^9}, {
  3.8239488955865383`*^9, 3.8239489134881697`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"778789de-047c-4c37-8291-dc27437672a8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.611251675460538`", ",", "7.611251675809735`"}], "}"}]], "Output",\

 CellChangeTimes->{3.823948913917506*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"d436dfeb-28fc-45c0-82d0-089f6759cd95"]
}, Open  ]],

Cell["Again, this is consistent with solving the dual problem.", "Text",
 CellChangeTimes->{{3.822995886411324*^9, 
  3.822995911872384*^9}},ExpressionUUID->"1e40ec72-719c-4d47-a1eb-\
5c57eb1e9b24"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernel Trick", "Section",
 CellChangeTimes->{{3.8229808671994123`*^9, 
  3.8229808688641043`*^9}},ExpressionUUID->"b5bf50b5-4b7d-404b-ba9e-\
547513b6c38b"],

Cell["\<\
We next look at an example where the data is not linearly separable and we \
will have to apply the kernel trick. First we generate two datasets, one \
surrounding another. We do this by defining the data in polar coordinates:\
\>", "Text",
 CellChangeTimes->{{3.822980871595449*^9, 3.822980935565127*^9}, {
  3.8229995372104597`*^9, 
  3.822999537366713*^9}},ExpressionUUID->"4864c7c6-789f-4875-aaa1-\
93856e1c6573"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.823948924135048*^9, 3.8239489271516447`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"e06cd2fb-dc51-4b1a-b0dc-25fd3a1c1018"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"r1", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"UniformDistribution", "[", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Theta]1", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", "10"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.823948929231079*^9, 3.823948961153912*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"a2121479-0c02-4a78-a8b6-15ce7fadb418"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"r2", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"2", ",", "0.1"}], "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Theta]2", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", "10"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8239489633838015`*^9, 3.82394896656701*^9}, {
  3.823968411817585*^9, 3.8239684448707104`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"badc6d73-125e-4035-ab8c-96e04cebe612"],

Cell["And then transforming to Cartesian coordinates:", "Text",
 CellChangeTimes->{{3.822980938680564*^9, 3.822980946531595*^9}, {
  3.822997773906652*^9, 
  3.822997775129292*^9}},ExpressionUUID->"d9346f6a-07ba-4745-9a38-\
bdcf7b6b95e4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x1", ",", "y1"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"r1", " ", 
      RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], ",", 
     RowBox[{"r1", " ", 
      RowBox[{"Sin", "[", "\[Theta]1", "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x2", ",", "y2"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"r2", " ", 
      RowBox[{"Cos", "[", "\[Theta]2", "]"}]}], ",", 
     RowBox[{"r2", " ", 
      RowBox[{"Sin", "[", "\[Theta]2", "]"}]}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8239684497524033`*^9, 3.823968494264637*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"547a28d1-27e5-4a4a-bf97-69792b503365"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nonsepdata", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Plus\>\"", "\[Rule]", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"x1", ",", "y1"}], "}"}], "]"}]}], ",", 
     RowBox[{"\"\<Minus\>\"", "\[Rule]", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"x2", ",", "y2"}], "}"}], "]"}]}]}], "|>"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.823968498663859*^9, 3.8239685307259045`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"84412164-1060-48e5-9068-a97aa8403b2e"],

Cell["We now have a non-linearly separable dataset:", "Text",
 CellChangeTimes->{{3.822996257502099*^9, 
  3.8229962710465612`*^9}},ExpressionUUID->"aa20f92e-3f62-4012-a4b0-\
70f91dd6e8a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.82396853672025*^9, 3.8239685599527464`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"1cbb6b96-ffe3-4f5c-8088-c8dbf38d9699"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[{{-0.19418006351395, -0.7939897238477599}, {
         0.0009402659049429163, 0.11141564362630568`}, {
         0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918226`, 
         0.034500797441814446`}, {-0.02990472311744523, 
         0.05854307847237184}, {-0.4835702248162677, 0.24533902079622935`}, {
         0.20390719257284282`, 0.10887728322031986`}, {
         0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[{{2.041251388907825, -0.35539451182767}, {-0.729497294004517,
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
         0.7549130603093654, -1.6895760872115724`}, {-0.5094375357680065, 
         1.9943197246955076`}, {-1.8706064275341703`, -0.14104829949370085`}, \
{1.4543618707479875`, -1.18363578035018}, {
         1.853565067751745, -0.4895674667312021}, {
         1.9874646392084663`, -0.5256987415568544}, {0.29568064965204355`, 
         2.0791324971956673`}}]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.823968560557732*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"7eb0e206-b75e-4b3e-bf4d-6edd6b66f413"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explicit polar coordinate map", "Subsection",
 CellChangeTimes->{{3.822996391599948*^9, 
  3.8229964015899343`*^9}},ExpressionUUID->"125c3fb4-950d-4960-89f3-\
f59c80d6202d"],

Cell[TextData[{
 "We first look at the case where we have a good idea for an explicit map ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Phi]", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"(", 
     RowBox[{"r", ",", "\[Theta]"}], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "04cf3e5e-02d0-4c54-a598-5cf334149aa0"],
 " that will transform the data into a nice form. Define the map and apply it \
to our data:"
}], "Text",
 CellChangeTimes->{{3.822996407687862*^9, 3.822996467099221*^9}, {
  3.822996546639573*^9, 
  3.822996558875002*^9}},ExpressionUUID->"94ddb11d-5747-4a93-a5ab-\
a11e3e07c2c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"\[Phi]polar", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     SqrtBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}]], ",", 
     RowBox[{"ArcTan", "[", 
      RowBox[{"x", ",", "y"}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239688299840527`*^9, 3.8239688653146615`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"763e08df-f285-4c62-89d8-c6acb5c2139e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sepdata", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"\[Phi]polar", ",", "nonsepdata", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8239688679094806`*^9, 3.823968881154733*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"d822a952-0710-4709-8fd4-097be9c7a839"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Plus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.8173894901710712`", ",", 
        RowBox[{"-", "1.8106507743179687`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.11141961113123644`", ",", "1.5623572642627543`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.7895259946338514`", ",", 
        RowBox[{"-", "0.4847436665256791`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.18780314670602638`", ",", 
        RowBox[{"-", "1.586537082861427`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.24136096745765043`", ",", "2.998158602370644`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.06573875950878105`", ",", "2.043059003833555`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.5422466205096242`", ",", "2.6720828955548726`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.23115450673602744`", ",", "0.4904412673460606`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.3960060815485871`", ",", 
        RowBox[{"-", "1.301437826423534`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.7004737819422449`", ",", 
        RowBox[{"-", "1.8343692602173052`"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Minus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2.071958612461975`", ",", 
        RowBox[{"-", "0.1723782891727108`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.075499316991622`", ",", "1.9299482374851298`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.9636369806416225`", ",", 
        RowBox[{"-", "3.067228247631557`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.85055696564651`", ",", 
        RowBox[{"-", "1.1506015446429476`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.0583580269620114`", ",", "1.8208924036580747`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1.8759165838390086`", ",", 
        RowBox[{"-", "3.066332623351288`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.8751432242926847`", ",", 
        RowBox[{"-", "0.6831305889201751`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.9171279990838217`", ",", 
        RowBox[{"-", "0.2582252416616537`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.0558148892783366`", ",", 
        RowBox[{"-", "0.25858522674350404`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.1000521392274396`", ",", "1.4295301271134075`"}], "}"}]}], 
     "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8239688820507035`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"a8169a44-7b22-4136-b884-4011b216ce47"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "sepdata", "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Keys", "[", "sepdata", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823968884064346*^9, 3.8239689029796667`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"ad9588e6-c95c-4944-b956-b489c2f5efe8"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
         0.11141961113123644`, 1.5623572642627543`}, {
         0.7895259946338514, -0.4847436665256791}, {
         0.18780314670602638`, -1.586537082861427}, {0.24136096745765043`, 
         2.998158602370644}, {0.06573875950878105, 2.043059003833555}, {
         0.5422466205096242, 2.6720828955548726`}, {0.23115450673602744`, 
         0.4904412673460606}, {0.3960060815485871, -1.301437826423534}, {
         0.7004737819422449, -1.8343692602173052`}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[{{2.071958612461975, -0.1723782891727108}, {
         2.075499316991622, 1.9299482374851298`}, {
         1.9636369806416225`, -3.067228247631557}, {
         1.85055696564651, -1.1506015446429476`}, {2.0583580269620114`, 
         1.8208924036580747`}, {1.8759165838390086`, -3.066332623351288}, {
         1.8751432242926847`, -0.6831305889201751}, {
         1.9171279990838217`, -0.2582252416616537}, {
         2.0558148892783366`, -0.25858522674350404`}, {2.1000521392274396`, 
         1.4295301271134075`}}]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 2.1000521392274396`}, {-3.067228247631557, 
       2.998158602370644}}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8239689035641336`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"a8709bf4-b650-4a5b-b0d9-c7864532d826"]
}, Open  ]],

Cell["Now we build up our X matrix with the transformed samples", "Text",
 CellChangeTimes->{{3.822996489429439*^9, 
  3.822996502165043*^9}},ExpressionUUID->"ef691abc-d69d-4fbc-ac0d-\
ff6784b6e37b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"sepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"sepdata", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.823969083948219*^9, 3.823969097633596*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"90f16516-6c5b-429a-b58e-9f33da7bddb7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239690989131374`*^9, 3.823969132881799*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"543907f6-92f6-4ea8-b831-c17d404cd603"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "X", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823969133870134*^9, 3.823969144338728*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"5c2402a5-f207-4f59-a6d1-0a8f799a8e1e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.823969145655232*^9, 3.8239691615190697`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"50e24add-7163-41bb-96cd-72467901ef05"],

Cell["Now we can solve the dual optimisation problem", "Text",
 CellChangeTimes->{{3.822995706595687*^9, 
  3.822995714144512*^9}},ExpressionUUID->"0dd756a2-321a-4c55-8b9e-\
139c2354cdd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"max", ",", "sol\[Lambda]"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", "0.5"}], " ", 
         RowBox[{"\[Lambda]", ".", "X", ".", 
          RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
        RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
       RowBox[{"\[Lambda]", "\[GreaterEqual]", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239691764418783`*^9, 3.823969224011388*^9}, 
   3.8239692597012067`*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"7bf3ef13-de10-4ffc-8a63-089664afe0e3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol\[Lambda]", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.8239692258246703`*^9, 3.8239692351175194`*^9}, {
  3.8239692653253064`*^9, 3.8239692662049537`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"7e408c98-5367-4fb6-b072-1f516406bef6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", "1.8427241567904131`"}],
    ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", 
    "1.2209646559440017`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", 
    "0.6217595008464114`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.823969236492173*^9, 3.823969270737387*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"9a7b9f90-c09a-4de2-8c50-2ea3ed389839"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"supportVectors", "=", 
  RowBox[{"Pick", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
      RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}]}], "]"}], ",", 
    RowBox[{"Positive", "[", 
     RowBox[{"Chop", "[", 
      RowBox[{
       RowBox[{"\[Lambda]", "/.", "sol\[Lambda]"}], ",", 
       SuperscriptBox["10", 
        RowBox[{"-", "3"}]]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8239692802100487`*^9, 3.8239693256396604`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"becb038c-4b45-488c-8ee5-50d5663ccc68"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.19418006351395`"}], ",", 
     RowBox[{"-", "0.7939897238477599`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7549130603093654`", ",", 
     RowBox[{"-", "1.6895760872115724`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.8706064275341703`"}], ",", 
     RowBox[{"-", "0.14104829949370085`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8239693261761956`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"309016de-5697-42f1-a36d-00076a6f9af9"]
}, Open  ]],

Cell[TextData[{
 "We can then compute the values for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9dde94c7-61f6-4e06-94ba-86ec428e1275"],
 ", and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "85fe3e40-252e-4acc-9861-457943632d96"],
 " actually being an equality (rather than inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, 
   3.82299708516726*^9},ExpressionUUID->"fa2fed76-7ef8-45bb-88bf-\
f7dad0734bb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wsol\[Lambda]", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8239693362518406`*^9, 3.823969369438051*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"31afaea5-291e-4cb0-ab86-8dccf93ee11a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", 
    RowBox[{"-", "1.919610248617781`"}]}], ",", 
   RowBox[{"w2", "\[Rule]", 
    RowBox[{"-", "0.025164660939410055`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8239693704623394`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"51153414-78d4-42a0-98fe-b6361ac4be3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bsol\[Lambda]", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", 
         RowBox[{
         "X", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "+", 
        "b"}], "\[Equal]", "1"}], "/.", "wsol\[Lambda]"}], ",", "b"}], "]"}], 
   "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8239693715382137`*^9, 3.823969405232438*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"850bbe21-4092-4a47-9c3f-8b1cefa41f39"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", "2.5235048296294593`"}], "}"}]], "Output",
 CellChangeTimes->{3.8239694059046264`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"4f9deb9a-b199-4f86-bbb7-d333c7d22fd1"]
}, Open  ]],

Cell["Now we draw our decision line and margins on the r-\[Theta] plot", \
"Text",
 CellChangeTimes->{{3.822997092894528*^9, 
  3.822997107733405*^9}},ExpressionUUID->"3cdd876a-61f0-4c1e-a3e6-\
e20a8bdb5b3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decision\[Theta]", "=", 
  RowBox[{"\[Theta]", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "+", "b"}], "\[Equal]", 
        "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]", ",", "bsol\[Lambda]"}], "]"}]}], ",", 
      "\[Theta]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.823969414705161*^9, 3.8239694264326115`*^9}, {
  3.823969629951053*^9, 3.8239696741350436`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"8654090d-6d23-40f7-8af2-dceab3b01e59"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "39.73826638903419`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2.5235048296294593`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "+", 
    RowBox[{"1.919610248617781`", " ", "r"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8239696780317636`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"c8e77558-260f-439a-9c32-7cb58f12b01a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "sepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "sepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{"\[Phi]polar", ",", "supportVectors"}], "]"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decision\[Theta]", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"r", ",", "0", ",", "2.5"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823969699435609*^9, 3.823969771721592*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"c4ecf976-33f4-4562-97fd-a45f7c868593"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
          0.11141961113123644`, 1.5623572642627543`}, {
          0.7895259946338514, -0.4847436665256791}, {
          0.18780314670602638`, -1.586537082861427}, {0.24136096745765043`, 
          2.998158602370644}, {0.06573875950878105, 2.043059003833555}, {
          0.5422466205096242, 2.6720828955548726`}, {0.23115450673602744`, 
          0.4904412673460606}, {0.3960060815485871, -1.301437826423534}, {
          0.7004737819422449, -1.8343692602173052`}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{2.071958612461975, -0.1723782891727108}, {
          2.075499316991622, 1.9299482374851298`}, {
          1.9636369806416225`, -3.067228247631557}, {
          1.85055696564651, -1.1506015446429476`}, {2.0583580269620114`, 
          1.8208924036580747`}, {1.8759165838390086`, -3.066332623351288}, {
          1.8751432242926847`, -0.6831305889201751}, {
          1.9171279990838217`, -0.2582252416616537}, {
          2.0558148892783366`, -0.25858522674350404`}, {2.1000521392274396`, 
          1.4295301271134075`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
          1.85055696564651, -1.1506015446429476`}, {
          1.8759165838390086`, -3.066332623351288}}]}}}, {{}, {}}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVxX0803kcAPDNTyXWA/fq7tRlk6dao7hW6ZrvJ8vztvO0CrGfycMuEWd3
JXVxK+miVVI4LaQuHYv0IBdfFMlDD4666GijBw9drMUQd/fH+/U2F8f6hutR
KBT+f/4/74B4tv2OnU5PVaWtfBcB3G1n8LYyPNBwX7bTY44AZhqqf2YwAhDx
Wqb0XyuAPJxOn8WQILvBwBNBNgKI5kh3jdH3IplmtlAyVwDtk1GZ7+lpyF5f
1C1r5cOcLpXNMD0bHbVaMFgl5EP+A0XcIP0y4kTFGjAjeFCqTOuKtruNPHY7
Nt0K8YRI9Dh7KL4ejcfzbl7b6w4x/SvUFaVNiOd+ysXhnCsYmstsetY/Qq7n
1QFhOZshY2EzM59sR32jSbmUSmcQd/nXEC2daMV9epi3EiDunkwca/McWfUO
nXYL4UDZbprflx4vkJMVCzcUOEL+vp0Dq7f2osLYAx+Ls9iQopjy+TD0EvGV
4tTIh/ZAae+FPxLVKGV5cNmWtSywTojY48/sRwafFkf/xrKEPu2ZLUZ3XiH2
Ht1NYYApePZ/t/9k3Btk+4WJ/IWtHgj65CvNzAZQ5SqL7Oj9kzUD9eKD90sG
kW+bbzG3bhG2M+5cyhUNo9pgg5lmzTJsiLSh3Zp3qElS//29JCZ2Gw4cWyZ8
j3LZrKhEP3v8rG4HNZA1gmjGCzqPCtn4+pG7IQztCHIYE72tM3HEEbOkvW1t
o8joWd770wwODovfd52Wo0EPX14Q3E8AvCpyZRsv9APS6jfq133rjB+asIyk
jlokLepZM9dvM64qTcllER+Rt5dyXd/Xrngflend8uIjksVIK2gcd2zYnege
UzGGFtXMOVG20RP3XzTPVCSNI+oiHxgw5eHM5ab6lUIdcn8jl+ymC7A8J6Ix
lDGBfuytd3CheuPAzOA22usJ9ENYEbnwnTce31ykU1RPInOrFC+9f3ywut95
T13qFEqS3KZX/+2LCzj2S1pDPyHZ0PDV8yo/XHJIahxpO402jCat5Hf441Rh
mBehnUaK+aMd6+qFmN2dfzm1dQYpJWKOx70t+OyK3JJWLwrEutllWN7Yin/C
6We9KinwPEyba121DfOXCIseWFJBk1XwV0RVAN4U0xhknEaFSt4VSlxxIFZ8
JbZs0VKBtUnZl18ShC3rL2UJgvTA59b88l8V27Hcto75pFoPGK7+yo5jwThC
o/+4iUlAnslpCTsjBIvLRhlpxwloCrWfJzogwtEpflOeJwhg5xvsOp4iwlK/
iqe0UwQoentaag6L8BGtNEOeRUC8KOMY47gIlzrqJs/kEbA4eNBIpRBhXe1M
58UrBERvKzIMrxVh+RNa+t1GAlIv0WRsPRLnFO6KOtxEAMdt/Bpfn8SFCW1c
92YCRl+p1eGzSXzjc/lEcxsB262ruFmGJO4O/CyqvYMA+yIJMWZCYhu1KVel
JuBZQUPKLQsSr65INLvQT0C6c3n5IysSbzjUpQt/TQBXlad6Y0Nink3e1bcD
BPxuLnU2ZZE4fifDbGSEgOTzFnqJa0ictDFZV64hYB0scDi5lsSH5qn+TNAS
MNgzEVq8nsRnlYW/jI8TIKQ/qX2+kcQFB/Ujb08QYFRzZ2TUicRXfMKdk6YI
wCGXzY02kbhiWcNSp2kCEqYzfSy4JK7WWOtmZghgnjuY/I0Lif8FWV9M/g==

           "]]}, Annotation[#, "Charting`Private`Tag$67299#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwV0fk/1HkcwPEZH93SOrJbYkaPtkEoD4tS+byRne8QJVfIMeMst9iHsxAx
j42dlkeJxerQo4vsY3THh0jOcraFijHK1SMxzDiabX94PZ5/wEuHF3kkUIFG
ozl873+LT/FWGgeEWmYPaZjmpXKhoZt50J3JwcqXnVSEp7ggf15zhsn0wHm8
c1M9yVwoJjmMFczjuEREL9dI4ELY/rjweUYCFoonNQqjudC9GJL/hcHH78fq
pX/zuLCqf5g1xbiETb9GPKk4wIWyltLoCcYNPKzQZNOymgsVlfz+MKNHWJwh
m5k66wfBuPPSZMwzfN72VOXt9X4QIdYTCSuacauEUV5g6AtrdTJY73e/ws06
1K6qHT6Q+0OrfplfN/6xVb1TbuENvH6XWtTWhx+ajgpZZscgujGDF8l6iyv5
nSEqZl5QFaXk/BNnEM96ck2M2Z5QlhQ6vsv9A86dkoD+AQ9IL11ymp0cwvHL
RoEeR44CrfsDPEkU4eq5NA+7QHfYHhsU76IvxuyqNwL1ADcYkVx0W/d0FOuO
9b5Tj3UFO/GJlD+jP2Gf4b7Iz5Eu4Dgi2KGtPY5HG6Zf8aOcYfwZL/XFnQlM
tlVRXulHwEilT8vGdwpP2cahlalOsBZLuAMzn3HYyGDPaO5hYE95zm91/YKT
sy90Wakdgn/rA+ieBtO4YfO1oj2qDlCd3eDDlEzjqutL54tN7CFoRdyHjo6v
2Pa+t7LQgAP+MUnVSoUzOKlu1QMzig07g3d0HOTOYtcSMX1/uC28VDVYF7dH
gnuX2zolx23gcUV6kQGawwvuyx2b+VaQRNc/3DY4h88dj7g6IreEtQOJVIRw
Hp94wZkopO0FcblOfmmyFOdtuX9O71dzyNfdpPjQVYbRb+YWWntNQFAY1MRl
LuBYfl5G15gReOZ7dyh9XMDx0VkbE86wQHrgmqy0ZhFbvrBO6Z7XBpHYOr4+
awkzV6ScNJBugMv7jTXbucv4eWKoz72Mu7V3MuNUgg2/4RLVHsXqN8oky9Xf
Hkm+4UsvH+tl2msT04GyG1ntcuxI/F45mLFIgV7RnXZ7GjhW1LrpPjUip0lO
gf1DGvRSyby/YkyIg6brtZZtdNi90dij+KQ5sYpo8lLh0+HQpLOkcedeUrqF
t61NQgfNGv9M/r7v255dv+DopQDu7VHeFulWRGBYr99VowDznxbdbx+zIUEz
ip3N+gi+pKW0hfraEl7VVyb/DwQc5j21WswmYenOS3bnEeiUBnQzKDaJcxa+
VspDMKullpd6mE2yJXG5ggsICjWjVK25bFKxR7Z4sRjBhIa+SmM6m8jq5H3l
txDkrC9Rbm1kE0GXUk5DE4Kuhcw1r+0pUnglPORsM4KbCb80m7tQ5Epshw3V
iiBFOpxdcIwi9zQEC60dCHTn8GrPcIoMeKqFdPciSJiWrRzMpQhLtMlmWIRA
41O4oqiTIruEidpXxQjGgrY02LyliEVmvyzwI4I6ccuZq8MUOcgqvjs2jiBY
xEJBMxSJCWVqT08jePBuiD6mziHJ+9Jk/8wgEHgL6jhaHJK5frgnVoLAf8Ay
7ebPHFJQeeV3qRTBmrdFtDAzDrmcqhj8aAHB0FE70mbJIbecAq2TlxAIX0tP
G7I5RLj1uZblNwRZbtdx7iEOqZnZLpPLEfj2uso/u3PIf4gVUDA=
           "]]}, 
         Annotation[#, "Charting`Private`Tag$67299#2"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVz3881HccwHF8pQ1b0UMPknMUJxGaSZTPm0vkUHL3dX5tnPwqNOWakLCQ
Gm668vPcwxkmkbarppo+hYSjorRHZPIzv3rQuTiMtT9ej+ffLwPOyaOhSgoK
Ch6f+19BMkfF6tgJB4eitN/GNHyhuYfq7kM9hNx0F4NMvvaFtSeNP1GpvohZ
Eq1zXNUXBDhbfx01Eh0vZV+aUfKFqP3c6AX9s+iqaFfUvJQNPcsR/Fn9LDR1
/Y2FUi8b1vcN0Wb0C1HB/d139YrYUNYujJ3Sr0Zz/UMtTEM21N3M6ovadQ8t
DLoYl1B8IBy9KJw+1YQOc7wEOmYkxIzuGBbXtSG5JG6E7cACVYMLtH9sn6NP
iyUxsfuYkLOxw7QsqAcdEEVuwAxv4PQxHxKSXjSubi8dP3gUYlsucE7S3qD+
IOOqFwe94NYP6t7ah94iw913Yud8jkBZ4olJS59B9GPW1dWX1Z6QJlzxmp9+
hxjV612+eeIOCj2D8CBhGLUU11poTbuBcVxYPNN0FI1vDCytnnCFEVk+qfbX
GLqRwrK7/qULuI0eP5cX+x5pn/YJCFR0Bs8R3k4KZRLRbLMpfCU6TDZxUp7W
TqG+BbWv9xg7wi6NXj369zMoMs5kvQ7dAVSRLLhf+gGFfWh3L0m2A5cZvwVD
1iy6GZ1SeiHSBv5+fEzRz2wOOeQJLOPCd8Pti83fUWVzyIpdaBfPNIewddzB
rq6P6Pw1PbNuWyMIOZV4W71IiuqTL1c0eOiCRfjOLvfgebTcPv/+9dQX8EzT
TI27V4Y055mcKMOZh/fr0orNiE/Ip7NVZFSjiRMVTY9I3n5CSaeTmq0TDLBq
f4JrjHgB4dstNk/jd+DRSgO+MGkR3c2QnX11xhLzTXSUG1hy5GLOlbxLtca8
orDWYOoS4g1wmrVcbbEfP7BLfXwJ5Uy+T3RatseLByrkwsZlZD/nT1NdQ3h4
1Cn+ceYK8k6lPFgZcMSi/Va6ncH/Ik5m+sCjMTquTedqhJuvomd55T1bJM44
kxXCIGSrqKAj22S2ygV/219Wndm5hv5MjVnQvHEIF+woru1kKIDtfpXCtmwG
Po+zCxgNCrDhDF/cme+BPXRZFe3bFcGx/4OFZ8Fh7BjT6q+RpQhj2xSQ1f0j
WLiVs10iUwRfbeVtnEYvvL2p6pqnvxIk54bMBtQfxTzzx6bdjUrgqVc9c1Xg
jcOkyi/aTAlon5iokpUyMefWR2pWLgELthkM/VwWjkrzXnH7hYCQ+MCaw1dY
mOstfq1+hQDJXWu1lHwWvijj5vCuESC0GW4fFLJw3V75cr6AAFdrcBPVs7D8
0VpvZQ0BhRZLrkbdLMzrVs9ubiXA3jjm4E4tEheVR0dktBFQFepc6a9D4vK4
LrprBwEaFVtVftYj8Z3NvKWOLuLzX0fLtBGJ+/02RfS8IiDXwMS5zobEtGEd
+tAwAQNbh+hWbBJbihMov44S4BLQUB4cQGK79D556DgBfxTziLwgErvTBPUT
kwRkbEFNHyNIfOoElTI3R4CFdomT+CyJk/alyn+XElDsc1o0co7E6V8NvYyT
EaCc76aklUbigpvllxcXCXitJX/EvURiUYpy+L0lAuis5waVOSSu8Qp1Sloh
oJZfldqbR2Kx4RM9h1UCNr9MfqeST+JGqbF8bY2AtE2k455iEv8HZohNMg==

           "]]}, Annotation[#, "Charting`Private`Tag$67299#3"]& ]}}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 2.1000521392274396`}, {-3.067228247631557, 
       2.998158602370644}}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8239697728435793`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"daf1ba9c-d5dd-4676-bd31-dd12286180b9"]
}, Open  ]],

Cell["We can also draw them on the original plot", "Text",
 CellChangeTimes->{{3.82299711180614*^9, 
  3.8229971191969137`*^9}},ExpressionUUID->"2c5cf1ec-d97d-4d2c-bc13-\
067fa2c68da3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decisionr", "=", 
  RowBox[{"r", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "+", "b"}], "\[Equal]", 
        "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]", ",", "bsol\[Lambda]"}], "]"}]}], ",", "r"}], 
     "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.823969794901718*^9, 3.82396983853516*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"d43ca367-44e3-4a41-bc86-cf5b34eddbc7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.5209390816287066`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2.5235048296294593`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "+", 
    RowBox[{"0.025164660939410055`", " ", "\[Theta]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.823969839705059*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"ff1fc78e-123e-45a8-83e3-ae2cc8c4e60a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"PolarPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decisionr", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", 
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8239699673093953`*^9, 3.8239700645843143`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"469601f5-b9ca-4ca6-9d7d-db120544eb11"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.0009402659049429163, 0.11141564362630568`}, {
          0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918226`, 
          0.034500797441814446`}, {-0.02990472311744523, 
          0.05854307847237184}, {-0.4835702248162677, 0.24533902079622935`}, {
          0.20390719257284282`, 0.10887728322031986`}, {
          0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{
          2.041251388907825, -0.35539451182767}, {-0.729497294004517, 
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
          0.7549130603093654, -1.6895760872115724`}, {-0.5094375357680065, 
          1.9943197246955076`}, {-1.8706064275341703`, \
-0.14104829949370085`}, {1.4543618707479875`, -1.18363578035018}, {
          1.853565067751745, -0.4895674667312021}, {
          1.9874646392084663`, -0.5256987415568544}, {0.29568064965204355`, 
          2.0791324971956673`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.7549130603093654, -1.6895760872115724`}, {-1.8706064275341703`, \
-0.14104829949370085`}}]}}}, {{}, {}}}, {{{{}, {}}, {}, {{{}, {}, 
         TagBox[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1: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
hJOqVKy9/MJP/w88JOY1
            "]]}, 
          Annotation[#, "Charting`Private`Tag$68441#1"]& ], 
         TagBox[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1:eJwV13dcTm8bAPA0FAnJKJJSSJMi6ocrkUKSiITQUka0FA0jSYWmtGhoD7Q1
r4aWdimVtvbePeOces/71/P5fs45zxn3dV9DxOChtjErCwvLEzYWlv//pnwU
jljJuYQvXOvqvnh+z4077eY4tHIJHbNfuB0Le4DPzp9YXUy5PJalSjjMEdck
GKn7U6Yp2jmyHH6N13ZxHDagrNt3Z1tn6DtM0jzWuptyo8F/WY3OPnjTSVKq
j2MJ0xXi9ZIO+eNUw/C+IMq6jte57UcDcXx/wKA6ZdOilL7/Qj/hkNoVrSn2
JUzbteq5bVwYWrw5fc+Lske0Zc5p5whkk/E9vJeyhte5/RtvRCKrkt6PbLYl
jFG+ZN6sEI2x1qUjJyl7dZ9Y9lwfi3P3V9SVsS5h3vP2R8ojcSif5pOauWIJ
O+X59776lIRRrKopYpRtR8+4bbb9hlE8TkbuLEt4ecOXJc3Y73i1+3wfLJMo
rDm+t+RFCsb81U7xXCJRx3OduK15KgYyvh9oIUk0tSis2HktDZmeJlcuEiQK
3PLjNTmQgcL3FWguTBKjPgedJIUzUfaQtmYyg8RJknHgHc8PbBy02DZDI9Fy
IuGO/0AWXtvaqCw4T6Ko79NfagF56HrX1nfjHInn1k1++vwqH131Pn/imCVR
d3W+wdgjxJfbklvrp0g0vH9uPD2yAC3O0egbxkj8zzdwO8OhCOUMUnnrR0jc
4hYtvjRThPbbA/+5DpOYuCetlDAtRovdepldAyRurtt8evjSTyRqNfYe7iGx
mTh00kGqFDlXjgrmdpHYsOD480JEKdqtq64+3EniCvknM8L8ZViWv9pM8C+J
Hz6v6k9gK0fBkz7eb3+TyFp0js2irQKxo4yXt5TEtqumwqGvq7Fi0pt1sZjE
3o69D3s4anD7xQSr34XUcZVs+a0uNci99LzVJo/EC++X3po716LGSbky7TQS
i8e6T9RiHWZLW9bYhJEYcYB3lsxuQOtgs62/P5Eo0z2ifobRgHlsn2b2BpMo
/rgp00uxEflecZ7N/UDiOqnIAO4fjajrEJZq707ioYTl+5lpv6n3tdhrYkmi
EF/Rpz+Jzdhj5Rh+9CGJ1+ZGefNGmzFedlvamvskevOIPguW+INBTxYSvY1J
jIxbJlRi/+DZHZtWHdKl/k+y3UvpSwua+qzTnvqPxIw9dVa5H9tw1L6nXYwk
8MDTj3bvn3bi+fw9Sop0AtmPRcxcTuvE97dDjE7NE1i5Zub6lolOPOGvsOvs
OIHNpkvlz2534aaLwZZL7QQ+CCjPWBDtxj9uRrI8OQReG2NJ/biqB0cndvE3
WhCYIbjrP5v6XiyVFAW2BwSulkpN+DXei4d7uq5ImRIYws+2f9vqfxjBGmZo
pk/g+OnqG0kq/3DH7j+cnmeo+3v42X9I/YfxH7Kj3EQIPCzzJtbcrw/drp6N
Uf3FxMHKLr6N2gN44fiCXOpPJlrGeP2QfzCA6WuNhbciE1el36s+92YALT8J
7v6dysQDGZXSFvkDaPpOlp0ewkT3i983WksM4kLJ6GlOcyauj/T9a7RiCMff
TqsqczMxmz78qSR+GC/t/9DSzs7EkL/NXbtLhpFOmBKWSwzMuLyq9EXXMH6X
XSA9phlY7rbHRGzjCE5FaG2y+MPAP3cJVUHHEUx9qb3MFcHAGrvetfXnRvGT
mpmBvRwDOb4pWIqOjOGR8YYDyRIM3DZVvNzMMY5k6ee0rp0MVFRtEH8pMo5F
RmYlu/kYyC7hIIO643imx+fejVk6pnxslG0sHcfdUXtrzVPoKMUmcuF6+ARq
z65wkZOk4w0Bt3+de6bwp/qsx8uddCzwvsWQODiFmoyXbysF6Lgo42psqTKF
UzfdX6lz0ZGDfXTv7PUpjNRd8XGij4abBJ6w5XpP4VzFwZfjITQs/OpeeIcx
hT33lXPLOWk4p3N3mqd8GuOWyJPdS4vIqag62tc4jT7brWjT84t4L7LOPLNr
Gk3GbIbY+hbxqbs95/nFaZzU/SXZi4t458u0jPruGRTZ9f0/98eLyKX4oeWm
8wxm2AfGBXQtYEZ6dN96pVls2ttHozct4Pzd04EXVWfxu8P2PJ2qBWzs6nL0
1ppFk7ilJOLHAtrtWa5cMplFm1uHbbh8FnBlyJhsqO8s7hBtzBE4sYBe2xOy
5kZnsTBc4sWB8HnsEPST6Q6YQ4kinotr/OexcKjW7k7kHB524mbpdJ/H7zfW
/Rj6NodVNQ9p5tbzKCzzkqu1dA6Dbcfy1dTmUfQc/cOjuTn8azz45s/oHArv
2OpppzmP46qLwa775vDGksePJnIeJ9uzToeLzaFu9WrzD1wLuFgbeiydfw4/
H1FL1eRbQH3zUu4qljmMGansThJfwOrABx/S62bRsljOSujiAuZmdz21fziL
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
P+8USfh25H95gIEF
            "]]}, 
          Annotation[#, "Charting`Private`Tag$68441#2"]& ], 
         TagBox[{
           Hue[0.1421359549995791, 0.6, 0.6], 
           Directive[
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1:eJwV13c8Vf8bAHBFyEgJDQn5UkYhpcnTICMaSEYpEiU7SUSiRCVKZjKy94jI
euyRSPbK3vOOc6Okfuf3l9f75d5z7jmfZ4qa2encXMvExOTOzMT0/79nShSs
TuUwcJO0mHX4fFKJnMBJDXHSi30y9b8tbmJK+9TQWtImod0cAxb38PexE/J9
2Qwc5G5N5+H2xBM9V49mknY6SzOKtniKFl6Gf9xI00SfV+4of47C+lr3VUh/
3S17toorELuKL6SxkR6tfF9t8/kNZt7wCqvJYqC+0YoEt0Uw2pz5q+xB+mju
p8YY3jB8kDASJU9abM1prj0YgTR18xe+mQycPG14g40rBsdcVbbKkH490/BA
0SwWd7BsvvYlg4HfNEQ3mRR+wB18PIJL6Qxs9426F2yegDGNfoFPSf9naRAZ
X5SINcf8yzeQDhcTXUrdmIwslZ0XNqUx0J8i8eddSSo+1HTKeZ7KQAM3HiYf
3nQ8aK/R9DeFgdprTGZv3spAx8DLh7qSyed928bPzJGNykq0p8dID8UrzI/k
ZWPV7LPAiCQG9p7m4i29loPH6+/1qicyUISFKepafi66el1Vs4hjoHmW2gHD
6/mYrdHgFvOBgZpin+ZYOT9hxlnCpiOWgY7WnokZ+Z8w9pbXS9kYBr4zP+Ey
zlGINXbRn+MjGWi4P4Dzd14R6nnvGM17x8DsPYuqd64V43S37VeMYODZAD7F
9vUlWP/q02BNGAOxaOOblyalmGi3cVPQWwbGlDIZNjCXY9KC9ckHQQyM/NDl
N2BQjldMWA8YvWHgG83NlIWMciwQPG7KFcjAves2c6wxqEDOuA3j8i/I84j/
JT+VVomfbA2GH3syMK3LRCVbpwavXPG+wfBgYKPkz9yAzBrk3Pukysyd/P0D
wr8tOWrxPfcWYWlXBspqGaWsrazFnPYLuo53GfhRHzJ/yNWj9pSaTJ85A/U0
fOw3czdiX/CppjkzBn76Q/nP6VYjXuPacWn5Onmecs08X6sa8azfjODqFQYG
pOaJmLp+RadH30NL9RiYuCtWX2iyCUMc9H9sP81A57T16TeutWBSdOnRxhMM
zA89+6HuJengBr97ygxkPyhoLlHUgsujpf8KjpD3W5Ml0M73HTl+/L5GyDLw
yDB/80LDdwxw9Io6K8jAn1J9ygIKbZhU/LHtwTyBq25T2m1MnRh0lsYbNUPg
7gjrZC+pTuTwKREtnSTwdqI2n4xeJ+ZvZM+ZHSZwr17LT+ukTtTadiGdo5PA
SZnOmgTtLuz67FF/oZRARwk5v5mwbnx3RMWB2ZfAM9dsp1yk+rCCafSQ9xMC
X9uDr75uHwZ2C02vehKIigyqzMM+1K3fyTP2gMCG02G/q5r6sOh+sPfdOwQS
t6Zrwu37MepC7li0NoF7gp849eX9QLEBvocHNxBYVVD0slBwCDmDck5JchDo
l7okdkZ2CKFOW3UrK4EvOK+nfjs1hPTgiLVTq3QUKNrp2Hl7CN95mriem6dj
ZLXHndyCIbTMZtc43EjHLcYvf0frDOOOotdUH286djxluyX/dATvvv2lNuZB
x+7Q6mWFsBGUiFRYPe5KR6UB3gn5tBFcWaj0HbKnY4O6UbXw9xFcJ8+tSrlK
x3KvsE1VO0bRkKPPWOEQHVNjm9f+93EUzxz8/OzCBA1Pz4sLy/WPYfZarqnU
IRq+Lz3j9x9lDCGFi4Wpj4YK1IROXpZxjOf+dC/iGw1nQkZZfkiP4/mtF20D
C2n4fGYH3263cYxRzdnn5UfD0A/ekv5bJ9A97Rq7324axidKU13PTeLGd+n7
lEVpWGP8USTWdBIjVUzUF7bTsNJP5Gm50ySOKp65ChtoSLl0vWsmYhJr5dtP
JBBU5J7v4pqfmERuxZ7Ax+VUXNOgKRTnPoWzfBHpfnpUnPqlp5WTMI1vUla2
bDlHxQR1VYWST9PYzdmhE6NGxeyehqjyumm0l3VSSjxKxTq5LfT86Wlcpwl8
niJU3BbaKqSzdwazLsgdtZml4GXuwmmtjzOoIvJX5ogHBffyJ+6SK5pFn6eJ
lafvU5DZbV/FjS+z+Muy/aqmPQVP2BbeCOydxejRqrSzZhT8kCCf0P57FoFH
uWvnGQpujSpPZz82h3k5or/ZuSlo9uGKtWDRHC6sO7OdJruIwkqKf1py5/Hh
ocuHW4QXcdu2bOWbVfN4scHJJ4FnERv2C5dR2ubxW+9gzcHFBbw7K2Y6T8yj
4zWty/MZCyj3Vy3/oeICGhmcXSmRXEBH/RfPFwsWkFtkwp1JcB5lvBa3sOYt
4v6m3yzN6+fR78Tw1gdVi3hPlt8waHkOr71hqR1pXURt6fCH6zrnsCPcbXME
dRF1QjaBb+AcXr/CvEZrCwXbDg5KcbHM4S5O/GShS8G3YdgvPz6Dalw/nzHV
U1CsdAv9ctsMrtl40vlfMwWfMztWOlfM4NZB/YRfHRTMKLweE/V+BkMzdMoG
Ryk4T/87EXppBld+jiU6/qOgOY8p38HqadTmy83JOUjFIFG2VaXIKeRqtlx8
FkXF4s0Cok/9pvD8UofFbDwV95vfjqtxnsJjAhLjGmlUnD6/pnv/xSn8VvRi
camAildULgeXrZvC6z9DObd+p6LsRqv1MTaT+Icle8JiLQ2PxO5yyT48gWMf
r8cpmNIw8iEZVhIT+OSz+vhrCxrqPQyPUuWbQJF2tsTZOzTMxbmttYvjyO/D
Ef3amYYb4qXC/BLHMdvaSCvpBQ1Djitn7tw8jhE/XjxeziOvF5Y1GDM1infH
/q1IstDRV/1tR0vHKKb/Z1vBYKejxF6qzJ/KUUx+0jRYwk3m6U13XtX3o3jc
ZGGX0hY6PmX8OxJzcRTnDAfj1knR0ee9GJvn5xGsZrn3Pv8cHW/P6Cmw+gzj
yXfWm5+/paN38jbp9Q7DeHs4/8m2cDp6rDMzZ7syjIyo/fpx7+nYXvzuI0N+
GOf8evgSE+moqNNkE/FjCB9NlwxYFtJxzbJA1PoDQzhjKxne10vHbbkPpHSL
f2AD5U2MmyCB6yRDWE8G/sB+1QPtesIE0gKPzknc/IFZ9cWn94gReG3Me13f
hh+YF27aWipF4LOIO1/GTftRpv/D67gjBDLlLDgHsvYhYwqKDPQJDN2b5f9a
sxvDfa8J3XhBIEvym74not145qY+h/YrAlWkqEGOy10ocoi5S/41gd77ttoo
JXahvmw711wIgeH2YkOv13ThurPUrl0fCHSijdUoF3Rgqdaxq+EFBJazKb74
4d+ByTzHl+WKCOwVd7p237wDNdV/3KoqIfsA7+rVyE0daJGTXN9dQWBKpkV7
+p121E464VjTSGC93ZmPlJ1t+KYpgpIwQD7vk6+gymjFvetpsTNDBJ4q+e4Z
3NiKoSgkIjVKoM3LYQ1Jl1a8/2POM5zsW+O2zILC38m+p/C89giFwHtMeW1a
Xi24kr5u6RETA3f/XutratCCDj5JxxzWMlBgvVGo474WfH/tvepVFgY6DJQP
b87/hqJ2rUni7AwsqXWyFLrZjB8f14ff52HgS3/qcTrZxxUPXesTFmJgWHC8
gpFDI/bHrsrm72Tgtef6VsU7G9GITcxFVYSBomcKJ6wffEGTqoJhfTEGprsV
qbza14DD0bBJSZKcC5fizBv66tGeR+VXihQ5h2anmf3zrccNwwatm2QYyDF/
RP3KaB3q6gbot+5jYOjY09G+0FpsaHCKFjjAQB+VVzspKqQlj7AbHyTnKguB
zn/UGqRnjV2LUGRg+bmp9bxaNfjgFb13PTkncDa9yWJmqsYsJtVfaUoMXLj/
TnuvZQUWpusm/FEl5xrdTZFr+SqQLVJ3ePEM6VKr+PbycmQqbGEfUCPnsJXD
++22l6PrzTfb0jQYaJy10M/0rhSlNycpsWszUOPgXXs3ogR/Wqy0tJKOfPQ+
n6Jdgpw6L8+FnWOg4vpxeiNTMbLk9rLxXWDgrWmXcA2LQpxeSLdr1mGgylaT
zVFYgINt1y/a6zJw/UUm94WtBSh0y2QHNzknZR54W+bdmI+MY+02hy4xcPz6
5on6//Lxge5Oopp0iY9VJIdHHop8uXRDW5+BzH3lek/kPuLVIaU/5y6T74vn
YmKJXy4ubfgiXk8aFfvEaSM5WFz0+9BxAwbyD689dyk4GyuZNwjwGzIwxMPy
JeuPLNSc7Bh+QJrbkmOLSUAmPm/nCukhva7d/MgaIg2/5EUX+Bkx0OsRy91F
v1RMVWTCIdJ7Onn/9ginIH6NrJM3ZmDS0sETFflJ6JZh+/0haYnhzdEJZxNR
usy+v4K0+kUdz2fD8bj8JnqKiZwTldNCNCzvx+GQ7S/GEdJzPU+vq3J/wMzT
Hiw2/7dCtdSuuBhczZHliyCdXDoj+MchCuXXbxKvIK1/02Uw9/07tFbbfWiE
dP/Re3duN4Sh/7YHmv+fQzO5xF6IMIJRtm/DNd6r5HnfqFjfIxKEoSE0J1HS
IRr+uUFagZjDIvdSirTETq/YD5TnuMG/PX4v6dbde66Jqz/FNtXFsv//f6fi
zC0zeIT59MDe/39/9+Fgu4CFu0hd/3Xp/9cPMOT6m3LMFJVT8wT+kvfXuDo7
pB2iCvXx1w+NkmYN8JQKYrUGUZdJw0rSd44OXEvSfQCHLpp5vCO95F+5tHjR
C85yzsXbks5qm+Fc/vUMhmVjm46Rfip3Sn8m1h8+/YxeXkv6WZR+zEj8ayhQ
ZZeoJt8vf4Z/RJXLW5jJXrn0iHTT66pzoVqhcNP1ve8B0rN2K9QrIhGg8oa3
bJQ8v7gHyp83E5EQEvL450vSMUr81cnasSB2imLfRJ5/xCZm9zsFHyDzuepH
c9IPzSX3i4vGg8TaE78YZDxxDbqsuBGJMKY4EshK+jFXNxniyfB07fzIUzL+
tq32ESl1KRC/7caRf2S8Piy7TU+LSIerRbeJQTKeHVs07guyZIJAqZWhGulv
192+ethkgcFqQVUymQ/LjK5UHpEciAyTSjEk88WL6/AtE9pHGC28V3aXzK+v
jyfHBxPzYMqqVS/tPAON9I0LDI3z4XKqP62fzMeu1+deHKz+BLx16qr7yHxV
qzpg7xv8Gdw7tC/4kfktrFrLUqdRBKbhPFKv1Rl4WGXU4M9qEaRrZ3AHkfXg
ln7/PU2LElBb6qU/IeuHIZ/6X1tFBJU2qqroSbK+sult0BtAeGR35C43ucfU
vF/p2XK6HNw11R0Jco857Se9YXymHB6LM0/mHmdgXY2c0+mjlXD2z+486iHy
/Tnvvvy3qxpm+8Wl7+9lIEjVLb2TroGevf3vN5L1cdjFO1LhUQ3cil0/FU/W
T+Jnf8wFiVpwWTJlKdtNxj/fCWNwqoOMcedbuaIMtBmiNf3Y8AWOY5VSPB9Z
H9JU9/CafYF5QX2jWV5yj/qXeRLyv0CiwsVLezcxUMa25rq3cSNYNdyeiuVm
4PNBx205SV/BZrYqUJuVgS63JOoClb9B0t59xlk/yf6oXMU1s78VUg7lxsS0
EfjFjfeU3bVWeH6OErHpO4HiTsc/L7xohaQb3h8eNhMoeFHtaP9YKxjbDvef
aCD785kMMfuQNui8asXvVUZgwnpnd/vldhCKStGZSiLQXaRpIOi/Drg0be7z
O57An6ccC7IvdIDnCaEOVrIfJ9moRXYmd0CFtFQddySBkeVE23eDTiitCdnS
EUCgnMEsk1tBFzyx1lTWdCbwfPZpQna0C7S+Jr/560ig7odrIT82dIOegPGm
DDsCNTw583dZdINRaOPr5VsESs5//6fD1wP/JaUWaxgTuP9T9OIJu14Y/KYS
3aFMYPqn2Z6VnT+gcmum8bs1BOYdXz88of4DHpRcmksh9zBfV9FrDY4/IMej
/l/uL3JvclV541T7A/7Tz/yYR6UjWlPfmNkMwPdLe+ydh+lI+bN75c3nQWhc
kDxDIB0PBOjNu4oPQ8izy2wjLnTs3/Cio//IMOTciNc87UTHz2J1VUfODYOG
3MvD0XZ0ZBJefTfmPAyP/fy2qVnQceOIdfRq3TAcdtkicFmXjjLqAVsO3x6B
5rzdex/IkHsat5lqctIo6FZLl3zrpeGaqzcPcRWNguDXK4fGOmg4K9R+/M7X
UZj8HqlItNAwednZfjt1FLjZDtey1tEwwDSdSenoGJxhj9D6mUvDv3oVS68a
x8DnzCMepuc0ZF7buF19ZhxeRubZ1x2gYVTCs22sf8aBM37H+DlZGgb1HvhQ
xj0BdlfY2FoladhT6HdCWH4Cetl7DBp30vDfD59jUfcn4Elzm9FzdhoiLcor
gHkSPjPnbTjWR0W1syeu7toyBauaicIO7uRe1p7CFyE5BQ7Ze9oXnKnofTe7
iuP4FAhX1iRb2lMxXXkN0Xl9Cgw4Zz5r3qCix4XtG7anTgEbt0lOpzoVs/hP
5545Ng2hn+4nsG2mIn/Q9AMBgxnQfpdm3RdHwS97qXpxt2fgZdaTufJICqqF
//HZ4zYDDy92NMYGU1CmJbJfMGoGQkpFci49o+BhKWpNwugMyAR7XvCxoiCF
tfTyKZtZ4D0ZWsAlR0Hn9fIS7q5zkDI5Ju5qt4i65jUuVL850KLY/JIyXUQx
Z653JuFzMDSx90C7ziLe56sBscI52Pu3Zp5HcRFPXqqNvcSYg0zW8U6ZPwu4
9cYRf2PbeYhsVf/4z4e0xeOXrUYLMBlk6CMWOo+rFtylhrcXwOljo9nUs3mM
+muu0XN/AZ4augsluszjpysulhVvF8Bf+udxLqN5fBaecPlg8wI8e/o3wHvH
PBp07VqbAovAl8UyIxozh8zpOn26Gyhw8XH3yOEPs6gQJPIulZ8CN7lFXesD
ZzH+TUvUnx0UWKO4onrh0SwSWq9vv5GmQFrgUoD6lVncILja+kSdAiu+r937
+WexqPvSXu/HFKifvKsZ8mwGH/JrrO9epMDqs4tOzjen8XrhZZOgnxSYsagu
FdCdxuD9LQUaqxS4POM0lnViGquP2dsncVChao/s4FfBaQz71FMlIU6FUuNe
0dzvU6gm/VpXwZAKacMCsfuOT2GZ0VuL+6VUuKx2gl+AaxKvLs6Z3K2iQhiN
dk7x1wTualPQsWqgAlsYu86FiQnc+He7mEYHFaaDixocyicwrtD75Jc5KkgL
7Oa/4zSBJUf5eHq20+DV6eWWY33jyG2mI73zLg3O2ld0ucWPod3UE3dnFxq8
XF77aTBwDJfedoY3uNPgoUsyp7L7GG4d2yl93ZcGT4+rKcxcGkNJ6+e+597T
gN9ZiWcN2xgO5g4w9tXSwHdFuHfvrVFsEN4kythMB2EoZk2TGMGwRMM63a10
ODy5r7F68wgK3nfCjB10oBqzGvcyjeD9IIFYXXE63OKyWVzuHcbT5iwbLBXp
sMFUwoYlYBijTnHmpl2mg6l1yzeDn0Podz3TLSGEDpMXslZlnwwihx+7u3UE
HaCfye3W1UHsfCaQuy+KDjKPbxWHKw7iAcPuj/EJdGBPfpA2MTWALEarq/p5
dAiO+qMjrT2Ag+tXKG0tdPikHbXlFt8PXNx/IUeSlQAh463Pae97UXuIpyB8
PQFqajfK/jn2YveLld/M3AQUvDXpXafeiwK+2UfqNhPwur3x9x9qD0a4mT5g
FyXAgy37UJhqDxr9bVO6d5SAC583P/Cf7UJpC5USXyUCTFr4f+4r70LOn2x3
Qk4Q4F0vJ/rlbRe2hGrpx5whwPWG78d5pS7sy3yqbatDgPvbFfHZgE5c9F/L
S7tFwA2nHfJf9ncgx1e+w8l3CPCUP2jFxdaBFFstLwNbAoS93bZp9LVjhISx
Z9JdAkZ2NXLlerej551onn/uBPiHXk083d6G/iVvxoNeE/AqgSvF3qkVdT6u
WZ0NIuBEUrbUdfVWPBMosE85hICPn9fPae5oxZsHm3pbIgiY3ml1nbf6O7p5
c57LiiNgs9xGR6vN39Fd48zOC3kEvI+Rj3xr9g1fi8Uq7PlEwE+mXxENPN9Q
X7Rwx0oBAbGRh3KWSppxnfejW6+LCXBb6XaGLc24T+RR36NKAt4IH0h91PgV
wa2378Y3Ak66SrW27/+Cbo9d/021EBBQmLoaP9iAhzOZqLdaCTi1Vfml3csG
1NC9f9ywg4AjurnixHg9KhhftV7pJeBJ0/uA0rA6nNRuXFAdJ8Co9oHDjdVq
nF5ib7o/QYBAcvPL0ZRqlKj84BQ/ScCSL7PBNf1q7Mlm7FyYJsBc1eyiZlYV
+nzI7Dm1QEBWv9MWyvVK9Bs0/KO5SMCZfJVf57kr0Zw5fEKbQsCy5Uf59M8V
KPaebZMKjYB9a/p+GfJWYPfFa4VUBgGXbBdNtj9DZB0x5G35SUAnc8mO+MEy
fGd3d3/KEgF68lEduw+XYX+TafXZX2Q8+iUMCk2XYNu66YP8vwngvXbuSeDJ
EuxdT1j3kH7Lw9e4Gl6MFyLYpXX+EPC1km2iXrMIf/5uzmFdJYC1pZx7d9xn
3NXyZjWfNLUg3cNzpRD/dUaMsvwjgL/52Kh4egG2n8+YuLGGAcf+KGgAdz7+
6dkxMUv6Lzd/Xt2tPNw/0vnDdi0Dxv9716VV/RHPewzl32RmwGDbzgltt1zs
EtoQ0kP6zpNh4S+dOZilc8pWnYUBCgZtWaf356Bp2zPWLesYwK0dN2jSmoUJ
TZ61zqR7Hmv+OO2XiRuLznt8J12vb13534kMzHOc3bublQF24S0/1iyl4VpW
rY77pImj4NGXkYpFn6ycqkhLKXnScsxT8M/KSU4ONgZURRv7PRVMxt0SHCK+
pAfY1xiJ+yXg8F/GeyR93MhIngbxWKsbuJlGes1Da4vSnx/QLbbHU5idAUfV
/6o9y4hFRljbuBrpHPHO/y6Yx+BN4cen7pDeNnM3VE4xCk+fmwjxI/1r5YdA
edw7hLvsox9I5xfevXl+UziqblyQKCCd1lsiMugRgo59UWa1pOUfwITdXBDy
olhIC+mpkUe6a41eY1iPT0UH6U0UJq59Af4Y59429n+7rPdWvGrli9PyAkzf
STcpepkGqXrj8Zwrm+tIs5fMBsSdfIgPZ/J3FpIuyY/RUFh2wHdM+3fFk/4a
yQg1LTbBF5ojQi9I75Zwk7zUpgLKuj2bbEhfva9aLVF3G971SP3VIL28TcI4
WuY+uLTMjoiSbmBS564t8oRXJvvLCfJ9nVQ3C5YefApuA/whlaSRU5DzEfML
yBjINH9BWsC6J3xwcyCYim6ROU96H+OwFSPhDYRE3p7jJr1ZSc+Q6XAwsLpW
JtSR5zfl1dXwryEUBLeAwUPSgefu7qQbR8Aky19mGdJXQvo/98xHAh+7cEon
GR9BY1//5j6KhuGtVWoPSb9UXrMH2WNhXHWnYyEZb7wBuy86RcQBp57Q33Ok
r7S4Hzg9Gg9hurJPhsj4tNN/ObpeJhH6QPIRQcZz1t6nVu6lyQCfzQhn0l2b
LiRIsqbCWSUdc4KMf02ftw5fz6VBfA7zwSEmBoyttX5CDGZAdZ1IyDnSdV+X
9j7YkwXbDqTSCsh8+mV5P/TB4WwIf1ET5faXzL+/4X9HPHNA8PPn+toVAm4H
HRG025QHzes4uFfJ/M2SndOwrcqDnRs97uwlTc1rL715Lx+2N/25/3CZgLHi
vRnHez6ReT3c1UYQYHZ0Wv5pzGeoPvqd0UsngMK9i/ekThH4mVnI9ZP1xkg6
OYnOXAy3ZEf+fCXrUfD9YanjliWgeEV41XKOABu2uB2X9iJcNZLjODFLgM6R
RvkKck/kGGpV5J0hQCEnUHGTejn8bDGl/L8ebh17Umf6qxwKOrdSvEfIeuFS
4lNqXAn9V4e89nSR/WPOpUBDuAZmu2jFH8j6uxZGNd7fr4HEY2mCW9oJSD6Y
Njz9rQbcrbguLpD1+9122TIbz1qIoIzE6n8h4NuQ9z2h4ToY9OzQ5SkhQNl+
4xG22C9gpu+tKFNEwNGV/meDy19A8EuA+ulCst6K+V7IutAIehTp1Wtkv9mx
kz53gOkrTByN+aybTgB3xJrYDpMm+MNQ2yD+juwPXnLF0twt0FGb2s0ZTkCl
5Jah0YMtUBGR8G6e7G+x/9zjQ01awFIrjfvDGwJsv3KPUbNa4MILhdxmP7Jf
5pzeY6/zHcKbRb0P3f9/f3XZ9iKkFf7J/hVqdiJgZvJt4HJZK5SEixRfcyTf
/3+17KaTrfC2sunvXRsCpJh/te863AaO+yTLrt8gwOvNVP2tnjYQeT7w8ew5
ArZPZT9lbO8ANr2jVW/Oks/Dweq44XQHbB6rGGxXJ0Ba/XKl6J0OmBQ+fFrz
NAF8gz2Wh4o7IIMZ6n8dIsDBQjxfyLgTOOLCHK1FSFeubW8K7wKdZ3a1CfN0
mODcet6Ftxe4NirIsc/QgWFvd0lAqRdmVZomzSfo4DhwziDdshc6R36qcA/S
wX54cVd5SS881HnTuY2cj4x4zt5/atEHRYVdl8Vy6PA9W+Lxw8J+8Neu2Mdk
R4eUb3F1dZcGoeVuSVimFR3ak7cuaT8ahO3npe9ftqCDFp/+hy/Jg7B76ENI
2FU6MHU3HE9aGQR7rvVPu8/SwbZLXdD5whDEjRpqX9hNhz0Pgu83EUNQM/fo
rGQvjfy9Md8ij4zA86mdBic6aGCa3q9moj0Cpn1dh3RaaBA6oOq83XQEsr00
nS3IefRMyuKgl+8I2OtabLmYS4NwN6nzm7tG4OKlAjk5PxqYCSZM7L07Ct2a
lsdEFGiw48fDsP+SxsBQ28v37V4ajDby3d1fNAbOUivdzHtooJd30/Bo0xjs
r73zvG0HDTYH6hw4TB+D3+JGVw6x0sA+MPz1rPI4HC6xkeTtpoLs5nBTmY5x
+F12dIuICxWWXqs40v5MwLPei/vNHKnwpDvi3Cr3JPDwWIvHWFPBYX+L7Vrh
SajOMw/nMaWC5YEPVisnJoG/s2ioRIMKzkeLBpKeTILIUut+ne1UeKC578Ak
xxT0K4eecSykAHGzq2SUdxq2nd56bH8uBYoV7uvLik2D5dnzhxbSKNAfzJvv
pDAN2UwC2kbRFHj+pjpnTncajLsKtzH7UKAierfS67fk53euhobpUEAx4N3J
FL4Z+HmkraTk+yKsZ5t//JtnFh7vfiAvWrUIJ6NHRmtEZmF/gmjDw7xFGN70
6Yaf/Cy0+3g6bgtdBPFXp1OXdWYhQU1afNp4EeTH3rbcD56FkejJb+OjC3Dd
97kzsXUOLqY6TTrOz0P0ltozddvmITngimT1j3mQ2tDx2F9yHmZC+AS5m+dB
u+WDxtkj81AkuVfEJ3Mesp8s2WQYzMOUFIc8v908bBhzCeAMnQcZjVP30hbm
4NT31zbSvAugWeJwvGdyFhixQl19axbBLuJrh2r3LIS9PhD8mmcRtvju+phW
PwtRTi89QWgRxi1cNG6kzEKicu1378OLcKP8gK6X1SxkZJ1am2m7CD9bXXW9
Z2dg+v10+dOeRbiVnL8zY2oaUudPiYfoUUBWQZCu0T0Nrh53CyhGFNgeqvZy
qG4a+KU196qZUuBd3j2hlcRpyC9vLp20oUCbDZPshPk0yCrnqC2R52D22Ck3
dHAKguz2ZJ4jz/V429X4py2TUGpqdL99CxUy5HojP+MkDDMnq7wQokKyxJdt
U5mTMEZLoiqJUQEeK+Uc8J8EhVvu4yH7qHCuS6X+pcYkPDeY59miSoXnZV6S
xysmoGFX9LnzDuReuv/wq7z0cWD5LBoVUkuFEtUBtpPvxuF8LM90bSMVvh7f
9Lzebxy4mV7P0lqoIMRLKay3GIfGoFe8yn1kHF4LVHwlMg7x3I51MYtUKDvN
dFM+aAyELfbUh2yhAdELN386jYKyrYeikjkN9t7dQDczHQUtQUFFtds0ENYQ
1/iiPQrsGsCkZUuDsHZDcz+JUchW+bygSu6l7BftaA1k3nodZ+FZeUGDW1d0
zhmSdSCYU1/xNpnXyid26nYvD0HioS1HtFZo4HW5tSJ5bAgMatrZM/7RwDPr
S7pTyxCkajW4srPQ4c/zKxv+JQ2B5GTOiSwuOvg9FYgZ0B8C/6QLB0qE6KAd
F8ASaTkIXoFKZa3KZF26dfmETEc/1NuM1c88pENRBVe/b2Y/GEvNPDDxpEOM
R3z/wLN+OM6ratrkTSf3Dqf994/2Q9Gltm+Rz+lQ8v7zUaPoPujd5yWwNoy8
v1bzZhpZZ29GvogeJ+uoZ9ns3ekTvWD+q9yQK58OkRtcv/du6wXrrYeV9xWS
17+tnJbW2EP2q43eN8roMBC8boJVtgf2ESlTQV/o8LFjaDiN6AKVzR5+nCN0
4LlSG67W1AVw9NXbsTGyjtLXT/9I6IJaoz9lhZN0UPyt4/RbvwsOXr5hp0P2
hZO3a7SIwk6wm82TObtMh8wTzY/obh2Q17Q98CK553KJS/y98bcVTIwyFjIU
CPijzBfD3tYK8x8LgrcpEmA1//FSclIrYPXynUeHCUg1Y+ztudAKCWmxcUfI
PXeZQ4WyJu47eOZ47LtF7rWXYoQyXc+0QPZPC9mMywS0D7pYdm5vgSaM8yo2
JMDx1ItfxgPfwOTk2EqVMQGSkR29sbLf4OsDE5OqawT07VH2b/7eBC2GWzvc
LAlYJ+n+sYKvkZwb9+1su0fupTy3bJhKv4BrOnuoN9mnt3R/czh88wusSTHb
t+8BAcPsK2Vv8xtge8fCJ4eHBFznvLJ3jX49nHp7/L9cLwIeXClb5fpbB7ul
+p4qPCHg8vbAEd7EOnDb1rM26yk5F1wKPcf9sxaExby13/oSEBK1xQmDa0Dd
f1Bw6ytyjlnTnBalVAPZ5SXnrAIIEHE4WekyXg3qb1UjPgUSQNsdRRE6WA2v
HERclcg92z1TfKtseyXYXKjVYwkjoDosl2PKrRLWEKiym5xTLpeEJEaKVcKR
FaGzKuTevcuwBn45VkBKK3OEdSQ5l3wIKvXaVA6K7GVHnGMIOL9bWnXeHeEP
rXrEMJaAuEDxH83dZSB22cbs8AdybnyjtMPzVSn4M36PjZN7+7rzNOPoX0Wg
UFNCW5tEQPGBiO1GekVgmPZAq5R04fR3Kk/WZ/B3SnVzTCYgwfxcgI15IXA7
TBs2pRDAWaPAxWjOByjI4VUl5y6HK1z8/pL5IHq+h6+TtFXByceiT/KgZTx8
1jSDgEXuA5InjnyEjTKvBawyCVipSS34EpQLYgkxVhOk2RKp53QWcoAn+/eb
q1nk3CNjqWQYlw2vz5y7fjybADm1+OaclSzgpkutiye95gPno/TsTBC/u9WD
NYeAnJyKgQ83M+DDG87GG6QX/nifCN6eDnK3fs8Wk/ZW2Ljk/S0V7lzqH9qQ
S0D2tv8u2T1JgT7W1JQrpEcWe3SUFhJhdYD6aYq0M99SqEhcApzquLEi8ZGA
m3vefFtjEA/9+3I2XydNFb6lNcwVBw0bev4FkS55dtAUK2JhYqQPK0kL23+6
HukcA5M3inXnSC9kax2j6keBXrBr8UZybl170LMjufwdvKgRWpIlbZDmdvC6
VDh89E9l1STdmZfDtPVtCJR83z1jQlpUOqi/ZTUIjMrfx9qSPrH0yvaF5WtY
08a/9wHpkBaxwsAP/tDdFPHSg/QxPu7gjc6+UIyHy//vf0spZaEa3rB/7Wrd
/z9vLPTi37mjD+H2kZ9xdqRtejTPeA07gLTeAb3rpHXTNSNlxUyg+0V991nS
mXYXVV96nMHr5jXy+0mnlnBMJl6wwmPpytc2k973n4RKged9vPpQw3SRfF6J
3zH73ec88cDhP4dqSccHNIv4b/XBMH/b0VDSGsXrdj1XeYH1Tp9vmJM2P95/
78jhQDSQWyqUJp3xNnubWPMbVNA+PTpPnofQ3ZOX15gHo8+HopFU0m+m9fza
foVi8UW3AjPSToX5HOEBEWhTG2/K///zvK+geFH8PRp+ujxcSZ7/2ooPFitF
0Xhd9JPiHdJme4ZjNt39gJd7mW+kk/E0eChNWK8gDv/lxmipkVYrep76aiUe
09mb4AcZjxxN9zJmvJOwJMXm9G8yXuX3/fXjrE/GXZnyeo9J59YHHxPjSsUH
sf/ZMZPe5s41efBtOlr+OF29TOZDrZynqlx3BprdaPh7h3SCs8wpkR1Z+EdH
TqU3jQDrlNLFxe/ZOLpqSklKJeBh0ViwleFHjP/Z1sZG5l+k6vDfIysfkT7T
Z6VL5ieTsBMT8/s8dNG8sSEikYArjcf3Px7Kx+S+DretCQRMKszwSlkW4rPU
tp89ZD0wF9/BXMn+GQkug+VVsl4kPuy5pJP6GVVbVdmFSKe4bPM1ni/CX6y3
9bSiCGi1/2+M824pNtGuJ9iR9ee74NYMM74ybP5dJGpN1iehmW1x2flluE4u
L/MGWb+kzArc5JcRdR/nr5wm9yq59Ss6psoVeNInwKrhNQEHs3e8YqqswtJV
k7HJZwQ8Zbt4/gpvNSp1TwQG+xDwNd/XMdesGnnUr+gqk/U2hYXvjTZzDRm9
LwUfk/V5h4y9oJJKLXJ3ZVU1kvXbpU/9BaW6Hi31D329Z0/mw/X5/7IEG7Bf
9IJnji0Bz/eEFtx0bEAxz4G7k9YE/LUzsCgS/oKNOR8ET90mQIU/T/nfg0a8
nM7rkWtK7pn8CS+HZZqxV15GwPMiuTfK7TjL592MXB0n1l8/T+65zOruSj3N
qG0Qq3pUm4Cgiq99jk+/YTODHvmD3NNiZ5psPtq24MPDK92DQABD2Ot6Vs13
3NOa81+bDFkPJhxznSnfkTA6wmQgRT6fz0b3w4KtOOTtIde1m6yfVNBKs2/F
J5v131TvIiBg6JyXlmAbyvWLOhhvJeuVx+J3R7t2lFaKOe+6loD3Zkw+K7xd
yJVP9fFqpYM/3ebn3qNd6Cu4bcfzb3TwlqnRNDLtwtb34j0vv9Jhy8qwS0xW
F8Zb8DZ719Ih3G794PDZbjxz5eHnQ0V0EOcQdJXz7sGyTjetwhg6XJkVdC+a
60P9m5IXdpF7nfN/Rn8ENvfj5lM97oHkXncq76yc9ZF+DD36beGXGR2aXvQG
Mvn0o2+xWlSZMR0curllW3b+wI7zVdo82nS4IWr8ee35ASyot61p3keH5Mda
QkV6QxgawcXetECDhsSBmt+3hpC2yKGjNUODk0dX7iu6D2GdW7B87TgNevVT
hqMShvC1UP2nlH4acKavk1T4OYT1HupMcl9o4KOz28M8ZBi7i+YajsbT4Hvw
N7XK1hH8kjJuqKtH7oHgyWo4MYLXCtds23OeBtvfW2yd+TWCiq1XIpc0aCD7
+r7wisgoNsxx/vQBGjm3e+7sth1F1uzTopZSNDDneMHyYP0Yit5IKd73jwr5
3r4U2aPjmHtf0XEingq373C8zNQax19x99buj6bCTi8x1t3XxtGREChyCaeC
z+avj9c9GcddZ7YkLvlTwX1Zdr1L0zh60N2ii52pUJo3t7jv2gSGD4QEXFWj
wia780cr3Ccxdyvdkn+cAi6bfQmHgElclH+3r2GAAkf2GiwIxk4i74tBXZdu
CogUXfE3rp7EJ8WuFfWNFGAZyaf6ckxh8GGa8f/3wlw5LpGw4ClcOFghKeVB
gZ6IXwMWidO4p1RR4zMvBZjOlrrzf5rG9BGzaB0uCiy+EvpcWjON6hl3dk2t
o8Dr+fqfv8em0aR+0oqHRu6BqwXie8RmUETaxmV/2SJczfggoBk1g89U71pv
uLQItX8M8U3ALK7/4ZNzwH0BDLKtO22iZvFCRdyYi90CBAb94D+VMYsWVvO9
+aYL8O9Kxb+OL7Pozkjduf3MAnhbqgilrZvDJd1Us5cbFmB6t4Mjm+sc+gvI
DG+PmgfL8A2u9lfn8X2c8IHlgjlQCX8sGWo9j99SmoaEk+dA/5O3Vr7bPDr0
+ARA2BxsjzTu7wqfRyp3wDpLlznImKdm5HfMo7xFbIf+4TkYr8y+13J2Abm3
GW8v+zQLzFOnWSzkF9F+naHW14wZsOX+In0XFlH37Tq91cgZUGKbULmvvYiZ
5l4MiZczQJfSPm5+exEvDztuM7eaAe3Hd9paYsjPO2jZ+kjMwP7krfHLrBT0
HXd4Z/d+Gr6+V3gcYU/Bu6+ip34+nQLKqyKBaGcKNlnGfHW4NwXiE7NPox9S
MHZ3c/2E+RQ4RnrPBvmS3nhtO56egtqCo2maMRTMa7cOlVwzBZYPuksXmil4
1Php4rTrJHz6wmXPJknFv2DZqGA1AaHErOeTfVTM85gY/WUwAYwGSVhVoOLX
9SmRRWoT8Hr1UdmwMhXnZPWYZMQngFNpfbyzHhUtCng4vg2OQ9rj4ulmDyqK
q2b82qY3DiKN39/ItVCx8MVp4ZHDY6D7fIidvYOKdzz780x2j8E/Mxb5vh4q
brShJXXyj4HaNqEgp1Eqxsh5FxTSRuHlQv2juz+peCaCQVNNH4XVdkn2WEEa
tl91euu7cxRuXpa599GMhl/s2by+/huG8wrHdvyzoGGACtOG0vlhkBef1z1z
h4Yy6V2eKX3DIMOu61B3l4bp7QEyzgXDcG6GR+PtExqerjAQGLQdhiMRO0Iv
J9DwzO4JNnr/EPAxBx33GKVhUWiG9RPrQfB28pZ4MUnDU1Y8YRoqg8B8OTj/
zSwNXRszrFh3kP/nbyt7TafhK6MTCpaNA6DDx3z9PDMdPweHva6VHICY7jCi
TpSOWfvZ/VjH+0Hi4T+HJCM6Lgf4/+u71AsFQfPsbCZ0dL3Kqpcu0wvPNd+K
m5rS8SJnXvk95l74Gv10juUWHfkNz28isnuAkz0hjOMeHQW363ZGc/bAw58G
6dyv6FhRkC9dhl0w5fNo93wxHfcLRx+/JdYB1vvtdtqW0VGpZPP3E3/aYede
p6Mz5XQUfyaVwtfRDs9lvQfbauioql2nmenTDsz7rjRbf6Ojv3+eaep0G9jI
CNXnDZO/z+nWxebMVqgxZHybHKWj8h6RxGvPWoFFzIvgn6Bjv9umnrlrrZCl
2/j6xgwdQ27cYlrZ2ApL6/p5qml0vEJ5aT7p+B3mxKc+hq8lkHc2b+16xRZ4
pv/+vAcLgVfH5OuvbGiBFxM9TCasBK6Xb9tg1PQNSlnVP2zgIPDrC84DPvu+
QdC29o4Dmwh8S6w75U9pgrp3j1Pf7iTQgmXxseXdRvDoOmsvJUJgup+9VZJY
I7w6nqBaLErgzmSKx3DbF4jqyBFq/o/A6O1KrioHvoCkg4xroRSBziYPB+qI
epDmc4qJPkig6EfGkw6nWpA4+WCU8xCBgZLdPfaCtXAkbmDZ4TCBin/07rFW
1kA607Vw6WMErhu3mRfhqQHJstwkvRMEnq+PGORPqQKm33ucAk4SyDZQZeFz
vgqa3Y02Vp8ir6+nyUNjVMLfb+WftqsSqP9iSr74VCWUpZR9dNcg8IHVcvGW
/nLIIcR/+mgSyKr3RsvcqxxKInawPj9LoHpzaE/6nnJYJGr83bUJXHL7m24+
UwYhTe0Ht18k8CK7+iexHSVQ+/7eAJV0Y+RipNetYmhdoelU6RC4I/Tf/r68
InBgNEXp6hEo0lqi7qr9Gdb8dSmVvEygUkjqdmePT6C3/Wb5N9JJK34Pk7/k
w+a9hL+dAfn9e59UOgXyQe22l2+kIYHJbq6j/2V9BIlpjXxJIwJ1Mjp2n1nJ
BW0u1fRs0ge2r8u8oZYLZyvcltOMCdy11db47WA2GLW+0ha5QuAvRztKknQ2
7Hj6xPoV6WNLyaoOi5lAv6R96Sfp0M/Muv7PMuBqYh+bwVUCb44VOscLpwO9
ROzJR9J2dm92FhSkgmWN4Bd2E/I8HYwKa86nwKOW4p7LpC/87c1pmUwCvvbV
3BjSFawDLt2PEmFT2o9Lo6R5Du51+7ElAaz4DSuFrxHo/vW1xFBWHGwptFu+
RLrSt31qSO0D8AuJLT8lneRaKjs0GAOGH50rskjHfNvdWrIYBc3NdnptpCcu
Hl9XKBwJZ5P5cyikyzaebs89Hw4vrzp0sV0ncO3J6u2Zj0JAmupft5X0kJNq
XmpWEIRpujwWIz1poPEwZTAQOBRh3R7SxFBUpL7wS3A1p+tIkB5LTeI0e+QD
4XeSrHaSrhh5/8d50BOqauy0NpI2prVr7XvkDNTvZssr5P33Txf82/jIArLb
wmyHSddUi8w7Pkg8/j/0eB8C
            "]]}, 
          Annotation[#, 
           "Charting`Private`Tag$68441#3"]& ]}}, {}, {{{}, {}, {}, {}}, {}}}, \
{}}}, {AspectRatio -> Full, PlotRange -> All, DisplayFunction -> Identity, 
     DisplayFunction -> Identity, AspectRatio -> Full, Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.823970049992944*^9, 3.8239700652644997`*^9}},
 CellLabel->"Out[53]=",ExpressionUUID->"715d50f1-a54d-4ef1-b5eb-398a85b66192"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explicit higher map to higher dimensions", "Subsection",
 CellChangeTimes->{{3.822997531303759*^9, 
  3.822997543022784*^9}},ExpressionUUID->"46fc5f4c-3ffa-48b9-b86e-\
56250f6201ff"],

Cell[TextData[{
 "There is another way we could get support vector machines to work with this \
dataset: by projecting onto a higher dimension. We now try the map ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Phi]", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"(", 
     RowBox[{"x", ",", "y", ",", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}]}], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "16787ddb-9d94-4d3b-b064-75351c2d5831"]
}], "Text",
 CellChangeTimes->{{3.8229975499878893`*^9, 
  3.8229976002086363`*^9}},ExpressionUUID->"6a498b52-ba54-4e92-916a-\
0a93b2a9eda4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"\[Phi]3D", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239754660876055`*^9, 3.8239754879994535`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"1101afb0-b9ed-4a5e-8e57-e88759e93b18"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sepdata3D", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"\[Phi]3D", ",", "nonsepdata", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823975489997603*^9, 3.8239755009499483`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"e9bac504-adf3-4354-a947-4cc66e221648"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Plus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.19418006351395`"}], ",", 
        RowBox[{"-", "0.7939897238477599`"}], ",", "0.6681255786421237`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.0009402659049429163`", ",", "0.11141564362630568`", ",", 
        "0.012414329744635947`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.6985681983270928`", ",", 
        RowBox[{"-", "0.36790456437588814`"}], ",", "0.6233512962025725`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.00295604144687557`"}], ",", 
        RowBox[{"-", "0.18777988106197538`"}], ",", "0.035270021912685266`"}],
        "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.23888242209918226`"}], ",", "0.034500797441814446`", 
        ",", "0.05825511661209299`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.02990472311744523`"}], ",", "0.05854307847237184`", 
        ",", "0.0043215845017533505`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.4835702248162677`"}], ",", "0.24533902079622935`", 
        ",", "0.2940313974541084`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.20390719257284282`", ",", "0.10887728322031986`", ",", 
        "0.05343240598437615`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.10538241515767546`", ",", 
        RowBox[{"-", "0.38172681750042337`"}], ",", "0.1568208166234662`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.1824956607100494`"}], ",", 
        RowBox[{"-", "0.6762831160175996`"}], ",", "0.49066351918847156`"}], 
       "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Minus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2.041251388907825`", ",", 
        RowBox[{"-", "0.35539451182767`"}], ",", "4.293012491755352`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.729497294004517`"}], ",", "1.9430725958833286`", ",", 
        "4.30769741483269`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.9582099623680669`"}], ",", 
        RowBox[{"-", "0.14589014711693948`"}], ",", "3.8558701917433478`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.7549130603093654`", ",", 
        RowBox[{"-", "1.6895760872115724`"}], ",", "3.4245610831028186`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.5094375357680065`"}], ",", "1.9943197246955076`", ",",
         "4.236837767158944`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.8706064275341703`"}], ",", 
        RowBox[{"-", "0.14104829949370085`"}], ",", "3.519063029522216`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.4543618707479875`", ",", 
        RowBox[{"-", "1.18363578035018`"}], ",", "3.5161621116107655`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.853565067751745`", ",", 
        RowBox[{"-", "0.4895674667312021`"}], ",", "3.675379764871138`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.9874646392084663`", ",", 
        RowBox[{"-", "0.5256987415568544`"}], ",", "4.2263748589785`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.29568064965204355`", ",", "2.0791324971956673`", ",", 
        "4.410218987473746`"}], "}"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8239755016101584`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"e11409e0-6469-4b72-8019-c37b8243e18c"]
}, Open  ]],

Cell["\<\
We go through the same process as before to set up the dual optimisation \
problem:\
\>", "Text",
 CellChangeTimes->{{3.822997603357193*^9, 
  3.82299761824004*^9}},ExpressionUUID->"38d37acc-0bdb-4c4f-991d-\
7486c167803f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"sepdata3D", "[", "\"\<Plus\>\"", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"sepdata3D", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8239755082360735`*^9, 3.8239755237966156`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"d0aaaaa4-02cf-43f3-aea4-58cec57aee6b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata3D", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata3D", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823975526099456*^9, 3.823975552331719*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"f327fc67-3e30-4410-9813-e304b51ea262"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "X", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239755533995695`*^9, 3.8239755617936983`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"678e3286-b94c-485d-acf3-25570e058ee8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.82397556313808*^9, 3.823975590786085*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"9b618a9e-151e-41be-a91f-f079fc9a8fe5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"max3D", ",", "sol\[Lambda]3D"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", "0.5"}], " ", 
         RowBox[{"\[Lambda]", ".", "X", ".", 
          RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
        RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
       RowBox[{"\[Lambda]", "\[GreaterEqual]", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823975593501247*^9, 3.823975639410629*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"da8e7efe-3995-4489-9ef3-e0ad268cf335"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol\[Lambda]3D", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.8239756416037617`*^9, 3.823975649466171*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"555a5713-ab34-4a56-bfac-1d2bd475a89a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", 
    "0.25344350659653636`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", 
    "0.15486347329602776`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", 
    "0.0985800333005086`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.823975649882222*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"287e3c14-e27e-4632-97c8-6b2183f13a9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"supportVectors3D", "=", 
  RowBox[{"Pick", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
      RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}]}], "]"}], ",", 
    RowBox[{"Positive", "[", 
     RowBox[{"Chop", "[", 
      RowBox[{
       RowBox[{"\[Lambda]", "/.", "sol\[Lambda]"}], ",", 
       SuperscriptBox["10", 
        RowBox[{"-", "3"}]]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8239756576635275`*^9, 3.823975697500334*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"4167eba9-7ac5-4749-8e35-0d6df87fb986"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.19418006351395`"}], ",", 
     RowBox[{"-", "0.7939897238477599`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7549130603093654`", ",", 
     RowBox[{"-", "1.6895760872115724`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.8706064275341703`"}], ",", 
     RowBox[{"-", "0.14104829949370085`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8239756982054443`*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"0b8cdde5-0522-4222-ae71-6ee77482c24b"]
}, Open  ]],

Cell[TextData[{
 "We now compute the values for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "3fbe1833-bfe7-4db4-9d89-b411e9a9c48b"],
 " and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2af9da74-da80-4325-9f43-a43df079e287"],
 " actually being an equality (rather than inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, {
  3.822997897228054*^9, 
  3.822997897832984*^9}},ExpressionUUID->"fb1441ae-dd99-4725-a8f5-\
f79776112d7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wsol\[Lambda]3D", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]3D"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8239757050106373`*^9, 3.823975733171222*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"20c86bc5-6810-4fd0-85a6-eb8ccbc61237"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", "0.0182823091543083`"}], ",", 
   RowBox[{"w2", "\[Rule]", "0.07432662751097369`"}], ",", 
   RowBox[{"w3", "\[Rule]", 
    RowBox[{"-", "0.7079166849826981`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8239757342760353`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"bdad7087-2fcf-48a8-a44a-d11fca8480c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bsol\[Lambda]3D", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
         RowBox[{
         "X", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "+", 
        "b"}], "\[Equal]", "1"}], "/.", "wsol\[Lambda]3D"}], ",", "b"}], 
    "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823975736047269*^9, 3.823975761722088*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"201ebbf1-d7e2-45c3-ae29-176e5dd67421"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", "1.5355418831892178`"}], "}"}]], "Output",
 CellChangeTimes->{3.8239757637817774`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"3c82f088-6381-4980-a52f-26083465711b"]
}, Open  ]],

Cell["Now we draw our decision line and margins on the r-\[Theta] plot", \
"Text",
 CellChangeTimes->{{3.822997092894528*^9, 
  3.822997107733405*^9}},ExpressionUUID->"432d1d91-2cf6-43da-9e08-\
9c1be9cb08ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decisionz", "=", 
  RowBox[{"z0", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"x0", ",", "y0", ",", "z0"}], "}"}]}], "+", "b"}], 
        "\[Equal]", "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]3D", ",", "bsol\[Lambda]3D"}], "]"}]}], ",", 
      "z0"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.823975768968877*^9, 3.8239758350169287`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"171fd1f7-5524-4bf0-b9bc-c89b16e27a6f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1.41259560794847`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1.5355418831892178`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "-", 
    RowBox[{"0.0182823091543083`", " ", "x0"}], "-", 
    RowBox[{"0.07432662751097369`", " ", "y0"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.823975808058297*^9, 3.823975835858672*^9}},
 CellLabel->"Out[66]=",ExpressionUUID->"9061af7e-de85-49e8-94f4-87d3dea15f4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{"Values", "[", "sepdata3D", "]"}], "]"}], ",", 
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{
     RowBox[{"\[Phi]3D", "/@", "supportVectors3D"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decisionz", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x0", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y0", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823975841854615*^9, 3.823975912305596*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"0a1c5a0c-df74-4cf1-ae63-7fc217a4c47b"],

Cell[BoxData[
 Graphics3DBox[{{{{
      {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], 
       Point3DBox[{{-0.19418006351395, -0.7939897238477599, 
        0.6681255786421237}, {0.0009402659049429163, 0.11141564362630568`, 
        0.012414329744635947`}, {0.6985681983270928, -0.36790456437588814`, 
        0.6233512962025725}, {-0.00295604144687557, -0.18777988106197538`, 
        0.035270021912685266`}, {-0.23888242209918226`, 0.034500797441814446`,
         0.05825511661209299}, {-0.02990472311744523, 0.05854307847237184, 
        0.0043215845017533505`}, {-0.4835702248162677, 0.24533902079622935`, 
        0.2940313974541084}, {0.20390719257284282`, 0.10887728322031986`, 
        0.05343240598437615}, {0.10538241515767546`, -0.38172681750042337`, 
        0.1568208166234662}, {-0.1824956607100494, -0.6762831160175996, 
        0.49066351918847156`}}]}, 
      {RGBColor[0.7926498, 0.5499369, 0.1278459], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], 
       Point3DBox[{{2.041251388907825, -0.35539451182767, 
        4.293012491755352}, {-0.729497294004517, 1.9430725958833286`, 
        4.30769741483269}, {-1.9582099623680669`, -0.14589014711693948`, 
        3.8558701917433478`}, {0.7549130603093654, -1.6895760872115724`, 
        3.4245610831028186`}, {-0.5094375357680065, 1.9943197246955076`, 
        4.236837767158944}, {-1.8706064275341703`, -0.14104829949370085`, 
        3.519063029522216}, {1.4543618707479875`, -1.18363578035018, 
        3.5161621116107655`}, {1.853565067751745, -0.4895674667312021, 
        3.675379764871138}, {1.9874646392084663`, -0.5256987415568544, 
        4.2263748589785}, {0.29568064965204355`, 2.0791324971956673`, 
        4.410218987473746}}]}}, {}, {}}, {}}, {{
     {GrayLevel[0], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], 
      Point3DBox[{{-0.19418006351395, -0.7939897238477599, 
       0.6681255786421237}, {0.7549130603093654, -1.6895760872115724`, 
       3.4245610831028186`}, {-1.8706064275341703`, -0.14104829949370085`, 
       3.519063029522216}}]}, {}, {}}, {}}, {
    GraphicsComplex3DBox[CompressedData["
1:eJx0vXlcDe///386kbQhZCtLKiJLpewmoYWyZ4mypJBSQtJCkZJEmxYhUlJk
TZFqKkQSidKqOu37viD1e300z+v5vc35vf0zN/eu5jznPtc557oeXTMzbb/V
ZlMuh8ORH8HhCP63nVai/3xgYICGbZBAo2bFg1LK7MST4DjLP4QflLRuMJEs
o6JFRztbFnUTPkTOXC1vfRnVHHbSTE63nfA7agfO6niWUab/9tNA+Apt44yE
99CeR3jBjh2j5wwpZ3gO4bbmm41CNcopDvMP+GhHvchRTqQ9Bfyxl1bb+VfA
eYTrhWos7e4qh3oIr3my5MIhFR7UT7hr2oIvhUd5cLyET/s+d4L+Ax74ITy5
aqYJXUNej3DDHtkYZbkK8n/wWjTDefWTzDLiGbanFttfkRUuJ56Bj153It9/
dTnxDPzJ7qOyw1zIcRGuf/SQxekk4oHw2rP74xp+oWfgF3x2c4zVecQzcNm7
29Zm2/CIZ+B07EZ/zcc84hn4rvS1P2MbeMQz8J4fq2fOmFlBPAP3q1thE3yg
gngGPv/PokTROxXEM/AsMVWhMyXEJ+Hmk+dsbJ1QSTyDv7r1l2qOppaTdsAv
7HVVLv+LnmEra3PGYcsS0h8Ip8/bvXtnS46L8N3XbEYsek48EN5zz2JndAvx
Rrj/S7O70koVxDPw+R/3Nl05VEE8A88qMlwoEFFBPAM3b9rqcry8gngGPnRg
fWaVTCXxDDxspO7YHYaVxDNwSnbVno8BlcQz8GLV5VHLvhGfhNutWdjxaEQV
8Qyeek/6X5oTj/0A+DX3K99DO7Bu4MrBFydLzif9gfDP0ecOuVqQ4yL8SKLj
s+77xAPhQp9t+w5VEW+E3y211iqaVkk8A9doM/fWN64knoEXc00L6euVxDPw
02P2yKn8qCSegY9V2Hk0fHQV8Qz86cItL6U2VhHPwNfr6nM9LlcRz8AbDLX1
/nwgPgm/aLEywHJoNfEMPobdvDWn8SF5XxB+91HQKeM68j4iXCPFNzVbnvQH
wku+XhZdtZ8cF+GnK9wMXtwiHggf2+UcOqOIeCP8mZBDXfC4KuIZ+PrxJ1XF
tlYRz8AbFK2cznhXEc/ALy49/L71UxXxDHy6vskok+HVxDPwFGOjXblrqoln
4EbW2yO0z1UTz8B/uWxqeZVMfBIe4LdusdKfalZ/5tFSb+9nR4dVsvozj36W
GzZRprSS1Z959PqaGweuTqpi9Wce3dAb8EhgRxWrP/PoiyI+vcf9q1j9mUdP
l/bUrM6uYvVnHp0y58LlHeLVrP7Mo42os3kfdatZ/ZlH/954eupyt2pWf+bR
gfuPmz9Oq2b1Zx6tcsIydtpANas/8+gvFw72+y2tYfVnHm0RuE9HyK6G1Z95
9PCoXb52sTWs/syj7yUYFNe31rA859DyDc+OHw6qYnnOoVP7HiYVfa9iec6h
jSUih60fVc3ynEP/nnJnU4p+NctzDh2oHBKicqma5TmHVll1rSo8vZrlOYf+
svXqvHGCNSzPOfQRM4/THlQNy3MOLWx3/s0fhxqW5xw6wsNJ/OjLGpbnHFoj
5NT2ss4aluccuuThsTublWtZnnNo++QjDW8ta1mec+hx2aZqC6NrWZ5z6Ofl
e85GVRNOw3GoSiZJzbxC3heEZ0+P33v9I3kfEW6h9jRabBipk/Dh2g86z6wi
x0X4vR0RK9rOEg+ErzQPvWiSSLwR/tMhOCe3Fz3DPwcvP2kdtVriGfj4UC+z
hGO1xDPw2CfuT5Qe1RLPwDemufy+VV9LPANv/OawetSMOuIZuEfVySvnTeqI
Z+AKPVb5XaF1xDPwN8LmsoeK69j9mdJc/P5V9fkadn+mStemCu5MqWH3Z8px
92v9zL4adn+mxh99Ebh8cS27P1Mvzj4uf3yylt2fqY0+UbNln9Wy+zPVFHb3
pH9zLbs/U5dib9JCs+vY/ZmakR44/PTBOnZ/pt7+8NnScLeO3Z+pPXWeN43K
6tj9mer7faHmi3Q9uz9TQWLOypo769n9mVKbbO8Qe62e3Z+pnHkn3ink1LM/
n6lNe7/ujjhdy/58ppqOZd4bF1fL/nymPM6/a/Vor2V55lEK1+glfXPr2J/P
1Jt7r1yPHqljeeZRxi+ffy6LrGN55lF/MmLGb6msY38+U0FFkfvfTa1nfz5T
ak13Hi40qmd55lFf+0O6o4Lr2Z/PlOXIAA3pvHqWZx4lIut96YpkA/vzmbqn
euk7Z0MD+/OZWrXGdfJxzwb25zNVtu3Moar3DezxBrXPvWjAxKqOPd6g+oJy
dfMe1LHHG1Rw9Bc/nVrSHwhXT8woSZCrZ483qJysNzPm7CMeCD9amnQs9Cbx
RrhIW/zrUYX17PEGFcl9NtRVCvsl8NVjHm7o3owegZfL3ws+dLWBPd6gHBfe
rijMJOM8wifoXp+jL9zIHm9QcYb+p+jVjezxBrXZ4kqqsksje7xBtThdFA1P
amSPnymrR1Vhsqb17PEzJZpS2uh/p549fqbufy1QH/azntWf26k1Fd+cT09s
YPXndorXmfWxYVsDqz+3U05CH8YY+zWw+nM7NXF8mnH2lwb2+JmKU0y8rynW
yB4/U1uWxrXH6jSy+nM71ar3ZNmMC43s8TPlaRztFpzayOrP7dRM6/Bs0f5G
9viZeudya+KZJU3s8TO13y/oQKttE3v8TPWH+z7a/7yJPR+kzuS2rCk3bGDP
B6kJNXVXtwTiPAp4XG9FwbtvOO4HvkXk5/RFI8lxEd4yKd8yWo94INxzTk68
tAfxRvhM6pPA1XeN7Pkg9XZj+joBbhPxDHzf/pRrx1c0Ec/A+48nlFbZN7Hn
g1TwhVjFHfFNxAtw9cBHxz92NLHng9S3+/eTls1vZs8HKeuEsGGPLZrZ80FK
7NONTdOimtn5BuXV96s2dCN5XxA+U6JTRdKLnF/C301pdnTNIP2B8P3Ktend
Q8lxET6gyRt5WJN4IPz61mLDojPEG+ELzfLC9V83sfMN6vup7Ga6Bz0Dt/b4
uEhlQTPxDFw85O25cOtmdr5BRT1M/iQV00w8A1+T/FLKo66ZnW9QvC/P9v6R
b2HnG9TZ8ofRlvtb2PkGJd1xr7P0VgvmUMzPQ6YPuWysRd4XhC9S68/NPkfO
L+G5Wr1TVtGkPxB+bEf74Rd/0DNwCfPG5zMWEQ+ERzlU/w0+0Uw8A9fyKtMW
e9rMzuuoiluFPmeaSHtyfM5Pvhe1KrYQz8Cl0z7Lm5i1sPM66uW3D1a5YS3E
M3CDqrRX2qUt7LyOOu3wU6BEvJWd11HarkUKUkqt7LyOGuuVv27D2lbq7cyz
CkVxf2nYTpPpHSdiVUb8A98y5k979sYyaE9+bwz3QcEPZ8ypgPNE7vePDK1g
75/ijXfc87Kukb1/aszIs0vOZjay90/l/Z07ze1PC/k/vM4jYcNXKkuxftif
yujqywa1pez29OVm+Yu9QyvY7anDSgJPAw80seunNgtK3S0Va6Xaz1VbWBb1
07DtlogvdpItA05+Ht9n9sZ1cwW7PUVNTjkpOr6J3Z7iCC2aO1yOnBey/6uX
Fq3dNxr3Dz/vsAmfOHYs7h/q5d4/N9nBAOuH31PVOXUqcHYruz19QKTuoPTH
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
R0wUG5cmIcCXqwv/eBT1U0aAL1c399u07I+SAF+u/nlD5+dxywT4cnVlscB9
C9ahZ9j6fVjcudFQgC9X73YtdrM8LMCXq+9ceXbCJTsBvlz99d9pD++5C/Dl
6lMS3q54EyDAl6u72B78WhohwJerV6qIHOiLRc/AtVsedo9/i56h3jxz6ZDe
OQJ8ufqiGfScscsF+HL1kIp9Kcp6Any5en/okC3rdwnw5ep7d0dWmZsL8OXq
b8evtXM/LcCXqyvkNoqEX0TPwD18rt5MCRTgy9Ub9VXml9wT4MvV14vkpv16
IcCXqz9NP2Ug9U6AL1cfc35ircp3Ab5c/RSVZL+hQoAvVy/8s0fcoh09A1/2
knv7ogCXeIa6MlVtVh86IsCXq89tHfPD1V6AL1f3eRh/+I6HAF+u3nHIsC8p
SIAvV98m//dKYaQAX67+qjx0Wk+cAF+uLn1LM3Z0OnoGftawSmt+rgBfrl4u
dbFAr1KAL1df/W2WxeEOAb5cPfJqVv8FLpcvVxfRs/YJG8Xly9UthUfL0VO5
fLl69tsXcUXziE/y+iouO3R7V6BneP20vvdNP+4L8OXqcq/MnTvjBfhydfeT
4qNHvRfgy9XrlJ9EzMkT4MvV9Zs3L1pbJcCXqz+J7vpo1inAl6tLHgwyOi/I
JZ6Bn5y+tDVUksuXq/8oLTmXOI3Ll6svveE8tmA+ly9Xv7lj+v0uisuXq3PG
pi+R3MDly9VNvh7KmmvM5cvV33mJ7l1niZ6BK6591H7QET2Tcfo7mUDtagG+
XH3iuRTFA10CfLm60wqTROchXL5cvez30A03R3P5cnXN+Pvlr2S5fLn6vePr
TuQpc/lydeH5zUIdGugZ+JFG7+ARG7l8ufrn+6pKSnu4fLn6fNO8ZJ2jXL5c
3W/a6U2mTly+XL27ZFKly2UuX66+83qy7a0QLl+unrht3/DX0egZ+OTRQ278
eIWeYX8xV45rxE/n8uXqI9dJffumwuXL1Y8Pe2XaupLLl6vnvtnVK7aJy5er
L3Luv6S4l8uXq4csuyOjZcXly9X7e1c92X8GPQPf96Ja86wXly9Xf3vMIzfk
BpcvV1eYq3To5QMuX67uUf/59/cELl+u3njvmFdbBpcvV99gMmaqRAGXL1d/
NiX+2axa9Ax8TPHONdo96Bl+7+72jDqFfVy+XF1ojIXjKmsuX65+OFtixN6z
XL5cPfPy0zuOV7h8ufpc3a0Lgm9y+XJ1n6E96S8ecvly9c7U4J05r9Ez8O1n
ljU2f+Ty5eqvlpSeES3k8uXq0j0uo2bWcfly9bPP5cJX93L5cnWe1Xv1fcME
+XL1NUrmGU5Sgny5emSt2O7r8oLEM3CRiMfNcQsIT4GfB0+d4hdwi8uXq/cV
p8o/j+Hy5erGwQdefknk8uXqaQbD1jVmcvlydTnJ6BLhIi5fru7+Wc9avp7L
l6vXX2rhav5Cz8D1tH2vGQsL8uXqTwTVZjqME+TL1SVTfiQEKgjy5eonHe31
Y9UE+XL1gkUyZdmrBfly9aVdtE3TFkG+XP3W0/1DRUzQM9keHRqkYCPIl6tH
ZH4vPvcV81zgq0aorDVL66fYufqP7piyBXNwvySfNxhQfLOAw5erb7j+bpil
O76PgE9ediL553/vC3auvnX2cPuydYJ8uXr2iNj1QeaCfLn6I+5Z1dH+WCfw
3ZKCYk4SHL5cPfOMdbHcPVIPeZ0LHoZvjv7nk52r/76Yn7zsAebjwJ+pCky6
PY3Dl6ufMLLJEvDj8uXq0XrDPAT3YD+H30uf5X7y0V1sBz8/kfpg/mpJDl+u
/vzL+3ijMKwffi/tz+OYj/sF+XJ1p/A59a6XMR+Hn3/kRVEH5TGHgf3sfpRx
f8lVLl+uXpu8+/ieo1B/H7kfyKOQNyv9OXDflV6yTr53WEfoK6qMcGg/bN5f
TTs1aN9J2m8OUbpz80QZ4dB+X5r66t3m0L6VtH841yzMJaqMcGj/2sB6jUYo
tK8l7YXSQu+a/iwjHNqPrYvSkvsO7ctI+z0GBeG6o5FD+6OOFdrCw+H9nE3a
v6qVvDdHp5xwaP9hhIxu43LSnlwfYDHC7X7XU9KeXJfjqO69LjYS2uN1JOlh
dFRBNamHtM/LyNALKob2eD33FPVf0UmTkEP7eUaC6x1HwX1F8PqJ0xkqD+9s
5BEO7S+2LtuwVwvad5L233ZbxFy4wCMc2vPO225c7QDte0n7Oa0Rjw4n8AiH
9svGPdk08wm07yPt3c+XPtZv4REO7QOi6zaLVZH25H4piWlZlZu7sR8Cl9o2
rFp9NqmTcOs6jZqJe8nxEv7R0b623594I1xuZGwdL4OcF8Kd7jbVp/djfwD+
Q31GY7RqBTm/wC8ZXW+2uVlBziPwytZvLdtyKsj5Ar7cVbxtybBKcl6AB47T
bp+8rJL4B94W7dzBPVZJPANftyKhszqikvgEHvG1o+tjIeFwXSf9qe6H+6hG
cr4Il3ca5dE1lfQHws+OXHepwID0K8IL7rp6Jl0ix0W46sLky3do4oHwyx97
vC50Em+EVxspXz2sWEl8Ag92DfdR9qskPoF3jPvpO/ZDJfEJXP/BOP9ffegT
+L0Vm66VKFcRn+R+BjmXAlLNqohP4IambwMjQqqIT+CxvX+DPLIJJ/c/KRzJ
m5VdTt4XhC8In6QUK0XOI+FXFhrMCVpH6iS89uOVuY7O5LgIX2n8Yd7eF8QD
4SFtAsqr64k3wrtcl6rMnFJFfAK//+DRgtaLVcQncC5Vq/Y9qYr4BL4rZ9rC
l+1VxCfwF6a7Ft2YUU18Ah/xy3+x8+5q4hP44cuflxzwqSY+gadNEV6mk17N
6p88um5hY9aVH5Ws/smjNTPlv9iIVbH6J4++Ybwne9vKKlb/5NHdbUFfl9hW
sfonj954ISdn8oMqVv/k0VHjxb5zy6pY/ZNHCz5ck1s9pprVP3l0fM7LH4/O
VLP6J48eZdae7/u8mtU/ebT5r9mFtrXVrP7Jo99eNi0ylKlh9U8ePXlqaPGK
zTWs/smj7Z7nl8i617D6J4/O0ZIsFUqsYfnMoXuNu631s6pYPnPoze3zbJS5
1SyfOfSDC4ePj11YzfKZQw+dcPfEryPVLJ859J6HxSdLblezfObQLympU6m5
1SyfObTktw12ESI1LJ859LtfafaWJ2pYPnPoKV59Dpuialg+c2i7qepOaj9r
WD5z6JznVmcmjK5l+cyhlbSjzv7VrmX5zKHdCnnO5Y61LJ85dJml9Ll3TwmH
cRdnmBtnjNgb0s8J3zthydjWHvQJPOHhcanvSqROwsdoxIx7uY8cF+FHv1WP
vxFAPBD+3mzqROdM4o3wab93TjrAqSU+gedOzZJRMq8lPoHPixWaMjK0lvgE
flFbY2rnt1riE3h54elp+cJ1xCfwpUefyyYuryM+gV8TaJp+26aO+ATe4q8g
7xpJOLk/iVSMSPzHl6SfE26tsfrloybyviA845vTK19ZUifh0w/GJ9huJ8dF
uNPv1teGl4kHwvO8ZiWtSCXeCJ8/7UCybDf6BF6p/SOlfk8d8Ql8RdHItM/+
dcQn8MCja988y6gjPoG3Cbi+DehHn8DXXUt6Z69aT3wCD5/Zk258qJ74BN7/
ev4HzZv1LJ88Su77GEOPR7UsnzzK6eD6XZYVtSyfPOrHb/fdm8bXsXzyKOUr
qUZq+nUsnzzKc9of4wnn6lg+eVRl7IK9f+PqWD551Aqdo/vKG+pYPnlU+9Fy
kyiDepZPHqXHnWTqdame5ZNHRVzbanaMrmf55FEDM68cNOisZ/nkUTsT3x9a
rNjA8smjnm0QMJcxbmD55FFiFUuOCPgRTu43ovpn8l/tcNLPCfe6sqN/dgE5
j4TXTPMdGCFB6iR85YtMTqcmOS7Cr+sM5eafIh4I7yhaIZj4sJ74BK5vZTfk
djnh5Pp4gYAGoUPrGohP4LsU5YX1nBuIT+CxicbD579oID6BS2wMEhlT30B8
Aj9U8VW0d3Ij8Qk8zVZUvHhLI/EJfJLIGomUi42s/tlOacoq3ha6Xs/qn+3U
jRf779R/rmf1z3aqW+dG2GfBBlb/bKc2FufefbaogdU/26loqxERASR/IeNP
SlBQ9559WAOrf7ZTRgHnIo1/NLD6Zzs1MqkrSmFlI6t/tlPmG+c9ELFtZPXP
dupNxaGHzdGNrP7ZTsmcCovJKW1k9c926pRI8aO4MU2s/tlOfb059sl13SZW
/2ynZitveHrmDOHk/iEbdVVXvbtK+jnh0cUWq6PekvNI+BDre2u8fqFP4MaC
ZVrH5pLjIjw+YIKOgQnxQPioWVt0Fwc1Ep/AjyRdXiuTRTi5H8PkygG9KvUm
4hO43anF6zOONBGfwL+KHN8Qc7uJ+AQ++9bDjT65TcQn8AvK1ZtOijQTn8BL
307ZspNqJj6BL96xc+vyE4ST+4TssV5eff4C6eeEvxI8VXMwgZxHwkcHPqld
10LOO+GWs+rr5smR4yL8fdL0htE7iQfCp24yauzxaiI+gdtXBjQVpRFO7mMx
R1Sk9a5SM/EJ3P3Wqjb3fc3EJ/ByZaf2IwHNxCfwJe/iOjZkNhOfwP13tHaq
clqIT3LfnQbF7nFqLcQncJ2zJj1/DhNO7sNgFajtoelA+jnhGbNcLik8IeeR
cNnkBE+RKnLeCXfc1Hm5eQI5LsLzKudcyVlPPBA+z+7g1bjzzcQncA/RO97X
XxJO7tuwXGWM337ZFuITeOA7fX+t7S3EJ/DWHe7XZl1uIT6Br21MCZBIbSE+
gYef/R3Y3oU+gZ8dfl3vyNhW4g22Th/X7ikux5wt8dDNCbq+fbScrcIV4V7M
0+y+LlH1lftLf5rGTVoggXma6pJ8vf/LR09klTTslcPcrOXf50k/LX361USv
JZiDDb4v+uk3ctd0X21k510D9JFsa7sqM8y1ZP/V/4f+uF7ldN9FzLVK1jR8
0vmvzmO/xe/PDMWcKujRxWqf/+qccK8ub+sLzKO2jlPg/F+dKZveDXXJxNxp
hPObCf9X56G/txfElGO+lFm7V/X/6hwZ5WhS0ENyJHp14P7qOMse2rNtKzfk
B+ZFsFW9OV/5fRPmk4M+e+kiHbG9HYKYFw36/EWf76y5MmUi5kWDPn/Rs2+/
SVo3H/OiQZ+/6Zx1oY2ntNh50W/avsd+UvhuzAkHffbQ+SeXSb8+U8Hqbz20
y7Tx62r8MS8a9NlLz8jqOD36AeZ7gz5/0V/svtynUjHHG/T5iz4l9+DHkR+Y
14385/M3PSXbTSioCXO5T/98/qbfO+xXeyuIedHFue8+WRa10yHj90TszMK8
aNBzB635dsn3CxWYv8G23kpK8Nkv9DnouZP2ndSu/HME5kWn/nnuope8z9or
ooB50aDnLrrcJuqq+jJ2XtRNe0y+kLx/Mzt/a6drbmjRp09gXjQ4Dumgr+rI
Nkdcwrxo0HMHvbDzr3TObcyLiv957qR/hhas64/D/G3Qcxfttu6F/awszN8G
PXfRc3u8o7ZVYP426LmbzguzyD/3C30Ge24w0/VtpKOowzrj32BeNMroUnBR
XBO9qWH1qdUFmL95/PPfTP8KmHrPugXzN9je0ez7fmMo5kWDnltp3eYfghmT
MC8a9NxGtwY/V+lSxrxI5Z/nNjpozdV903Qwfxv00Eh3v9m4f5E55kVb/h1v
E33LSsnngDPmRR//9Z9mes0k4RTvAMyLViaEmA0MtNBN6RXNiQ8xfxvcfyt9
zYaWqUvD/G3Qcxu9fHKI3tgCzN8GPbfRVRm2DitbMH+TTRijGm9ZQb80O96Q
9xLzouv/PFfSeyQ3TBT8gvmb5D/PVbRw8izdeVWYvw16rqafHBay2/UHfcJ2
+1jePfdRVSyfdXR/SlLu8xnsvKiejrQIHlK2nJ2/VdBDGwyH9uzBvGjQQyUd
E6C+YLot5kWDnqvorZqSJhsuY1406Lma7mtq8nEIw/xt0HMNHR6ckRL5EvO3
V555wT7/1am3JqLl22fM35SNRmVN/6/OjlbnyZwqzN+2fX0+oOv7nX7v5XTl
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
Xd/R86D/crrlknlAdQG7P/PnnHJM/QYPhm2zkMV5dBxTv/j22ft6ZuA8GtZJ
vuVusDg3B+fRsE7S8ZHNKXFVzCtgneQCw4BzQYswr4B1kg1DE7ymr0DPsE7y
7tOSoEer0DOskwzUr+8b3Y2eYZ3khl/iwqF/0DOskxwWoTx6lgDOo2GdZPJG
g8kvhHAeDeskbfvsFDXEcB4N6yTn3r+xIHMUO3/Lpqu3/H90nXlcTV37//c5
EY2KJEmiMpQhU4m0jpkyT1HJmIwRKUNIGRMZQhkyVGhAGRLKUpJMOTIWcpp3
86EtJx363ff3bq396tq/56/n5XOfZ59rvc9u7c9e17XW9QjN7cSvVxz7H+uc
pE7S0XtB0+eFPGdSJ6liskvdw53nTOok77+I6vhjFc+Z1Elu8M0y2b6e50zq
JC1Mqyzb+vCcSZ1kQXY7m+PbeM6kTjJ86+DRxrt4zqRO8pC+5HLgYP49mtRJ
jktfmqhty69XkDrJP2v3pYTb85xJneTtznFPzcbynEmd5Jon2Tk3JvGcSZ2k
mdePr8On8ZxJneQXI/3yJ7PhOifD/P/XOaVo1MhbVx3P8ZxJnaSC/XDrwyWe
M6mTTAj9/XDxVZ4zqZNcITF+XnWN50zqJE2qRr33vcVzJnWSH0+5y8T3eM43
m+MPGXOg8tBDnjOpkwz8dmJa3XqeM6mTHHHwnvMOH54zqZP8Yf3VXc2P50zq
JGMLGa/QXTxnUie5+LCZX7d9POfmv2tkOHzivthgnnPzPIDelKw+NvSY4H4W
rHM2zzPIWlVt5oM8uJ4sQzWJfReMl/GcSZ3k5QXTV7wp4TmTOkk3Ne+NrpU8
Z1InqX/n1I4yOc+Z1Em+WvTgwIZ6njOpk9yj+S30TyPPmdRJbrlaqVhynedM
6iQHzm7XquYWz5nUSbJNg9ptucdzbn6OoAtxcw1bYZ5z83MHzXPaah6SwXNu
fk6hdioRVobPec7NzzX09HraiOjXkLNwnbP5uYn6vnZrtDAQU87Nz1lUsjVA
Nakr0fk6ybM9L+uOMiU6Xyc5O+eZ0Uu6fsXXSWruqO7l1J/ofJ3k4z66gwsH
E52vk9z2foj9Wluq0zrJdV6jLuVU8pxJnWSvru7XFnznOTf7HPQta38yW89z
JnWSJ73jH29U8pybfRSaaiLN/kv7s/N1kqov63IPtCE6XyeZ6tupRI+u7/F1
knCdk9RJmobdjjo9B3L+jvLGfLph7sJzJvEfq228n7CI50z+1+FMt8wRy3nO
pE5SPGHMm8zVPGdSJ3nvx/IvM7x4zqROcn1EUNkXH54zqZN0H37KcXQfeh1a
J9m19P7cV/R35Osk3x3NXzxvCI2T1kkGjxSvLaK/I18nOabcfLMn4jk3v0cg
ZeikwIaxPOfm9w50S7L28G4HnvOx/7HO2fxegzovVp+qfpzn3PwehKSa/eef
COM5N783of3JM5aZRPCcSfySZZvWxdH1K75OUtEufKt1DM+Z1EneeJCyJ+06
z5nUSXp4yI5Mvs1zJnWSLirVXCL9Hfk6yQ43dJiRa3jOpE7yufMQjSz6O/J1
kgGq8/Rn0XVavk7S9ua27vm0PztfJ/l9wfm+KwN4zqROMkbtsQ3H9+2ldZJw
nbP5PR1pWyz6tUXKcyZ1kpnvA8WtP/Ccm9cB0I5dV7SOfOY5k/it+70w6FLA
c25eZ0A1n2pML5fynMn/Ru9uP2BgFc+Z1EkusLIenvKd50zqJGe8HB3RPYrn
TOok225eHhNPf0e+TjLNNOi2zQ2eM6kz3Pz6Gk6nvyNfJzlg25vnU+7znJvX
o1BZz5/vP2GeM6mTPJ9jULD0Cc+Z1EnCdU5SJ9m67s6Fci1+/Y3USaZE5MZ5
d+DX30j83g5/kpoM+PU3En/fepP0IGN+/Y3USRZfHPuqoxm//kbqJM9MWfHp
Qh9+/Y3USVoHZB/MuE7q/fg6yfcZVg7+Ovz7I6mTPNxloFqoPf/+SOokwzaN
/qbFzz/0ejMbDhZZDoDrq01IY3rwJbRABXyekViq3T1VvUyw7vpI0W7LxRXn
/9I+suS/j18hil9VzvfZJXrs3DZLFPF8f1aiF25p/PnFvIDvD9qs7zz4E01b
UkD7VhLd6FztgbQI8vlCqt+9Xv528Gei51B99qOirpc70X7hDNG/v/nqYTC7
kPZ1I/rhoo+JQUcKaX8yolv8fNOofFlI+2wRPVP15bh1akW0XxTRlxhkhhSM
K6J9j4je1OdR7qyAItq/h+hnR9w3zXxYBHgqcOSVa35ejwoATwVuc/LWoKbA
AsBTgdG9K5lFSshTgb88v6gz17YQ8FTgLV/OOGdtKgQ8FViv5kTU8JuFgKcC
JzaF1MTXQJ4KPFU3aFg3yyLAU4Ere+wOOOpRBHgq8L4hO16qRBUBngpsOn6z
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
OzXd1UQyRSTI/5Jz3WH+V55TOOzCP+/vSS3mASmaFbLnRco/7+9mLeYBKbrj
2Nstd5FIkP/t3PaF/Oc6kSD/uy1jbWD7nSJB/jffX0d/wGGRIP8b2TBnxIp4
kSD/q5qkeLX7gUiQ/1254cyii89Fgvzvy/72dam5IkH+d0ClbE8eKxLkf49e
CTT49UskyP+S89g/t5gfZOjcBNfq03tEgvwv06pp591QkSD/u/TRxfbvIkWC
/G+m39ho+U2RIP/bx7bMRitdJMj/zvB8XbukViTI/9622BCw869IkP/tVKbX
8ayWWJD/3Rp590qykViQ//2y0Hn4e0ux5L9/8/lfci56Uot5g0WOKe8vnsgS
CfK/1zdvHnLzo0iQ/9Ud2uVpdqlIkP/1/p46v/KnSJD/bSqcGLVgkFiQ/11y
vtJ66yixIP+b4XL42cnpYkH+t7fBQNdbC8WC/C85bzyp5XyCGqymzT2iIRbk
f12rv7PxhmJB/hfHhG571kcsyP9ec0qfN2+TWJD/bafnXum9WyzI/3pJ2+w4
elwsyP+Sc7lh/vdKdJb6waliQf5Xbcnqc1cWiAX5X+eXI7RmJYsF+d/U/fnn
1z0VC/K/5DxqmP+dbTga7zkqFuR/2466kzalUSzI/5JzlWH+V6/j536jOPI7
8fnfZf471V45MoL879QVE72SV4kF+d+W5xXz+d90HS7/3QqxIP97TnXvjF3D
VSQ6/+1Hpn7gybju7sr9hWT/Mn1enzxoXTY7sYDsd6bP03xVrWrveUVkfzTV
/Qza2JSFFpH91PT5mDi5x7pX/uT6CqpPcTO6h1ILyX5t+rxTPFV4V/cqJvu7
qX4i98fDhcuKyX5wqg+qrGqbc6GY7B+nz7sXWtq/xk0n8TRQfUW3tqOSg4vI
/nSqtxooPmjxrIjsZ6fPuw4HipXuv4rJ/neq3zidP/7T4BKyX57qjvGfjjis
LyH766nOpubkpcSXkP349PlYkt2w42E3En8D1XfJ6rKsXIvJfn+qG/+obh8Z
VkzOB6D6AxXWteP7YnKeAH2e9nWQ7s7PLCHnD1D9mcvz7OkqpeS8AqovX5th
8BiVkvMNqC7e+XDJUL9Sch4C1c8fSY6/kkzOCyXjkuGmkBJVm9pict4C1c9e
/DY9xrKEnM9A9WG3ck93WVFCznOg+ruMt8WHooheTnWvD6/6MwUl5LwI6gfG
a6RoOp0k8X+gerFR0txnOaXkPAqq+/dPuDCiXRk5v4LqXSSxFdccyTmTdVRP
nhE1xGQ/Oe/xF9XnLo3YcSyDnCvCn7dpOOPN4RsPyXmbv6metOTFp+6N5JxS
Pg8yy/tJj1CbUnK+B9Vr9+A1qt7kXM0Kqgefupe0OaGUnB9C9V4xt5jKqlJy
3gh57uNFL6+EvnYvI+eTUP3P14v5oy6R8RZR/XTtmd6388nnq6g+VHRyQ88u
5NxFPt+R0/5ISpgTOVfzF9XXmQWpaoTS81iormm9e/p2KUvOb6F+QOXy4fUH
V7LkvBf6vHbs7u4Tp1NBzoehz1Njj60KFdtycp4M1e9v9h7ts6mcnD9Dn4/u
hdP/msoqyHk1VBdzDhNPGlWS823o825Y7+X+fm3J99L5BL23XfS8ZmwFOT+H
6hscnfUW76og5+3Q551/pN3eszcqyfk8VDe6Yy3Vrqok5/lQPTnTynBX7yrU
7r/zf+jzbmb5jLY/P1aQ84KoXvPbcaaHXiU5X4jqwZrjz+ZOryTnEVG9t7Gk
1PFQJTm/iD4fw5f11u64s4qcd0R1G58e8/Y9qCLnI1H97T6jSw2/qsh5SlT3
DNevWj2kmpy/RJ+na2JHHll7pZKc10T1tik2ed+KCP+fVI9+NdBspkkVOQ+K
6qO/WXpmuFaR86Oo/lVunmwdXkXOm6LP61vmeicPTa1G4/47n4rq0220ZU1B
1eQ8K6pXT2xrseFpNdL97/wrqu93FnsXq9SQ87Kobr5GmTpXUkPO3aLP6x7b
TZfMu1VFzumiOj7cNf55bRU514vqrhc61dv1rSbngFG9IVFXcmNFNTk3jOqh
jzWCukdXk3PG6HM/u7Spq6pxDTmXjOqrFA0em51ryDlmVG+jziVWnKwh555R
PbJLTaPr2xpyThrVUT923Ot29Fw1qn+xLwwZNbkWyZv7bDXrODVyHWdnR+qQ
eb8xe+jbDrNUNYjvor6ijet4/S7rNYhPo/pKg/KrNjtJfTXvN85XxwwdOJxc
n/cb4tjJWVMmaRDfSP3DLL2uwxoiST027zduS/Hzjrc0iC+leqdDSxYMSief
5/1GRbS/UztPEg/vN6YsMa2w3E7rrqmeYJzpNzGY1LHzfiPiZd38jx81iA+n
OnPgZFVdqQbx7VRfOs52p069BvH5VM8UfdHt11pTQvrI/qez2NrNaUv1RQ3y
HkH1MMPfGuqJGuS9g+qNH85G9HxE69upvuA4GjjmNalX5P0Gu/v5tjsapJ6c
9xuOo9Zq5xiS+mHeb1z/0+5iTR9SJ8z7Dd37Nwdr2JL9iRzVvX3mZPaaqCkh
fXD/0/95juv3P/PivQZ576N6UY60H1tMxsv7jXEhGx+14sh4eb9x1VF/VncV
UqfN+w31tvdKRrandcv0uT945MVzxxGtc6b6yYYxVglTaV001RV3StNfLqB1
1FR33XBgTvkaWndNddy/L9vaT5O8p1O9e2X21h4HSX077zeeZ7dKjVEj8fB+
o//BK9MyDUidOe83jkxwKCzsRer5eb9Rp1Lt3WRN69KpPudRSBuj8bSOnerJ
foNOD5tD697p833HT1/stZHWyVO9INFw5uEAWldP9TGeqcWxR2kdPtUvWyzy
fXqB1u1TvW2ZWL34Bq3zp/qayOizDCbceL+RvXDigK7ZZL8A4cbviyf9fYlO
9tcngboIsi/+GKh/IPvfP4M6B7LP/RioZyD72Y+BugWyb/0YqDcg+82PgboC
sq/8M6gfIPvHj4E6AbJPPAnUA5D94KQPENHJvm/TFvO2DGnftryz6Dbdr0F9
WlpexN3exloS0jf6P51F89eIP9qzmmB+ZtGD3tErXX6Rfce8T9M8vilXdSap
G+d9muc0gzWmi7XgPIwizXIVRkZacB5GrQu2HbS11ILzMFp5zth47nCyn4L3
aU6OkxuL95B9prxPu9em9pDoBNlHwPs0o4yjJsZRpE6e92k1X24YNk4jcfI+
bXr4zGudFpI4eZ92a85PNMRTC8y3HNJvH5YzfbsWWX+m/uqiimnXx/e0yHo1
1Vs9enLjWxbhxvs0D78Vo5UfSfy8T3s2TOO9QRnZN8r7NNsTe+1yA8m4eJ92
Zkaf1z+PkXHxPu2v1svF7S+RcfE+bclzT65/ohZZ/6d6xl7dfY6PtEi+gPqo
qgcN9hertcj+MqpP23z2TapSi+xHo/rNIWhZnoY22b9Gdb3vBfX1hqTunfdp
vtd2H+hgQfYb8j6tTI35/jaT7B/hfdqkzEuB8vdkvLxPiwsYp69VQvjwPq0d
Yq/24cj9z/u0DY1BI8araEtutpgnlcjaW7poZ3dtSe8W86QSnbbaWHfGSlvy
tcU8qUR/qjruTUbakp4t5kklWhSTbPB+qnZzHoT3aWnuLnHfF9B9kVQ36/F3
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
0M/6iW4O4jxSVHMQ57qjmoPYPwgArqadEA==
     "], {{
       {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
             "]], 
            Polygon3DBox[CompressedData["
1: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
Sj10j7pX3+T6A8B+8K7mU3gYvDW8E/wKPATeCt6hETXWWmuNVftbw6xl1ny1
9Rtcvz/Hfa0pXP8SvBfcCx5ofoL3hLfwb+DX4f3gbeCd4VfhoXAfeEf4W+s+
nz7OTw6NolYZUIX2vrVecif5aw33FrwsvABeHf6Tay6AD+dvmjVCw6hl1Az2
IrdwfWuOZ3H9ao3QDGqHravo/e6vR62z5m3C+L3wxnBX62Yjara125pubzCJ
8eEcb8e5weYz+CC4P7wb/AC8pc9iDYUfhHv7XdYE+CF4K+cW3hx+uB7P7hxs
AT9SDz22OtwLfhzu73fDW8GPwdu5FnBv+Nl61HZr/LbwM/DO8IZwv0ZoKLWA
mkDtpmZRu+xaRS/2KNdv61xzbkv7GfhgeHt4D3gKPBrewXvAb8Mj4AHw7o3Q
PGofNZG992TGR3I8kHN7Mv4CvAe8uWsKvwuPggfBe8HP1UM/bQpvBz8P7w5v
BvdvhKa0t1EzqTXbs592g8fBu8E31xeXnep31renerce/fX5XDPG+KpHbjfH
meusgdZCa6jaS401rylqptrrG66/i+MLuP4Q46Ueud+cYe6YAd9dRc2wdvwM
v1hFzjB3zK7H3ncPu5efqEXstS754rt61CJrirVlVj1ykTnD3PFK0Z/+Jn/b
a0X/Gf9qideLHv2zKfqNmfz9g1XUOGvdqzn2x/ym6K/m1SPXmGPMNYt7rqb4
DnuxX+qR68wx5ppf65FrzFHmqsU9TVP8BnsdNYZao00VvYQaQ62hxlCb2vNu
a+2tohe+sx652py9rrWzHlpOTbeWtRNeHm4GrwnfU49+eTl4Q/juemg5Nd0G
jdDMxqIxqZa+i/F1OO7AufXN1fDacHt4vUZoJLWSGsleaqkUudCc2Je/v4Pr
V+W4FefWcb/Xo/ZYk6xNP9WjNlmzrF1z61G7rEnWpvvgTeBu8MaN6Jntne2J
9R5+qEdtsaZZ2+bUw7+w5lh7bq9HP94SXrsRPYu9iz24XtMiPudzfBjnlvL3
qTngYfDv9tPwOfBouObz5/BLxqTwq/Qo9Cr0fE7N4fmcWPTCKTk8Ir0iPY3T
ctR8a/8+KfyxK3L4I7un8G9aFb2h/jiZsety+EFDUvgxekx6TXpQExg7I4V2
mMnnzBQ5wdxgDtgnhydm/VaPnZnDw9HL8TvPyeHRnF7q+1nqpxS19zuZ421S
6Lnrq+gvF/I5j+NDObdkIzSYWuy4FP3s5Tn8n91S+EtqBu89OIV/paelt6UH
dmEOT09vT4/u+Bye2LlFH12Qw0PQS9AzODiHh6GXoQcxKoeHoJcwER5homqE
N3EGhyNz5ChzlTnn+hwenPpL/aae0yPUK3SOL4KvzfHb9k3hh6l/zG3mOPWs
Gk+td2AKP1ANoZYYncLP9Jn11rzGubglh982PIVf6RyoF9WDzo05elDZb/vm
qAnWBnP83jlq8ILS3zSH91NTmutSxOf+8OFw9xR+yVA1t7Gdwg8ZBh/iXknh
vxyoRoNXSOG3qCHUEmqM7XPUEGuJGmNADs3Rq9S3gTl63i1LvTA/HJnDv1kv
hV+k5lB7qIF2ZuzsHH7Ktin8v3E5/Kp1U/hNaqZ+JZ9Zb4xB/cp+KWJTzaR2
UtPsmCOG9WP6poht65X5UM2wu3qcz1iOe6Tww4bnqGUrpvCnjIlj4FVTxIox
6N7cIUVsGmNHw6ukiL3FMeF3p4gVa7T5cYx7MkeNtlZb0/fKocHV4uNS+C3G
5FHwyili1ZgdD/dMEctqGrWNNX9P1yaH/7VOCr01Rs0Mr54i/xyaw09bE07w
4Tn8r7VS7MexJX+tnSKf6fHp9ekBjs7xOZbj1VKMqbHUWmqsPXLkBPfidily
xUopetMJnDsoR8yZG/1OY9H9P5XjY1P0ZuY36/PeKXodez7z+34p6rk9k/V4
rxS9lD2Y9X/PFL2ZPZL5f/8UesKezXq+R4pezh7CXvCQFPndnnC6uSNFr2jP
+BF8Qope0h7jPfioFPrBnuAD+JgU9feGHPVoWAo9Yo/1qbk3Re9lD/kxfGKK
3tIcYr0ZmiK32FN8CI9PUf/tId6Hj05R7+2x3jRfpqhP5gt7kVEp9Is9sHpn
5xS9sTnJ3LR9it7THtLctVOK3tIe1V62f4re1R7P3vfwFPXTHs5ecWyK+mkP
e5t7OUW/Zg9ob3xYivprTjO37ZKidz8xR3+3WQq/wB5LfTMyhX6yx1ePHZRC
D1mjrFWbp/Af7OHVOyNS6K/Tc/TCfVL4X9YQa8nWKfwle0T10MEp9J89/Cfw
SSl6e3vCz6ylKXrFu9V7VfSER5aco1eth20ucg9Ym/5exd7YIIWXpad1dI4a
67sSc7K11xyk931BFbnJPWevoyZwL7qH1AbWPPeWOVSvTs/O3KonrDes/3pM
Ds9Y79gcdmyOnKyX7Z40V5uT9Ord4+Yq30n5bsoceVyOHKWXbk41d7nH9Xb0
eNz7vsPxXY45cHyOnKA20dM3V1iD9Zbdk4trcy30pPpMf84ebVbRl/p96mdr
vp61elM/wX7cGDKW7K/VGK6Ba2FOs9+2XzfXWfP0Y4xpY3tJjr+vwqM4rWgk
3+2pEdROD/GZUtZuojkQblmunVBqru+irKnWYnsOew/f0ejv6Qe8wPENtfh7
/Re1ojnD3GFN1g/Rz7BWW3N9V2hOthZb83zXYA2yFqrB7CXMWeYuNZbvvtR4
ai978L5Fzw7OUcN8l6XGsba5X9V6A1NoCzW2Wrs759rk6KkXFn2vn+KnJ8fv
1GLMNfDaV2uxNtZ49fLbtaj9nXPo30+Lfu6Uo3/+pOhZPWT768+K/l8nh1/9
cy36401y9HsLatHvqs/tT+0n7R/Wz9HP/lqLfnm9HP7HL7Xop+0h7CX0dxf7
vbXwe/Vz9Wd956ufoH9h/+tvUmv7DP5Wewp7C/1c/Qd7UHtRf9N2OXpQe1F7
2P45NJD1rksKbWSNPR5eLkXtdQ+7l9dP4Zf6nWqTP2vxW9SMavFBKbSkc2Jv
pD/lXG2eQ+ssqkW/rz+i36yfrl/hM9oPfViLZ7fHsdexB+qeY009/qAWa71p
jt/+Ry36e9fIXsc1du18J6B/MK8W/oOeywD4h1r4Iavn8B/mlP7GNdPb0NNw
LX2/oJ+iX6SfMDuH9lCD2KvpoeilGCOr5biHvZIx4b39Tr0P/Rh/i9+pF6N/
7m9xzfVK+lQRC2pG36WpMdSSNv9cUr1SC//rjxy51ZxkbjKnmFter8W7AN9J
rAhPr8W7ilk5tJkazd7VmNKr0aMx1uxB7UWN6Z455lCvRA/GudWD04szRrd2
f+f4229q0Y+6Js7V17VYKz0bvRvndLMca6y345y79s6R955di7kzJn32GbWI
Vd/p+W7PPdQ7x2/Sv5lVi9/qPdXGC2vxXXpAekGu8TY5+qWjSn5Wq/pOZ0iZ
T/O3e1DvyXu6N/WU9Jb0i+yXfcfkuyb3YJ8cNXNcqV/WUmNePTax1DPnwN7c
mHVu1DB6K2oKtY2/ST8xpfitanL7h9YptPouOfqHNin8SjWs+rhjCm1rD6Je
7ZSiN1Hzj4YbKXoBNbn9RqsUWt2e11rZK0UvbM6032iXIpfak6o/O5de1Zxu
b/N8LXL9ySW+tkjRC6tBxpT6pzZRo6qnO6TQrvYM6vtlUvQS5hC19NIpcotr
aO+wRIq1VQ/YL9pPWq/teey16il6ITW4+n/ZFNp81xz9RNsU/uriNbF2plgr
c5jaOafIbUNLvfYZfBbX1NqxZIq1tqeyV2ieotcypvVvayliXQ9B7bFlCm/B
nstevkWKXszf7G/fMIX2UAOcAW+UQhuoIdT6m6TQFq6pXrTf4VrrQah1eqfw
JtT3u9diTu1V7MHVEpum0pvn6LU3TqFtnAO9ZmPKudGDUHttlcKbMMZdqzVS
xP7/AdvPUOw=
             "]], Polygon3DBox[CompressedData["
1:eJwt1mXcFlUaB+CH96W7u11KQYGlG5FOkZaQ7pBWylUBFcE1QBQxQRrpRnTt
xVwVXFBwXWPXFVFBkN7rhvlww/u/fveZmWfmnDNTbtD4ruPSUqnUNpVJ7cqR
Sp1PT6XqqdvkOllTqf+xoRlTqZfY22wN+zZcLqFqs0ryz/pG6VvNDrKN7CQb
zdaw99kr7Cc2jK1g77C1LE+2VKodu5stYwvZb/rGsfXsI7aF/crGsnXsQ7aZ
rWTvyVlUGZbOcjteK31T2RL2QFyvSrHqrL0/G8u/GDuGrWUfsE1sNTssF1I3
svysoOPdpu8+toItYT/qG8JeZG+xVeyUKs+6sglskPyDvv7sGfYqe4GtYV/I
hdVNLF9ciyqjrzMbywbEPVWlWEc2mvWV/2PsALacHWAvxn1WpVknNob1l7/X
148tY/vZ83FPVTl2KxvPBsaz1NeLLWG72DL2DevBnmA72FL2XzaYvcDeZKvZ
eva1XFrVZcXZd6yvvqfZPvZcPDdVlnVh49gd8jp9x+VSqg4rFueN88jF1J9Z
BXmtvmNyyWSuFWUvs4/l3Koiy8aye0ZNnWM8e4T9heVl7dkM9gxbxHYae0au
pTqzmixdXx19w9hcNo2lsdpsKLufTWVF2e1sAduQ/LZMrB4bweazu9iJmIOs
CevDOsRzU3/IlVULVlvOaGxdfcPZPDY9nlvcL7mcasiqycX1DdL3WPq1tfoy
+11VYN3ZJDY07p06J1dRtyTrt4CxXfXdy15ii2NOxlyQy6tG7MaYP/qm6VuV
rN998SxjXsplVQNWVS6ir4++h9h69iwrwUawpWwv28AKs97sQbaOLWer3PtP
5DyqEsvOiukbqO9RtpWtZNv1nZZrqo7sJpZfX0d9s9iz7K8sF2vJprDFbD47
ra5jt7E72WC5kL5u7H62kj0Zz8g5hrOV7F22jn3GSrI+bBrrE+vP2AnsefYG
285KspHsqWSOx153ytiJbBP7jO1gOfXdwiazJ9g8tkPf7zG/VSdWI/YSdSX2
AtWONZJzGNvC2EnscTaX5WMd2Ey2nD0Sv9fxJrHN7HO2k72v3pav2NxzsitZ
7G/sHZZB5WIp+TVjMxp7M+uPmrMDLJ01Z/1YM5bFeRuxMexhNpu9ri8Ta8EG
sJvZp6wE682mst7sVZbGmrG+rAl7j+VN9qvY1zqyi6oa68dmsnFxT1R1dgeb
w+6UL6ub2AA2m02Ifd311WAD2T3iRPa1c3Rhi9gr7DH2JWvD5rFV7EH2JsvO
2rAhrDXbwL6Tr1ONWbl4b8V90Fc3eTe2lN/Sl4O1ZUNZm7jvLCdrx4axtuyS
upH1Z7PY+HgW+nKx9mw4a8feYNlYazaYtWLHWWe2kG1kj7K/saysFRuUXMvH
rCjrkewHPdhXrC2bz1azBeyCqsr6shlsrLxJ30/y9cm+Ee/zreykXE21Ztez
LexnuapqxarEnqYqO16v5JmPkP+prxmbnazV2IvPqSrJ3Ii1NVLO4LnVYkPY
fWwKO6MqJr9jMhsmH3G85mwOe47dyzazE/INqiWrzI6y1vrmspfZQ2w/y8Ca
sttZU3ZWVWI92RQ2XP5IX5FkP53IurN/sOLJb4u+XuwTViwZG9fXk73L8iTv
6VGsU8w/9W+5QNwvVlo+r65P9pfpbJT8gbEFk2+GeCd3jfXLCiTv6Xhf3soO
svzJOzS+D7qwv7N8yTdDvPc7sw9ZYdYt2f+6xbuCTWZb2CG2ix1jndjDybss
9tPDrD6bxp5kM+JesalsG/uC7Ynnqw7JmVVpljfmgb7p+nawI8n74xy7i+1k
R9l+toK9IZ+3NxVhF+xNF9gMfbv5V+xArK3YO+STaVc/21Jn9V3UN1PYw4+x
12K9xZ4l/5p27Rv2D33n9d2tbxf/kr0a6zzmgnxCn/9SZ/Sd0TdF31ZwmO2O
vSnWl3w27eoWefX6jsQcZNljT2CF4t7HMeUL+rKzS/oOxnWzS8yhU5fZK/74
gVVQTVn5eEYxZ+R0lZtliBx7qvy7sYalzvvnaMxplkP9iRWOdR5zQf5FXwGW
KeZkzBn2GyvIMsf+Evs7O8Uys3OOd8m1zPJ79/Lj7PWYo6wnW8x2sqfZv1h3
9jjbzp4KU9/KBWNPYGVif4mK90n6te+w+DbLZk03MXYcW8TuiT1MfSPnj/XK
SsW7Ntac/EcyD+Ib7tO4N+wMKxyvqJincW6WL/YnVlLO6hyNnWMsW8jmxFqN
tSSfNrYQyyJ/7nfcoG8kf4CNYdvYKbmG6sCqx3shSs4Zz4kVkffouyg3UN1Z
PbabXZDrq26sLsvsWho6x2i2gM2KdRS/T05TJVlueZ+xl+VGqidrwL5gDYyd
zpayu+Oa47fIl/2O4ixn9IWzjKoUyxPPTf0oF1e1WEV5r+NdkhuqHqx+rFNW
0zkmpF/7Lo5346G417EIVAn/5ZI36vs+5plqwsqy/wM3E8pH
             "]]},
           Annotation[#, "Charting`Private`Tag$77357#1"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
           "Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 0, 2}]}}]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
             "]], 
            Polygon3DBox[CompressedData["
1:eJwtmmWgHdXVhu8Jsy+cydzgBAsahRgQIQGCBw0SoFiheAsV2uJQhUKxFoq7
uxWX4u7aBFqsuGvxYt/zfO/8OMk8s0b3Xnutd625i++w+/Rf9Ovp6dmJfyr+
/3G3p2dap6fnotLTc0JfT8/v4Z3h2+EL4enw8vAx8JHwQgN6er7lxF+z7yhs
H7HvGHh2eCl4L37rs309x8/PsYP4fY99T/b9DdtB/HZl+27sl3Luwti/w74H
+/6CbQb7P4M/5/cP7P9j393YRvX29GzMsUvXPT1bw69jHwj/EfuP4Ts572KO
X4R9PWzvxb5jsS0Kd+C94ePh0XWexXt67/3Ztx18M8ecx/n7wtvCN8HnwA/D
x8Lfwitz/CbwJK8N/wX7AfD28C3w+fBiHNOP7X3YdyK2/fj9iO1/sO9c7L+F
d4Jvgy+AD4R/At8FXwLvA28D3wifDY+qMzaOuWN/BPZfwY9gvxr74uybhe19
2Xcytj/w24XtO9h3EfZ/wqfCvYzfGhw7kuvtAL/P9RaA98C+JXwNx5/J8b+C
N4evgk/3/hwzJ9uHsO/v2B7hd5zjx75VsO3Y9PQ8AG8Kv83xv8a+BXw1fAa8
Lfa74Gnwa3Dh/n3wkdz/fXgk15gD28Hsu4JzZ8Hen+1Dsb+LfTT2ubD/mX1X
Yq+wN2wfjv097L3wAPiv8Afw0hw/O8f/iX2Xc/yScC+8P3w6/At+m/ku7DuV
47fj+e6FN4bf0H+43nLOD9ebjXN/yvEbw5dhPwX7UuwbwPZB7sM2GJ4VPgA+
Ex4B98EHwpfAg7jesmzfyvVmxbYb+zaCL+WYk7neT+AN4IvhE+Ffwj/wXeHT
4B14vvvhTeC34O3h++Dp8Jvw3hz/Q/gG+Cx4V3hD7w2fBO/E8Q/Cm8HvwH/q
Zv3cCy/I82wET3RtwkdgH8HzTodf4Hnnxf4u9mvgQfjPNPjP8M/hBzj+Co5/
Ar4Q7of9IXgI568OP8b5c3D8ePY/B7/Kb0W2h9eJD09jnxv7gZxzHNv92DeS
a93E729sv8v178b2PHwePIBz1+b4u+CT4U+x3+f78DuB8+dk32RsN/M7hu33
sN/TlzlwLp6H74SfhC+CZ+F6D8OT+f9l+BV+K7C9Oce9zvZ/+A2DhzVZH69V
iVcvcP758OzY1uF5hjbx91errN/nsJ8L92FfC/uQJuvplSrx6T3s18KLYN8A
+0Pw2fDX3PeBNt6cA38DPwjPhE+HZ+P4qRw/Az4NnhVeEx7GeK4Hz+T6c8Fn
8/9rzh+/CRzzAMefxfb/uN79XG8XeCX4Qngejn8NvgweyLHr+z5cbw34cccU
vhP7SfAnHH+v8Qb7CvoP9v7YD8f+S/hh7Fdh3wKeYiyC/6r/wmvD58DHwVfD
hzme8F3wevAyxgP4cPhR+Hj4e3hVrv8qfCk8H8+3Hrxknee/n/v3wUvAK8L3
wQ28uTEePonzB8DrwGOMF/ChXH9deCx8BHyY6wleCz4bPhbehPm6Sl+F/wXv
iH0d+Fz4eHhR7jfO/Mj9ulz/EOw/83mwX479YPinPg98GfwUfDFc8fyPwIM5
fzX4UXMm53+iz8JDsW8Ebw2vCp/G+X/j+K3gVeBT4aPhLeGV4VPgo+AfwVPh
s+Bj4MfgE+Aerrca11uM+403H3C/Gj4M++7wQxx/pfEM+ybwi9jnw36oMRJ+
EPvfsd/A779VctQJ3cRYY60xfHg387eEubskvg1g/CaYj6s8jzHlaraHdxJr
+jeZj5urPH/TZD5uqfJ+fU38wXjp+//JvGruY98anD9vk/F4pEr8nKfJeDxc
Jd4dx/HXsb20OYnj527ijw9Via9deAR8bZX8reZ5sMoxaqE/w+fBC8Krw4fA
55or4VXh+ZrMj/NnPvhBnfU8pSQ+zd4knt5VxZ/maKKf7q7i/wfzO8m1arzh
enM20RP3VPGvxZrkh+er6JFFm8Tz56roh0FN9Nq/q+iDWeFhnYyxY/19f94R
PgQ+CJ6tydhfU7X6rYk/z6iS7x1jx9ocpe85J86Nc6KvOSfOjXOiL+5ZkpvN
0eO6uYf3quFluxlTx3apTrTSgk3W/z+r6IH5m/jrk1Xy25JN8vFLVfTmEvCm
xt8q+mjxJvnXfKS+WqDJen2qij4Z3CRfvlxF7xhDLq/ik/rmIk3y67NV9Jxr
/jK2F+8kFgzEvibbT1TRA8ZwY7kxX212T4nWNGeaO41p/6jiw8a680pioTFx
p27m3Ll3zo0tzrlz7xwbC51j53pyJ7FFn3J+DizxNX1YX9bHzeX6oP56UIlv
6jM++29KfEmf1rddA2oJfVLfNMaoXVwjrhV9Vu2hz+g7jola03f23Z0TtZFz
4tw4xmoRx9ixdg7Vho6hY6lPqpWdU+dWn1L76VP61rqdaEtzurn55yW5Xh9x
Le1R4jvXluQuc9ie2DpNjneN+H76vL7vmlBLm+MXY/uAktyvj+gr+pDaWh/S
l/QJaxk1yttVNL3axZj8ZhXNZKzWZ/Qdc7Ta2RxtrjanW1sYw4xlrmljrTH+
rSoa3divJlAbbNVJbeOade3qs9YWxtB3qtQAxlZz5HtVagZz5zXwB1VqgiO7
8XF9XQ1mbWHOurTKO5vLjNnvVqlZjOXWAGp5Nb21wXXwR1VqgGPUGvCHVWq6
o+Hr4Y+r1EzHdaMZ/1Ulpqgl13LN+KyMbyGelSb3ds24dnYu0XRfk2IGdxMD
jAV7sf8L7OO70ed7w18aO7rR4h/AE7jeNt3kzzNL9MWt3Wj/D+GJA6Lf1Nbv
ex/4tm5qj4/g5dv8aKw6vSR/vgPfCS/Um3ytXrXeWBj+t3MP3wEvCD/j2HSj
p5eAn3dsutHTi6tTzXXd6OXB8IvwD7upB84o0bMfd1PvLIn9Bey3d1ObfIx9
EvYPuqknFsP+LPY34Nvg+eGZ+g58O7wA/LT5Ax4Fn1iiZ4whxpLzS/TchG5y
7T7wV33JgebCg+F+2Cd2U//sC/8P+/Ld1OL7wV+38cJc81v4W3hNeGF9F56F
86fBg+GjSvTMBvAQfaVEL6wPLwn/taQemgoPci3BFfwKfBM8D+8zg+uvBM/j
2sP+fV98WF++taTe3LkbvXZBif7/WTf1whUl+sOYZey6vKT+WNEcDv8O/o7r
bWZMgU8o0XvbNJn/9eFX+5Lzzf3Hl+jTKWoG1zbcA69sDndtwx342W70Xn+e
//G+6Per4QZ+wljpmoNr+DH4C/hxeIR1Q1/WgGthl5J6tQc98C/sy/WmHv4G
+wx4DPw6/Dn8GDwcfqkv/Y2n4JG9qY+/hJ+Al4JfgTtc79/m2t7Ub19hfxJe
ujfvOxT+xj5OST38PfyMubg39eJ38NPwMr2pF62h7RW8UlJbX9NN7foGPBa+
Fv4N/Ca8jL0eeCY8tjf1cT/Ge/5ONJH5yp6AvY6XS3oFszSJ72oo89XmPP91
8Mol9ZI1vr2Yl0pq/94m+cycbe62XrPf8UJJLT0GLuYe+DNzKXwE/Dm8AvaX
4BvguXi+p8wFxjh4TvhJ+Ab49/A7HD+O41+Gb4Tnxv5P7PeqWeAvsa+E/R74
SPgLeEX4GWM43OX4Rzn+PjUA/BX2KdjHwr3mPvhz7NfDv4PfhpcbkJ5Yj7m4
pFdmT8Le1H9KehWj4Fng3eFP+tJTsD/1Ykmv4Tr4t/Bb8LLwaLgyN8Ofcvww
+Ftu8ZPS9lO6qaV/Af+3Lxr9O+y7lmj3EfD38G7wh8afJuO1Wkn8m2ncd23z
W2JANKPaUQ1iL9AacJ6SGs7a0BrrgSo1mbWXNZ3n22+x1rNnt02Jj+vrGzcZ
z8kl8W+7OrX2S/x2YHsS4/wDbA/DO9YZ4xElNbBj7/PZFzytm36OOWWRkh6d
ucYxmr9kDh07ayqv91AntZZzskDJnDtX+sSCJXOqr5hzBpX0EMxF+sTwkppb
XzFHLVrSAzN3DahTa7+oPqgTo65o9aexyx7D4JKehb0Ha8Ah8Cmd1IaF9x1a
0qOzV2fM/HuVmGssNWZsVJJTjCXmlFVL5sxc8x9jfm9yzGfd5ICLqsRoc4M5
67FWD5rLzN/qdWuEbevkhMtbPWyu2ITjz6kSI3dmrj7Gfry9HGOOawf+pEoP
96RucszFVTSDuUfNcGOVnKaWcA0uW9Ijcm2awxcrqfHN7ebMxUtqVnOpPcoJ
8CXteJjjH23169bteI0vqakdv/Xr+Mbwdv3qP/Z0jJnGzs3q9K9WKunH9PK7
qUqPYO1uepijS3o29jbNsRdWyZHm3k05/3LfraT/Yk09tqQHZK29Xh3fGNbG
i03q9FMmlvRn7GGMKelh2duwhzyqpMdjr2d6nf6G7+y7P86+E3123mF1eN06
vjG0jXc+g8/iPewNDelNb0/NonZRQ9gbMceqLYzp82E/vJNYb49uyZKejr07
rzm09Udjq+8wrPVHY+FnJf6q/9p7M4deWUUzmFvtIT1Tpadnb2l6k3y5Qone
cgwcC9/R3tUGdcbaMXAszOH3tfWTuX1j7Bd0MsaO9YZ1xs45cq42bZKfnU/1
3UZ15sIxdqzXavKsPrNrzR7aoDY+ON7GDr8t2KMxhthDnLcdH99v1SaxzX3a
Vm7SP7Snaz/xdn5fV+l5XcDxd5jjq/TkL4KncPwf1Q8l/Us1qb0kn1mtumET
39WH1UvrNun/jSzRH+akca1/m6vUHEuXHKMWuU3NUKWHc14354xs/Ukto2YZ
1fqzWmadJv0/r+G1zJHLlfRAzZ23qimq9HzOgddlDFcpydkvqu2wf4p9N/gU
56/JuT6jzzrZHlyJz97RzRg5Vge18XO9Js/mM/ls+vQyJXOsr79e0p8/oPXP
aU1ihc/os+p/+u8RrX86po6tc2KveEN9xLmB3zfec/4VbE8q0dv2fP12oqZQ
W1hz2NtUc1qL3KLmqtLTPqsbn9K3jBnWEtM5flvfFf4avlkNWKXnd0Y373yo
a69kLLyn9zbHqf3NceY614Ta3x7vwm1+sferhr6hiqZVW6vJr2/7V2r1CU18
1Xt67/FNYq9z4tzY012opGdur3eNJtfW5/V9Ne5VVTS92neFJr6rz+q7U5vE
AnOUuWpSE1/Qx/S1pZrUutbQ1tKTm/iea8C1sGKTb4GOsWM9scnYOKaO7fJN
xlYf09eWblKLWxNbG49oUotbU1tbj2pS21ojWyvP25vYaPywF2w/8NpWj9gb
GdukdrbGtdZ1TY1v84e1yepNxsYxd+zXhs+ElyrRc6vBR3cyho6lMcvYZU1g
7WiNdV3bz7L2WqZJLW2Nba3tNbyWa0ytOLJJrW+Nbq0+Bt6xkxrfWn90k9rf
mt3afdkmtbo1ubX5ck1qc3uu9l7HNem9mnPNvevUWWvmTHPnNPiMTjSSWsma
dU01UpsPxtbR234T9dvoMnX0ut9E/TY6po4e9Rut32qtuV5o+xfWYtZkL7b9
CGs1NaW9GXs0I1v9M7ATzaB2sObZtM1H1kJz1MmlF1TpB8xVRyuoUdQqaky1
5n7sO7Wbn3FmRqs/56yjZczJ5mY19llVajq1t5r5lCo1rlp69jr1sT1j+xFq
5NOq1JBq57rOtud4rt/APmvjm/09ayS/rdkjsHay5vHboD0CayE1slrZmsPe
gT2E1UtqCnsLfvN+o+0X7tXqM78jqXG3r1MDv9/2f6yN7S9+2uop+0fWbH7r
s8dgLec37tfb/pL9sTHw3CUx56puehBrlNTgH7d6YGrJNwX1rv2119p+pv04
+5Uz2n6d/Uc10UptfjJf2HOY2fbv7EVYoz/d9ues3efmHRbtRPOp/frXqfcd
Y8e6r452dI6cq+Gc37+kBruQ82et0584ukr9MQT7bCU159nYZ6ujNf2bAuul
gXVil5pD7TE/PLSTmGZsU5N29M0Sreo1vbY9EWsdNfGjnXYOsG3VRCuvU1J/
W1Nv1tYH6sUtmsylY+rYbt2kX7NuSb3fj2Pe6OSbofXJlk3G3jX3//2iJv2m
9Urq982b+Io+oq/MV0c7qfHV+kP0oU6+karH562j/a0hrCXmqVNLqNHV6kN5
525JTXhuNz7h3FxX4iv6vL7v9wt7c5O6Gc/9sX9j7qyzds6oUk/7c9s5tNa2
h2F/336+vY0F6+Qmc5K5aYE6ucmYaGy05+C3eHuA9iKGsa8uqYHPh7t11qYx
w9hhjeq3f3uE1q4L19Hi1gzWDs6Jc+OY2ytZqE4tYY40V6rZ9b/DSrS8Odnc
P7o3udoYNLE3NZmxyTVibHm1ZO0Yg4xFxgh7lavU0RZqDLWy30DXateP30bN
P2u268t8Yk/Mb2n2MO2VrcH5R3VSQ1pLLlfnfv5Nhn+bsXwd33dMHBs1itpq
0d5olwl15tI14FrwG+fUNn6b77au834blHwv/mGd2tia1trWb25+v/H7jN87
xtXRUmoq//Zh2Tr9Hv8mxb9NWa1O7WuNbK3sNb22f2Pjt+mJdeZOH9PXxtdZ
m/6Ng3/r4BpwLejj9sL85jWl1Ut+q7eH6LdRe6b2Fv0e5/cOv3/4Pcgeon9b
YQ/X3qI9IXtDfkPz2/pKdfq9/k2I/aGt6jybfz/i3x9Mgv/QSUwxtqxVp5a0
Jrc2X7lObPRvRuxvrV2ntrTmtPZ0DVxSxYdcG1Pr1PL2EOwleA/vZQ9Z/bdm
ndpBPWVvYEqdfq9/E2O/a0v4lk58Rt+xhzetHU/7HfYg/T7k9x57k1vU8S3n
2LlesU7/279ZsR+kHrb2sAaxf2IMMZbY47Q3aE9uYKuH7dWtUKe/7t+k2C/y
+5y9N3twfmvZpo52tQdjL2bVOr0Rr+G1JtfR6mp2+21qfrX5HL2pBewxrt+O
h73H1ev0Suyh2Ev5Pz4q2lc=
             "]], Polygon3DBox[CompressedData["
1:eJwt13WYFlUXAPCX2EWW3QUFBelclpBdpJYQEBQEkZKWkrIB/T4DPxH0U0Al
VbAoAwxapRSxBYMyULELBRNbQfB3nnn/OM8z57fnzsw7c++5s7VGTeg7vngq
ldotMkStrFRqvoMNJVOpxsVSqf6lU6ly7Co2k+WwlqwEG8emsyPG5bHabAHb
yE5RN4CVZBewW9g/6uqzDuxzVkJMUreOlWVXym9Vl81asI5sPyslrmNPshx2
hXyJulKsKctml7NFLJMVspHsGcdn8aLMVOp8eT2xWP6suub+NkzdSWwKW8xO
ZO1ZKXYxm8NSrCHLZBexWewYbsAqsqlsKTtJXYe4l+xU6j72OuvABrO66hax
rawZG8qOZ1ez2SyXtWKV2A3sAVaRdWQZ7EJ2GzvquvmsDruLbWJN1A1khWx3
vLecVOpO+XzRiK1ne9X1UHclO5FdzxayCuw0VoVNZ4+w6qwrO5ndzJazquxM
VoPNYWtZPdaTVWOz2GpWh/VgKc/gWjafLRA3uafi7Eb2uLy+uk7qyhs7id3O
yrHWMV/U3cqeYpvjfeaaS+p2sCecZ6aaWaKYuuvYSjU1jW2Tvu7/2Ar2WMxL
9QXG7mLrHd+u5g5Rk81l69TkGduLDWOnmCc9+UvsMKvOZsvXqKvLzmFDWZ66
rnwL+5U1YTvlT7rGXPk8kc+Ws23GnqZuHKvPlrFXWDs2Nt6ve76NPc0KWDdW
ht3LXmPt2SBWmt3BXmRFrC/LYvewV9n2mEeeVQn2/3hW8nx1p6ur7LrT2MOs
GuvCTmDXsLmsLCuKtWXsQvYG68iGsIbqVrNd7Ax2GTtWJpX6D3uQVWLNWAN1
q9hO1pldyqqyGexRViPWIhvCqnl+7eN5se9Y41ir8o/VncuuY8e5l9vZC6wV
6x3rks1jz7OWrA87z9jqztch3jH7PtaqupnxftQVsu7sqHu+LCOZjzEvD3lX
ecYuYc/JW6gbrq43O8ZqRi3bGffCLpHPU1eMNWK1XGML+46NZNfG+mBPsYNs
OLsm+hq7n+1hXdgIdhr7gpUUGfEb3UsvVsHvOCPWtbrPYp6yp+XfGjuCTWI9
WXl1naPPsk9jnrLN8gPqhrGrY12yTewbNpRdFXOSvcJ+Z7+JyuZLA7aN/SG/
RN3N0TfYq+wvdhmbHj2HPct+ZGPY5Hi/bCP7mu2PueB8tdlW9oN8tLrrY96z
F9kv7EJ2IzuHneB3dIqexT5hfdjJrFv0SrafncmKs1NZU9HZNbqwEqxZzGl1
u9WdwY7IG4v72WvpXnJLRtILoifM8JwHstrG9o11qO7H9Dq6OyPpN9F3Zqvr
zSplJvtH7CNfx37EfpaXFxXEy+r6sarqesS8VHdQXV9WmXWPvYZ9wwawWqxP
jGM/sP6sJuvNekX4bT3Y8ex0eUfRPTd5BsVYbXmd6Auuey6rws6O+et8B5yv
KyvJmkcvZ3ti72HPyX/yu8ayKawee54dYuPY1HTPit7VNDvpl9Vyk14ZPfPU
7GRvqc7ukd8tWrC3WC12l3yBaM7ejLWTm+w/sQ81Y3tYDdbE8RuOj7juRNe9
Nc6dlYzZlJOcN84/R8wWBdlJ369i7CL5QtGS7Y3nEPuC49cdH3a+Cc53i78v
EYtFK39719/qqmvn+EPH2eIGdSv8/X6xVBT523u8nroH5Q+I1ux9lpeb7DWx
5xRmJz2+Kstz/ILjn133Aue7Ib2mv0zPi5gfBeoas9cc/61uvLoZ8S3FHmBv
sq7s/PgWYA+yt9hZbFT0bPY4+5wNZJdHz2aPsPfYu7F/u0YV9gT7Qj5I3RWx
r7JH2fvsHHZBvNes5D1szEneVbyzCuoeY/vU9VR3YXwPsZXsQ9abXcw6sb9Z
Q7GEvRr7Atsu/1PdpWxafA+xNewT1o9NiG8atpZ9yvqz8fFtwdaxz9gANjG+
S9gK9gHrxS6KdemeJ7B7WEnWhJ2tLtscbxf7N9uXfi4PZyR7YOyFC/zGllnJ
e30mJ3mn8W7jWzG+GVsa30qMNa5FVjJPtuQk8yHmRbOsZG5vZvfK74u5nZXM
u6dzkvkV86w1+yDWH3tE/qgY4ZxNMpP1HOv6K38rUrcveoHj5WoeFt3YIXaC
mOGenmODWUVji9gq9lXppB+Uy0x6X/TAPc4xQF0uK5AvU/eRuoGsLCtky9nH
0V9YDmvCHmIfxrrISub2Vud5SL5MDGInxTPhK9V9ydqwj+RHPc//spWsHfsk
I/lH4Sq2mnV2f4fljcRStj3mlbrJ8nuNLc/axTcNm8juYxmsIL5p2Hh2FyvB
Tom5xr5hpcX1bANrzz6TFxfXsLWsLftYfszYK9mqWIPsU1ZMXM3WxP2xA/Is
MYVtjL2CHZSXEVPZpthn2PfyXHET2xL9lP0oLyemsa3sLPaT/HgxnT3LurAf
5GXFzewZdjr7Wn6cmMzWs+6eVRnPuS1by95P7wE1MpNeHz1/X/R2Y0uxfPki
de+oG66uMRsac4D9xYaxRuw8tpv9yYayhmwI28X+iG8uls8GsR3st/huYg3Y
YLaT/R7PmX0b/VbMZU/FnGR11fWL9cUOsQ7su+iFYh7bnN4bf0nvT7FPtdGb
urEsY9vI16h7N54fK81as9XsvfR3ycsZyTdEfEuszEm+LTZkJH0u+t1SNojV
MfZcvs3Yn+I5s1+jz4u72fOsn+d3nLoGbDHbm16XBWwEGy76ur+RrJCNlL+t
7kj0F2P/kFcSs9jLsZ+zTHX12UL2dunke/JS+R3u7U5xo/vroe5PdrKYre6V
+M5hf8krizlsW8wD9ru8opjJXmLnu5em8X8qe4f9E9966v6JfVfcyd5Ir9dY
t22yk55S3+8Y7biZsaPjeak75u+j2KlsFNvLjrIxrDkbE3sIS0UfYUtj/vgN
Z7KR8R3GU+pqxdpku1gvdlReQ8xnO9J9LPpZ2+ykD+a7l38BiG34FA==
             "]]},
           Annotation[#, "Charting`Private`Tag$77357#2"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[
            0.19699838300000003`, 0.252204821, 0.33320940200000004`]}, {
           "Directional", 
            RGBColor[
            0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[
            0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[
            0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
            ImageScaled[{2, 0, 2}]}}]}, 
       {RGBColor[0.560181, 0.691569, 0.194885], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
WMGaxVh4fbBvlJ52Ymp9SfM/L9jfqu5YExyPpGutC45f0r7mBmsvqu/mBNuS
6pG1wT5WddYX0bmy5uGa1L5IvqFnsF6kGvCuvL9LQ97z42AfKz1zX7BflX64
M9ifSwfbDb+Qs5753+i8pBfHNPpvz7mu17nmYSH37EH/qTnXlduD/by0ta3B
sUlaXEf42JxryU+DdSfpnO8FxxTpeHuDY4G0043B8Uva4zvwMznrpZuDY5w0
1cbB/lM1lHyrfOy3eefJisnKjQup69D+qsGD9RxpJt8H6zNa74Oiv6W+14/B
eo6+71D6J8l+NQ/B2o60F+XY8kNaA18Fa7PSCr4O1qykvRyfWoNSDXdB3mvz
Md7xu2ANStrOiuj8rBr3/zZYE5P+802wViYNZFKwjidd5bosD1ft9jn9LXPW
DQ4Fa7/SCvYH65PSKPYE65P/pzkE62zSiD4J1uukP/wKd89ZIyqeuvbsI60j
WDeTRtQr+nvLDg4Ea8XSKD7K1oL+tyO4/pIe8n6whtYAvoVjY84ai2olfZ8Z
0nSD9TppJh8G63vSTLYF12XScK7N6kfZ85bgmqIefSWj51TzdnPqOC4N6vLU
8V0azk2pY7H059tSx9Z18K3w4pz1rgvh2TlrRyek1ocH0F6QOh5JO7oxdcyV
Xn1D6rgsHXtTcP5cN3V9JHuT3V2f2g6lk9+ZOi5vhC9LnWNId7o9dUxfT/8d
qfOEDfD52fpV/Scfvwk+SfZTcO4in/9n8L6AdLzy0WtbfunvYM1fWllp+q/J
4sIRqXWAl2jzqt/g3rR/Be8LSJv6J3gvQBpXUWotQrHvde6zVrGZ+xRLrUVI
7zwjtRaquHlmai1IulySWifpJTvi2vmMnVLcfrqU/IlqsdS6q7S7w1NrGj31
u7NYoDxd7y5/UoXxU4M1Z2mS26PrK+US70fXOcoldkRrAYr7Jxasp+i5e6Lr
ENWqH0bXWsoHdkVrCsoZPojWBZRLvBddmyknOYajf86a/6fRuoBi4v7oOlbx
9LPoeqyW1lR0zfaC1ma0PlIb/ji6/lHs3hddg0mP+jJam6gDH4iun5UzfBRd
Rynua/5G8w6fq5ZMXeNIH7sIHp+zPjaF+Xk053e4OHXdpP2US1PnmdpPuQKe
lvO+zCWp6ynt3RyXfVP5qOIFa9bydfJ5+u27eO7LwbWnftdvwXq79sV+h1vl
vBeWS+0zZRvHpt4Hkb63O1qLka5yWOpYqf2ymcH7C9KED0XXtzXlP6P3xbSm
tkXXmcoDv8v2dORPvonek5IfOL7gvS7t382P1pK0xtdFawHKXd8M1n90/w3R
uoBy4BMK3gNTXDgy9X6N9nqOK3jPTLXJMQXvH2i9xIL3A7SOji5Y65fdhtR7
AdrXKxS8nyH7Xxut3Ss3Pqlg/U6+5diC9/bkY9dH6yDKzzdG6wjKdVdH6x2q
GRdFaw2qJZdEayWqT1dG1+eqH5dGayWqhZdH6yOqQxdE627yM1uitRLVLMui
dRbV0ecWvBciLfHtaC1PvmhxtG6i+ndTtG6immJztA6imujdaK1EtdJRHD1y
3j9dQ//FedezC6P1RPnArdH6gmqoVdH6iGphaZnyyfm8r/ubWq0ktnda6n0Z
7Zt8Fa2hKE9eFFwLS1NdElxjStddGlyrSps9hWuH5by3sirY/0h3PS91XJaP
XR2sD0h/Vg6unGeKdKfUe1jSmZcH6wPSdRcE193SdU9OvTenfZzF9D+Ws568
LLhmlya8MriGVS17ZWp9Q/uYK4K1CPXPD67NpTnL12qd/iodLPXemfTthYyp
kLOvmB68x6c9lDMK1tnln89O7Sukk5+aen9QevvsYN1Jvuit7LnysTOC9++0
//I/PJ9IyQ==
             "]], Polygon3DBox[CompressedData["
1:eJwtmnXAVVUWxT8feI7ec32Y45jYY441dqBjj4mNUtIhIiLdjZRKdwsqSKcw
CCgICGKhWDh2d/esn+v+cb/vrrvPrXP3Xnvtfd6h9Vpef1epoqKigf5U1v/r
U0XFvtqvEyoqNpcrKm4Q/rtwXeEtwh2yiopdhU+OFRXPCl8r+97CNWXfKHxO
9D7HemvsgbJP0P46Hd+/SkXFgryiYqzwuxozRePPln2l8HuyHy57Eh4kvEh4
D+EWGr+fcH2Nv13j7xLeX7iBcE3hqzW+ivAtwhuES8JDhWfp/NHCVwrvJnyD
7OuFf9AztROeLPvOuv4zut4a4SS8QvZNwquFM+HHha/S+WXhm3T+08ILZR/H
8wpPFQ6y9xOep/G763q58GDhxcJ7Cu8hPEX4ceEJGv+d7t9GeKJwJdk363pr
hXPhlbLfwpzq2knHOmnsQTp/ovbXy36AxteQ/XbZ99KxXrLfKnyb8J7CPYR/
1TZQ+9M0fqRsO+n8B4UfFR4lXBa+X3ip8N663k06dp7Or6Rj9+jc3WWfrP3l
so+X7Xsdays8Sbiyxs/S8w4QflHnjJX9E9nvFB4u+6/Cj8p+n/ALso8R/kz2
FsIjZP9NeHbu53tJ9nHF+Z2Eh8k+THiF8JXC9wp/KvyNcE/hccLDhR8QPkn4
cuFawp8L48AjhX8XXpJ7vj/V9R8SXio8Vfgz4RnCwzT+FOH/aHydsv2N77kw
+nmyZP9cEP1+QzX+ZOErhGsL/5z5/acKjxCemfv5nwqe70WyXyx8p+wfCw/U
/9myPaZtkPAMje8o+5PB5zcT3qPkb8i3/ELntxQepfP+EG4l+2HCzYOft4e2
KYzVsQ0a2zz3t8cn8I3ZOnaucEOd/5HwPNlHC78t+yThG/V+BxTxs1X4OuF9
hGsJbxI+TudV035lvoGutTi3P3yiY9Nl30XjxwjPj/6+1YX/Jlxb9meEW2r8
IcJNg79PW+EThdsLNxB+JPf33Bwcn1/qHncLj9b1/hSen/v678g+Wfgr2VsJ
j5G9Qv7XWvaj8VXZ75D9W9nvFZ4ge0n2NrIfy7PLXl/2e4WPEW4tXE/4buFD
hZsFf889k/1jhc6fKHyA8Hi+p/B+VXwP7sU1xuhep8q+SPtvyn6Y7F1kHyf7
DXxT2Y+TfTb+LXtV2Z/U/ZYJ7yS8UGMnaUw1+Cp6Ptrikzr/P3CEbE9p/HLt
l2RfJFsnbWNkr65ja2TvLDxW+HrhtcLduKbwzXAEsUTcCt/IOwh3lH208HXC
qzNzJt8eHxgofLOe9yDtN9Kx52XbW3iE8CpdZ189/17Cw4X/K/y3KsWcauxx
xKTOb0hOCI6RKcLTtP0bf9b4xrK1JmZlvwzOke1Hbe0ZK3uo4jGdZD+15HOP
0P0e0v6zsh/M9yQGZb8CTpK9g/Ao4WuFn4DLhYcHcwbcMVXbhdqvofMbwUeZ
z60n3Lxsn8Q38QG4BB/AF4gxYv1W3b+q9pvo2Iv4q45dLnyHzm8GP8t+sHBj
2V8o+x4dgzmFex8v+2Pa36bxh1TxnFwgfGv0XBHDxPLhJXPRrMzfvr7sd8Lt
+t9Z9n/p2HRsul6u/eo6tk72K5JzAzniKa6lMb/spOvpvCeF22sbKds1fLPM
79xL+OyS5wKfIxbhUHyRd+opfFbJ79oUjhE+U/jhzBvfrm607UqeU/Yj4HzZ
Zmq7VPt1dLyJ7Ifr+aYLbxE+SO+/Sv48V/hnOFD2dcKPC1eSfXHZ79xbtnNK
notLdH7Q/kU69gT5SuN2CG/XtkP7X2t7Tfuva/tG+3Nz5/s3guN3Z53fV3iu
bFV0/8rCfYTnCJeFKwn3Fn5MeDfhDTp/lfAuwst0/kXJ3AcH/hc9wJwI95S9
V9n5tTPfRjjq/Dm58+vrwfl9N50/RHiJ7HvJvlH2J4R3FV7O95X9KOG7NP7l
sjkJboKzxurat8l+pPZb6Ng22WoK/0O4pfArwhcL7yx8ofAq4UuFo/AlwquF
LxPeRfgy4TXC+wiPJFZ0/7/reT7T/5eYL23f8s56vpna/0rjZ2r8rfr/pvDL
2j5HA8n+CHOt44/An9oGBMf4Aj1vjWRfwCdekm2lxs8S/k54lvBa4aXCFbrW
AuH1wiuEKwsvEb48WU9eofFrhVto6xfMkXPI7cL9g2NoHrlR+L7gGJ8vvFzX
e1j7X+vYw3CTtgeDY3aZ7P0z69cLdL/t5FNysuwX6dhC2dbo/AXa/03H5sn2
m451EX5I43dBH+n5DiSfyv6c7L/L3lV4huy7yr5C5z/KXMr+qOyrhecL/yo8
t2zNinZFsw4gHnXeoGCNgFb4U1t3Yk3Hk673B5wuPFM4E35C15sn/IvOmaNr
nabnWV/Ewny4T3iG8JfB37exxpdK1nRoOzQ8Wp4c3S6zz+F7+FjfzN/szoKP
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
O6cI3wy/Z+7vXih8m/AdyfFNDUE81kmOX2pU6o26+FzJNSb109Ci/0ROResN
Fh4Fnwavz/Qr+jMvB9fvw4p+I5oMbVZF+AHhZbr/PsIP4kMla1K0KT35p4N7
APTq709e30JTo62HJMcGMcL6Vd/k9aBtwf2EPsm5mxxO/6h/8nrMK8H1/n3F
/bcH9wNmZP7+tfU8H+jeTZL9jZgithokczkcDn81To41OBg+PEF4Du+r8w/V
9Rom5wZyALlgQHKsE/P0wyqEewg/Qp0iPKjoH70V3E8bmNwf3hHcT2skfF7J
OQc+HZ+szdHo1CYjk7U0GhgtPCI5V5Gz0N7Tc3MnHIpWmZpbm6C50F7Tcmsv
NB/ab1xurYEGQAtMya310DRom8m5tRwaEC04PrdWIGeSOyfmXutEw6BlJuXW
MmhAtGD73L1serr0dsfm1iZoHLTO6NzaBY2CVrk/d64h57AWMDy3Xp8q3BOu
z12/UaNQq7TL3XulZ04/eGTuXEb8o50m5M41cDhcPiY3P6GR0ErDcut31oCo
14bkrkdZE2Bt4MHc9SFrAtRjQ3PXA5OD67FRwjVL1mBosd76Hv3Jj8H9+MG5
61XWHFh7GJi7l0zPHX6slZwv6dlQD/XKrRXQDNS/PXP35ugRUh+fU/DJ+9Hc
OyGZe6l5qX2pX3YvuWaldh1V+Cs1GLXYwUX8Pa3xBwqPEV5cco1FrdUnd/+Z
NQbqnX65e3+sGVAv3Zdbq8CXrBX0z70ewJoL9fQA4atL7plTH3fJ3QunZ07v
vGtubUR80avunJtv6ZnTOx+Uey2CNRbWWjrl5j966PTLuwmfX3JPk95m39z9
dHqU1F89cvc26WnSH+ieu/dJz5PeZ4fctRM1FGslLZK1B/GC9ngguVb+ILjf
fG+ydkfDf18258A9cA69TTjnpSI/oo/55nx71rBZm6EHzftfH92bZo38ueCe
OmvncBRcBYfSq2TNbUuhp6kXqB/Q16zxsXbLmvHW4B48a8nU7/Tw0dRoazRw
paKeRBujeVkrQ7OhhenZ3h2c0+jlwkmvBnMkXAWnhWgfg+vwkR+DfQjfgcM/
CvYhuJ0192cLvc9aPL9huCO4R8xvG+DYIcEcC/eSQ7sFczC5lRw/ITiHk/vJ
4bMLvUVuZw3mquCeNmszbZK1wyod+6HsnEPuISfQS2ZNc2NwD5i1Ttbo4Jt2
0f7EN+RbtoajZRtEHSK8Qtt3ZWtS+KJjNP+sy8xvXYS7Cn+jbXnwGusrmZ+B
Z8FH3hLemJlve0Tz1dfalgWvQW+T7Vvhx4PXYF/N7GP4GjmPtQ7WbDcE96xZ
y2WNEn5uH80f5MD3Cn3411p75ni6IXotkZxMbibH8FsKev7wTaPoeCEHkgvJ
kfTKyUHkInIQaz3koB2FXmWthxxGLkNPVyrqO/Q1epl6jzVT8kGHaL5kTYH4
bRwdb69n1s2s2zO/bMz1PSXbqNFYm6XmoXbrmKwV0fxo/25F/uSb8m17JscO
MUAsdE3+1swZc9cjOTbwSXyzU3LvDQ2KFu2SPLdoDrQH34jcQk7h21EDkT9a
R/MbHA/XkyPoxXVO1ir09Ojt7aR7bAp+xq9l754cC8QwsdxBuEPJPT56fe2S
e3f06OjV9UrmCjgBbmib3LtDI6OVWyfPFT6D73AP8Njoe9+T7Ev4JL55V3Lv
npqK2qp9cm+RniG9w7uTfZGePr39lsm9fXr+9P5bJfs2Povv8huXZwr+4bcv
/GZkZRE/8BG/weC3GMTIG5lrItZqqImolejP0s+jf0c/lRqetStqOGp7ahTW
YqjJqV3Q+FcG91DQ/tQorHXS86F2YU20e3BOYK2Unu39wTmLXi4xOjE4Z68r
4ptn5NmI97/WpIL7i/SGWPNh7Yee6JTkmu3j4N9oVC3sX0bXWKwVUYP9FFzj
UZvxm57Xgtcs+a0Pmvvq4JoFLT46+d2ZA3qbaPB6wRodbY6mbxWs0dH69GRi
dM1Hr+b/ODU3tA==
             "]], Polygon3DBox[CompressedData["
1:eJwt12e0VNUVAODBBAbfGx+QBFsUJEFAlzWxQCIISlVQQIoQKaJU5T2K1NCV
Ll2qdKQqValKD1VFiihCVBRBrFhCjYrfXtcfe627v9n33pm555x9bokWeXVz
L0mlUntFfrE+k0q9l06lzhZIpc6JV3JSqZ6sKesr7yfasOdYezZSPkp0YqNZ
LzZNPl30YZ3Yw6yDvKNozhawhWy3/E0xkb3GdrCT8i/EHLaYrWEfyA+LqSw3
O5UayAY53puVSu0TD7ObWCU1+f2YLmyMc/uwJexJto2NZX3ZUtaSbWfPsnZs
CqvDVrCurCEbzCqwmVnJb+vNFsd/Ir52/xdYf7Zc3lrdTnXjWD+2jLViO9g7
Yo+Y6LPnfPaNcyc4ftbxq+raqtvt827sUTaE3ctmsO6sERvKKrJZrAt7hD3L
yrEprB9rzSayh9gS1p+1YZPYw2wZ68OeYONYDbaI9WWt2ARWiy1lA1hbNpnV
ZstZD9aYDWOV2Oys5PnWTifjIsbHUb+tM6vD+svvVjdJ3TOsLhvAyrLJbDwb
wFbEmGK7WG/Wgo1l1dlCNor1ZIvY42wLG8Q6sJmsAVvNnmaV0sk4i/F2yHdp
z+5jneRl1A1Vl8vuZ53ZDWwYm2YMfcbyi/Xsn/KO6h6Q91R3OxurLo9VZ93Z
rWwM68BqsB7sNjaatWF/Yy3iO4s9vktb9nf2hPwqdT3VtWY3ssasCOvMWrGS
rBarKbY6923+lpiUScb/t2yw446OZ6lp6Nw1Wcm8zE0n8y/m4ZfqBrI8NkNe
X90qdSNZD7Yw5iTbzIawTmw2e5StZc+zbmw+a8o2sqGsM5vDGrF1bBjrwuay
x9gGNpx1ZfNYE7aejWDd2QLWjG1iT7F/sHasBOuflaw5zdLJ2hJrzAm/oxd7
nI2RV1O3IOaM5zSajfb5Z/LjMRfYNLZBXRd1/4vvxxazPWwg+718iJjPdsa6
xi7G3Gej4r6u96n8WMxBNibuy07IP485yEbG+seOyj+JecQms3WxHrre9zFn
2NgYz+pOyr+I/5QtZXvVDVZXQD5ULGC7WP9YkOWDxTy2I+YW+yXGHxsUa5Pr
7ZcfEO2zk3VlYE4yRmKsPMNGsBHsI/nHYiB7iW1zvd6u91PMIzaXbY/1mv0c
ayKbyTaz7uxsrCVsOtvIurLTMdbYLLaF9WDnYt1gM9gm1o2diTWHTWJrowew
79i/Pcvm8dxYVTY/5r66iWxNzF92KurYeLaKRaP6JtZxtp59xMazP8UYEKvY
+9GPWE48H/EaO8hGsEw8W7GSvRfjil0mHyc2sI/ZBFY07in+w47HPGLXyCeI
bexE9Dd2rXy4WMLeYYNYfvkLYiM7Gr2NXR7jR6xmh9hoVih+q9jOPmczWDH5
i+IgO8OWsJvlHWIsRF/wLN/1+w/G/Ij7sJXq2qv7OuYWW8b2sSEsHeNR7GGn
2Dx2fTwL8XasIWwuKymfIt5lp9lidpO8sxjGhrvvYdc/Eut9jNXoAeyQ/APR
MeZS9Cj2nvx90Sv+L7ba9fJc71s21zOfwl5nb4gX1Ldj5Vhb+XXqBqhbxXaz
C2wZu861nhAPsTxWmk1U15xVY21YcTaKNWGVWUt2DXueNWVVWCt2LRvBWrBa
LJeVYhOif7Bn2PhYd9kb7HFWk7Vn17PxrC17MuYbu4e9wtqxlrEvYeXZYtaM
VWWtWTE2MtZ79hjrze5kc6NXsCasD7uLzfutB/yVPcAeFPX8V1PVfch+ka9U
d0f0KLWpmBfxPMXbmaQPVkwnfSf6T+OcpB/dnk76SfSVBmwHO84KiHQ8K/ak
a9Zz3EXNTa471fVbsvqsK7uZTYvvxxqwbuwWNj3WcfZ0rDmsClvJ5rvHHHaA
DWPn2WPq7mXN2ZVsCLufXcsqsNP5XJ89yEqzuuwXlsdqsOvZQ+wn1p49wEqx
2uxnlsvqsltZNVbQPbqzmqwMq8cuquvA6rBbWBWWVteN1WI3sAYFkv82/uPa
7GZ2PyvAurJH2G2sBruU9WCN2D2sCSvKBrLGrDxryi5ng9i/WAXWjF3BBrNq
rASrys77fu1YVXYdq8zOsbasCivO7mNnWRtWnf2FVWcX2FOsAbuL1Wc57tGH
1Wd3skfYZaw3e5SVZY1YYdaPNWR3s4asEOvL6rE7WB2WYb1YZVaMVWRn3Lc1
W+2Zv8n+z5arKxF9jM1m+9lQdkHdK+xVdoxNYVnq3mRfsqujP7J7s5N3kvd/
G6MxVksUSt4N1qaTd4V4ZyjKlrPN7Hv5Aude4dzd7At2VazRrAJ7i30l/3Os
lawi28VOyq+MPQIrn53MjxPyy0VRUdI9drLPHV8Rc03dPepWsC3yH9x3IbuK
vcq2sh/ZInZ1rM1sE/uOzWdXsjXsHXaRrWKls5N3oZ3p5P0r3sOucd+VbBc7
L1+qrri619l+dkn0VnYDW8f2yfNFH2Vl2Fq2V56KOc5KRc9i6+Rfut5MVjj2
JOx19hWbxYqwN9gB9juxjt0YPYsdk/9R7Gbl2MtshfxT505mBdkmdphlxX6A
3RZ9lh2SFxQb2C3ZSQ+JXjItk/SbH3OSHhK9ZGom6Tc/5CR7mNjLzMgke68z
Ocn+J/ZBUzJJj/yOfSj/r5ieSfZAp9lCxy87PuL7jXHffNlJP3oxnbyDxrto
Pv/zIracfSKfpO7S7OR9dVE6eQeNd9FMoaQHRy9+MZP0vu9zkn1h7A/nZJI9
3wX2kuNxjrc6r6frfeXzbexT9gexi5V1jy3sY3khsZ3dyTazI/JssZndHnsS
9om8iNjJ7mZb2VF5YbGD3ZWdvBfH+/HkTLJfPJWT7FFjrzozk+xxz+Yk++XY
N8/OJHvc8znJnjf2vrMyyd76HNvo+APHl4qN7nFr7BGzkzEbY/cUnyX/FX8d
TRA=
             "]]},
           Annotation[#, "Charting`Private`Tag$77357#3"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[0.1830429875, 0.21424763749999998`, 0.0962851875]}, {
           "Directional", 
            RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
            ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}, {}, {}}, {
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0ckuX2EYwOGXv7mmuADTnvQCKi6AWFgSGzsibImVhJBeQMUFVOzMQ2vJ
FZjnISJiiqhqSSP6fInk/PKcnMWb7z1fTWdfa29WRAzpj9L7L13oOT+inJmC
iCpWsJ41bOBnNrOR7WxhNzs4wB6OcZDj/MpJTnCRU1xnbWHEFV+0qd+603Qm
Yosz3OYsdzjHXc5zjwvc5yIPuMRDLvOIKzzmD57wJ0+5yjMO50Rc81XnaW/d
a835NtJcrnGSCxznd47xGwc4ym72s51dbGYbG9jEen5hFetYzkpW2/+Sf1Wm
J90q1/lK0/9nSbobFvM9O+IT31jEfyxM52dBmsP8tAfz0jzm8pFWjQdm0o70
xIiPNx/3/x93XEp7
         "]]}, 
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0ktL1FEYwOEzNl7GL1BbF9oHEN3oQiLX4QXS1MwZtznoOkQXIiKpYSAS
Ke6MqLVErSO8a46jhIh5WXgXV+bt+dPix/PuznsOpyiZru2IhRD6dGq44iH/
qDgRQoKlfMQnfMwalvMVq5lmPbuZ4hCH1WX+zF5+4wh/cZJZfuUBfzBZGMI2
zzWnY+3peW4I82zgAhu5yBdcYhOX2cwVtnCVL9mq39GeXGMbM9FZXGeKWbZz
gxV5IezwQps60b5y7DbLS7t+j/biF2Y4wZ/RfTnDHn7itDrNg0zyDev4mk+j
/VjGZyxhFR+y1VlbPFOBjrSrqXgI+ZxkHj8ylx8Y5zgfcIw5fM9RxczvGDjM
O+Nb3nKQNxzgNfv5j5Xe4W/s/3+4BwDCTkg=
         "]]}, 
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0jssnlEcwOHjG0hJXOpWDBjExtKViIg0bUnzRaQJk8RCwmBiEomkJjEx
IQYm6aRT04miX+vWiIjb4m5zv7aeL4Zfnv+7nPec97zFLZ3RjoQQQr+OIyFc
eNjnulqTQ4iwixnsYxGHWM5xVvIr6/iDzVzistrNZ+zhPQf4KiWEEb7hFEv5
jRPc5KnmdKhdpSaF8JNpnGc6F5jBRb7mL2Yyxiz+ZjZz9Mecy6X4O7nMPK4w
n6ss4BrPuRXfs/7qSHuqtrdZvuUMSzjJHA4ziV9464zdPOGx2swxNvE7P3Ka
FRxlGQdZyF6mc8xaG/E1lKAD7ehzogtiI/+7owb+Y5RP/MRH1vOBH/he9+Z3
vGMtb1nDG1bzmlW8YiUveeE7bEde/odnYzFN3A==
         "]]}, 
       {GrayLevel[0.2], 
        Line3DBox[{2037, 2335, 956, 2036, 3278, 2244, 2038, 3279, 2245, 2039, 
         3280, 2246, 2040, 3281, 2247, 2041, 3282, 2248, 2042, 3283, 2249, 
         2043, 2980, 3368, 2044, 3284, 2250, 2045, 3285, 2251, 2046, 3286, 
         2252, 2047, 3287, 2253, 2048, 3288, 2254, 2049, 1152, 2255, 2336}], 
        Line3DBox[{2051, 2981, 3369, 2050, 970, 2052, 3289, 2256, 2053, 3290, 
         2257, 2054, 3291, 2258, 2055, 3292, 2259, 2056, 3293, 2260, 2057, 
         2982, 3370, 2058, 2983, 3371, 2059, 3294, 2261, 2060, 3295, 2262, 
         2061, 3296, 2263, 2062, 3297, 2264, 2063, 3298, 2265, 2064}], 
        Line3DBox[{2066, 2984, 3372, 2065, 2985, 3373, 2067, 985, 2068, 3299, 
         2266, 2069, 3300, 2267, 2070, 3301, 2268, 2071, 3302, 2269, 2072, 
         2986, 3374, 2073, 2987, 3375, 2074, 2988, 3376, 2075, 3303, 2270, 
         2076, 3304, 2271, 2077, 3305, 2272, 2078, 3306, 2273, 2079}], 
        Line3DBox[{2081, 2989, 3377, 2080, 2990, 3378, 2082, 2991, 3379, 2083,
          1000, 2084, 3307, 2274, 2085, 3308, 2275, 2086, 3309, 2276, 2087, 
         2992, 3380, 2088, 2993, 3381, 2089, 2994, 3382, 2090, 2995, 3383, 
         2091, 3310, 2277, 2092, 3311, 2278, 2093, 3312, 2279, 2094}], 
        Line3DBox[{2096, 2996, 3384, 2095, 2997, 3385, 2097, 2998, 3386, 2098,
          2999, 3387, 2099, 1015, 2100, 3313, 2280, 2101, 3314, 2281, 2102, 
         3000, 3388, 2103, 3001, 3389, 2104, 3002, 3390, 2105, 3003, 3391, 
         2106, 3004, 3392, 2107, 3315, 2282, 2108, 3316, 2283, 2109}], 
        Line3DBox[{2111, 3005, 3393, 2110, 3006, 3394, 2112, 3007, 3395, 2113,
          3008, 3396, 2114, 3009, 3397, 2115, 1030, 2116, 3317, 2284, 2117, 
         3010, 3398, 2118, 3011, 3399, 2119, 3012, 3400, 2120, 3013, 3401, 
         2121, 3014, 3402, 2122, 3015, 3403, 2123, 3318, 2285, 2124}], 
        Line3DBox[{106, 845, 107, 846, 108, 847, 109, 848, 110, 849, 111, 850,
          112, 851, 113, 852, 114, 853, 115, 854, 116, 855, 117, 856, 118, 
         857, 119, 858, 120}], 
        Line3DBox[{2126, 3016, 3404, 2125, 3017, 3405, 2127, 3018, 3406, 2128,
          3019, 3407, 2129, 3020, 3408, 2130, 3021, 3409, 2131, 1045, 2132, 
         3022, 3410, 2133, 3023, 3411, 2134, 3024, 3412, 2135, 3025, 3413, 
         2136, 3026, 3414, 2137, 3027, 3415, 2138, 3028, 3416, 2139}], 
        Line3DBox[{2141, 3319, 2286, 2140, 3320, 2287, 2142, 3321, 2288, 2143,
          3322, 2289, 2144, 3323, 2290, 2145, 3324, 2291, 2146, 3325, 2292, 
         2147, 1060, 2148, 3326, 2293, 2149, 3327, 2294, 2150, 3328, 2295, 
         2151, 3329, 2296, 2152, 3330, 2297, 2153, 3331, 2298, 2154}], 
        Line3DBox[{2156, 3029, 3417, 2155, 3332, 2299, 2157, 3333, 2300, 2158,
          3334, 2301, 2159, 3335, 2302, 2160, 3336, 2303, 2161, 3337, 2304, 
         2162, 3030, 3418, 2163, 1075, 2164, 3338, 2305, 2165, 3339, 2306, 
         2166, 3340, 2307, 2167, 3341, 2308, 2168, 3342, 2309, 2169}], 
        Line3DBox[{2171, 3031, 3419, 2170, 3032, 3420, 2172, 3343, 2310, 2173,
          3344, 2311, 2174, 3345, 2312, 2175, 3346, 2313, 2176, 3347, 2314, 
         2177, 3033, 3421, 2178, 3034, 3422, 2179, 1090, 2180, 3348, 2315, 
         2181, 3349, 2316, 2182, 3350, 2317, 2183, 3351, 2318, 2184}], 
        Line3DBox[{2186, 3035, 3423, 2185, 3036, 3424, 2187, 3037, 3425, 2188,
          3352, 2319, 2189, 3353, 2320, 2190, 3354, 2321, 2191, 3355, 2322, 
         2192, 3038, 3426, 2193, 3039, 3427, 2194, 3040, 3428, 2195, 1105, 
         2196, 3356, 2323, 2197, 3357, 2324, 2198, 3358, 2325, 2199}], 
        Line3DBox[{2201, 3041, 3429, 2200, 3042, 3430, 2202, 3043, 3431, 2203,
          3044, 3432, 2204, 3359, 2326, 2205, 3360, 2327, 2206, 3361, 2328, 
         2207, 3045, 3433, 2208, 3046, 3434, 2209, 3047, 3435, 2210, 3048, 
         3436, 2211, 1120, 2212, 3362, 2329, 2213, 3363, 2330, 2214}], 
        Line3DBox[{2216, 3049, 3437, 2215, 3050, 3438, 2217, 3051, 3439, 2218,
          3052, 3440, 2219, 3053, 3441, 2220, 3364, 2331, 2221, 3365, 2332, 
         2222, 3054, 3442, 2223, 3055, 3443, 2224, 3056, 3444, 2225, 3057, 
         3445, 2226, 3058, 3446, 2227, 1135, 2228, 3366, 2333, 2229}], 
        Line3DBox[{2243, 2339, 1154, 2242, 3457, 3069, 2241, 3456, 3068, 2240,
          3455, 3067, 2239, 3454, 3066, 2238, 3453, 3065, 2237, 3452, 3064, 
         2236, 2334, 3367, 2235, 3451, 3063, 2234, 3450, 3062, 2233, 3449, 
         3061, 2232, 3448, 3060, 2231, 3447, 3059, 2230, 1153, 2337, 2338}], 
        Line3DBox[{2341, 2654, 1381, 2340, 3563, 2563, 2342, 3564, 2564, 2343,
          3565, 2565, 2344, 3566, 2566, 2345, 3567, 2567, 2346, 3568, 2568, 
         2347, 3569, 3070, 3458, 2348, 3570, 2569, 2349, 3571, 2570, 2350, 
         3572, 2571, 2351, 3573, 2572, 2352, 3574, 2573, 2353, 3173, 3667, 
         2574, 2655}], 
        Line3DBox[{2355, 3071, 3459, 2354, 1396, 2356, 3575, 2575, 2357, 3576,
          2576, 2358, 3577, 2577, 2359, 3578, 2578, 2360, 3579, 2579, 2361, 
         3580, 3072, 3460, 2362, 3073, 3461, 2363, 3581, 2580, 2364, 3582, 
         2581, 2365, 3583, 2582, 2366, 3584, 2583, 2367, 3585, 2584, 2368}], 
        Line3DBox[{2370, 3074, 3462, 2369, 3075, 3463, 2371, 1412, 2372, 3586,
          2585, 2373, 3587, 2586, 2374, 3588, 2587, 2375, 3589, 2588, 2376, 
         3590, 3076, 3464, 2377, 3077, 3465, 2378, 3078, 3466, 2379, 3591, 
         2589, 2380, 3592, 2590, 2381, 3593, 2591, 2382, 3594, 2592, 2383}], 
        Line3DBox[{2385, 3079, 3467, 2384, 3080, 3468, 2386, 3081, 3469, 2387,
          1428, 2388, 3595, 2593, 2389, 3596, 2594, 2390, 3597, 2595, 2391, 
         3598, 3082, 3470, 2392, 3083, 3471, 2393, 3084, 3472, 2394, 3085, 
         3473, 2395, 3599, 2596, 2396, 3600, 2597, 2397, 3601, 2598, 2398}], 
        Line3DBox[{2400, 3086, 3474, 2399, 3087, 3475, 2401, 3088, 3476, 2402,
          3089, 3477, 2403, 1444, 2404, 3602, 2599, 2405, 3603, 2600, 2406, 
         3604, 3090, 3478, 2407, 3091, 3479, 2408, 3092, 3480, 2409, 3093, 
         3481, 2410, 3094, 3482, 2411, 3605, 2601, 2412, 3606, 2602, 2413}], 
        Line3DBox[{2415, 3095, 3483, 2414, 3096, 3484, 2416, 3097, 3485, 2417,
          3098, 3486, 2418, 3099, 3487, 2419, 1460, 2420, 3607, 2603, 2421, 
         3608, 3100, 3488, 2422, 3101, 3489, 2423, 3102, 3490, 2424, 3103, 
         3491, 2425, 3104, 3492, 2426, 3105, 3493, 2427, 3609, 2604, 2428}], 
        Line3DBox[{2430, 3106, 3494, 2429, 3107, 3495, 2431, 3108, 3496, 2432,
          3109, 3497, 2433, 3110, 3498, 2434, 3111, 3499, 2435, 1476, 2436, 
         3610, 3112, 3500, 2437, 3113, 3501, 2438, 3114, 3502, 2439, 3115, 
         3503, 2440, 3116, 3504, 2441, 3117, 3505, 2442, 3118, 3506, 2443}], 
        Line3DBox[{2447, 3611, 2605, 2445, 3612, 2606, 2449, 3613, 2607, 2451,
          3614, 2608, 2453, 3615, 2609, 2455, 3616, 2610, 2457, 3617, 2611, 
         2459, 3618, 1493, 2461, 3619, 2612, 2463, 3620, 2613, 2465, 3621, 
         2614, 2467, 3622, 2615, 2469, 3623, 2616, 2471, 3624, 2617, 2473}], 
        Line3DBox[{2472, 3520, 3131, 2470, 3519, 3130, 2468, 3518, 3129, 2466,
          3517, 3128, 2464, 3516, 3127, 2462, 3515, 3126, 2460, 3514, 1492, 
         2458, 3513, 3125, 2456, 3512, 3124, 2454, 3511, 3123, 2452, 3510, 
         3122, 2450, 3509, 3121, 2448, 3508, 3120, 2444, 3507, 3119, 2446}], 
        Line3DBox[{2475, 3132, 3521, 2474, 3625, 2618, 2476, 3626, 2619, 2477,
          3627, 2620, 2478, 3628, 2621, 2479, 3629, 2622, 2480, 3630, 2623, 
         2481, 3631, 3133, 3522, 2482, 1509, 2483, 3632, 2624, 2484, 3633, 
         2625, 2485, 3634, 2626, 2486, 3635, 2627, 2487, 3636, 2628, 2488}], 
        Line3DBox[{2490, 3134, 3523, 2489, 3135, 3524, 2491, 3637, 2629, 2492,
          3638, 2630, 2493, 3639, 2631, 2494, 3640, 2632, 2495, 3641, 2633, 
         2496, 3642, 3136, 3525, 2497, 3137, 3526, 2498, 1525, 2499, 3643, 
         2634, 2500, 3644, 2635, 2501, 3645, 2636, 2502, 3646, 2637, 2503}], 
        Line3DBox[{2505, 3138, 3527, 2504, 3139, 3528, 2506, 3140, 3529, 2507,
          3647, 2638, 2508, 3648, 2639, 2509, 3649, 2640, 2510, 3650, 2641, 
         2511, 3651, 3141, 3530, 2512, 3142, 3531, 2513, 3143, 3532, 2514, 
         1541, 2515, 3652, 2642, 2516, 3653, 2643, 2517, 3654, 2644, 2518}], 
        Line3DBox[{2520, 3144, 3533, 2519, 3145, 3534, 2521, 3146, 3535, 2522,
          3147, 3536, 2523, 3655, 2645, 2524, 3656, 2646, 2525, 3657, 2647, 
         2526, 3658, 3148, 3537, 2527, 3149, 3538, 2528, 3150, 3539, 2529, 
         3151, 3540, 2530, 1557, 2531, 3659, 2648, 2532, 3660, 2649, 2533}], 
        Line3DBox[{2535, 3152, 3541, 2534, 3153, 3542, 2536, 3154, 3543, 2537,
          3155, 3544, 2538, 3156, 3545, 2539, 3661, 2650, 2540, 3662, 2651, 
         2541, 3663, 3157, 3546, 2542, 3158, 3547, 2543, 3159, 3548, 2544, 
         3160, 3549, 2545, 3161, 3550, 2546, 1573, 2547, 3664, 2652, 2548}], 
        Line3DBox[{2562, 2659, 1593, 2561, 3562, 3172, 2560, 3561, 3171, 2559,
          3560, 3170, 2558, 3559, 3169, 2557, 3558, 3168, 2556, 3557, 3167, 
         3666, 2555, 2653, 3665, 2554, 3556, 3166, 2553, 3555, 3165, 2552, 
         3554, 3164, 2551, 3553, 3163, 2550, 3552, 3162, 2549, 3551, 2657, 
         2656, 2658}], 
        Line3DBox[{2661, 2974, 1820, 2660, 3773, 2883, 2662, 3774, 2884, 2663,
          3775, 2885, 2664, 3776, 2886, 2665, 3777, 2887, 2666, 3778, 2888, 
         2667, 3779, 3174, 3668, 2668, 3780, 2889, 2669, 3781, 2890, 2670, 
         3782, 2891, 2671, 3783, 2892, 2672, 3784, 2893, 2673, 3277, 3877, 
         2894, 2975}], 
        Line3DBox[{2675, 3175, 3669, 2674, 1835, 2676, 3785, 2895, 2677, 3786,
          2896, 2678, 3787, 2897, 2679, 3788, 2898, 2680, 3789, 2899, 2681, 
         3790, 3176, 3670, 2682, 3177, 3671, 2683, 3791, 2900, 2684, 3792, 
         2901, 2685, 3793, 2902, 2686, 3794, 2903, 2687, 3795, 2904, 2688}], 
        Line3DBox[{2690, 3178, 3672, 2689, 3179, 3673, 2691, 1851, 2692, 3796,
          2905, 2693, 3797, 2906, 2694, 3798, 2907, 2695, 3799, 2908, 2696, 
         3800, 3180, 3674, 2697, 3181, 3675, 2698, 3182, 3676, 2699, 3801, 
         2909, 2700, 3802, 2910, 2701, 3803, 2911, 2702, 3804, 2912, 2703}], 
        Line3DBox[{2705, 3183, 3677, 2704, 3184, 3678, 2706, 3185, 3679, 2707,
          1867, 2708, 3805, 2913, 2709, 3806, 2914, 2710, 3807, 2915, 2711, 
         3808, 3186, 3680, 2712, 3187, 3681, 2713, 3188, 3682, 2714, 3189, 
         3683, 2715, 3809, 2916, 2716, 3810, 2917, 2717, 3811, 2918, 2718}], 
        Line3DBox[{2720, 3190, 3684, 2719, 3191, 3685, 2721, 3192, 3686, 2722,
          3193, 3687, 2723, 1883, 2724, 3812, 2919, 2725, 3813, 2920, 2726, 
         3814, 3194, 3688, 2727, 3195, 3689, 2728, 3196, 3690, 2729, 3197, 
         3691, 2730, 3198, 3692, 2731, 3815, 2921, 2732, 3816, 2922, 2733}], 
        Line3DBox[{2735, 3199, 3693, 2734, 3200, 3694, 2736, 3201, 3695, 2737,
          3202, 3696, 2738, 3203, 3697, 2739, 1899, 2740, 3817, 2923, 2741, 
         3818, 3204, 3698, 2742, 3205, 3699, 2743, 3206, 3700, 2744, 3207, 
         3701, 2745, 3208, 3702, 2746, 3209, 3703, 2747, 3819, 2924, 2748}], 
        Line3DBox[{2750, 3210, 3704, 2749, 3211, 3705, 2751, 3212, 3706, 2752,
          3213, 3707, 2753, 3214, 3708, 2754, 3215, 3709, 2755, 1915, 2756, 
         3820, 3216, 3710, 2757, 3217, 3711, 2758, 3218, 3712, 2759, 3219, 
         3713, 2760, 3220, 3714, 2761, 3221, 3715, 2762, 3222, 3716, 2763}], 
        Line3DBox[{2767, 3821, 2925, 2765, 3822, 2926, 2769, 3823, 2927, 2771,
          3824, 2928, 2773, 3825, 2929, 2775, 3826, 2930, 2777, 3827, 2931, 
         2779, 3828, 1932, 2781, 3829, 2932, 2783, 3830, 2933, 2785, 3831, 
         2934, 2787, 3832, 2935, 2789, 3833, 2936, 2791, 3834, 2937, 2793}], 
        Line3DBox[{2792, 3730, 3235, 2790, 3729, 3234, 2788, 3728, 3233, 2786,
          3727, 3232, 2784, 3726, 3231, 2782, 3725, 3230, 2780, 3724, 1931, 
         2778, 3723, 3229, 2776, 3722, 3228, 2774, 3721, 3227, 2772, 3720, 
         3226, 2770, 3719, 3225, 2768, 3718, 3224, 2764, 3717, 3223, 2766}], 
        Line3DBox[{2795, 3236, 3731, 2794, 3835, 2938, 2796, 3836, 2939, 2797,
          3837, 2940, 2798, 3838, 2941, 2799, 3839, 2942, 2800, 3840, 2943, 
         2801, 3841, 3237, 3732, 2802, 1948, 2803, 3842, 2944, 2804, 3843, 
         2945, 2805, 3844, 2946, 2806, 3845, 2947, 2807, 3846, 2948, 2808}], 
        Line3DBox[{2810, 3238, 3733, 2809, 3239, 3734, 2811, 3847, 2949, 2812,
          3848, 2950, 2813, 3849, 2951, 2814, 3850, 2952, 2815, 3851, 2953, 
         2816, 3852, 3240, 3735, 2817, 3241, 3736, 2818, 1964, 2819, 3853, 
         2954, 2820, 3854, 2955, 2821, 3855, 2956, 2822, 3856, 2957, 2823}], 
        Line3DBox[{2825, 3242, 3737, 2824, 3243, 3738, 2826, 3244, 3739, 2827,
          3857, 2958, 2828, 3858, 2959, 2829, 3859, 2960, 2830, 3860, 2961, 
         2831, 3861, 3245, 3740, 2832, 3246, 3741, 2833, 3247, 3742, 2834, 
         1980, 2835, 3862, 2962, 2836, 3863, 2963, 2837, 3864, 2964, 2838}], 
        Line3DBox[{2840, 3248, 3743, 2839, 3249, 3744, 2841, 3250, 3745, 2842,
          3251, 3746, 2843, 3865, 2965, 2844, 3866, 2966, 2845, 3867, 2967, 
         2846, 3868, 3252, 3747, 2847, 3253, 3748, 2848, 3254, 3749, 2849, 
         3255, 3750, 2850, 1996, 2851, 3869, 2968, 2852, 3870, 2969, 2853}], 
        Line3DBox[{2855, 3256, 3751, 2854, 3257, 3752, 2856, 3258, 3753, 2857,
          3259, 3754, 2858, 3260, 3755, 2859, 3871, 2970, 2860, 3872, 2971, 
         2861, 3873, 3261, 3756, 2862, 3262, 3757, 2863, 3263, 3758, 2864, 
         3264, 3759, 2865, 3265, 3760, 2866, 2012, 2867, 3874, 2972, 2868}], 
        Line3DBox[{2882, 2979, 2032, 2881, 3772, 3276, 2880, 3771, 3275, 2879,
          3770, 3274, 2878, 3769, 3273, 2877, 3768, 3272, 2876, 3767, 3271, 
         3876, 2875, 2973, 3875, 2874, 3766, 3270, 2873, 3765, 3269, 2872, 
         3764, 3268, 2871, 3763, 3267, 2870, 3762, 3266, 2869, 3761, 2977, 
         2976, 2978}]}, 
       {GrayLevel[0.2], 
        Line3DBox[{749, 957, 3278, 750, 970, 776, 3373, 984, 790, 3378, 998, 
         804, 3385, 1012, 818, 3394, 1026, 832, 3405, 1040, 846, 1054, 3320, 
         860, 1068, 3332, 874, 3420, 1082, 888, 3424, 1096, 902, 3430, 1110, 
         916, 3438, 1124, 930, 3447, 1138, 944}], 
        Line3DBox[{751, 958, 3279, 752, 971, 3289, 777, 985, 791, 3379, 999, 
         805, 3386, 1013, 819, 3395, 1027, 833, 3406, 1041, 847, 1055, 3321, 
         861, 1069, 3333, 875, 1083, 3343, 889, 3425, 1097, 903, 3431, 1111, 
         917, 3439, 1125, 931, 3448, 1139, 945}], 
        Line3DBox[{753, 959, 3280, 754, 972, 3290, 778, 986, 3299, 792, 1000, 
         806, 3387, 1014, 820, 3396, 1028, 834, 3407, 1042, 848, 1056, 3322, 
         862, 1070, 3334, 876, 1084, 3344, 890, 1098, 3352, 904, 3432, 1112, 
         918, 3440, 1126, 932, 3449, 1140, 946}], 
        Line3DBox[{755, 960, 3281, 756, 973, 3291, 779, 987, 3300, 793, 1001, 
         3307, 807, 1015, 821, 3397, 1029, 835, 3408, 1043, 849, 1057, 3323, 
         863, 1071, 3335, 877, 1085, 3345, 891, 1099, 3353, 905, 1113, 3359, 
         919, 3441, 1127, 933, 3450, 1141, 947}], 
        Line3DBox[{757, 961, 3282, 758, 974, 3292, 780, 988, 3301, 794, 1002, 
         3308, 808, 1016, 3313, 822, 1030, 836, 3409, 1044, 850, 1058, 3324, 
         864, 1072, 3336, 878, 1086, 3346, 892, 1100, 3354, 906, 1114, 3360, 
         920, 1128, 3364, 934, 3451, 1142, 948}], 
        Line3DBox[{759, 962, 3283, 760, 975, 3293, 781, 989, 3302, 795, 1003, 
         3309, 809, 1017, 3314, 823, 1031, 3317, 837, 1045, 851, 1059, 3325, 
         865, 1073, 3337, 879, 1087, 3347, 893, 1101, 3355, 907, 1115, 3361, 
         921, 1129, 3365, 935, 1143, 3367, 949}], 
        Line3DBox[{8, 2043, 23, 2057, 38, 2072, 53, 2087, 68, 2102, 83, 2117, 
         98, 2132, 113, 2147, 128, 2162, 143, 2177, 158, 2192, 173, 2207, 188,
          2222, 203, 2236, 218}], 
        Line3DBox[{761, 3368, 963, 762, 3370, 976, 782, 3374, 990, 796, 3380, 
         1004, 810, 3388, 1018, 824, 3398, 1032, 838, 3410, 1046, 852, 1060, 
         866, 3418, 1074, 880, 3421, 1088, 894, 3426, 1102, 908, 3433, 1116, 
         922, 3442, 1130, 936, 3452, 1144, 950}], 
        Line3DBox[{763, 964, 3284, 764, 3371, 977, 783, 3375, 991, 797, 3381, 
         1005, 811, 3389, 1019, 825, 3399, 1033, 839, 3411, 1047, 853, 1061, 
         3326, 867, 1075, 881, 3422, 1089, 895, 3427, 1103, 909, 3434, 1117, 
         923, 3443, 1131, 937, 3453, 1145, 951}], 
        Line3DBox[{765, 965, 3285, 766, 978, 3294, 784, 3376, 992, 798, 3382, 
         1006, 812, 3390, 1020, 826, 3400, 1034, 840, 3412, 1048, 854, 1062, 
         3327, 868, 1076, 3338, 882, 1090, 896, 3428, 1104, 910, 3435, 1118, 
         924, 3444, 1132, 938, 3454, 1146, 952}], 
        Line3DBox[{767, 966, 3286, 768, 979, 3295, 785, 993, 3303, 799, 3383, 
         1007, 813, 3391, 1021, 827, 3401, 1035, 841, 3413, 1049, 855, 1063, 
         3328, 869, 1077, 3339, 883, 1091, 3348, 897, 1105, 911, 3436, 1119, 
         925, 3445, 1133, 939, 3455, 1147, 953}], 
        Line3DBox[{769, 967, 3287, 770, 980, 3296, 786, 994, 3304, 800, 1008, 
         3310, 814, 3392, 1022, 828, 3402, 1036, 842, 3414, 1050, 856, 1064, 
         3329, 870, 1078, 3340, 884, 1092, 3349, 898, 1106, 3356, 912, 1120, 
         926, 3446, 1134, 940, 3456, 1148, 954}], 
        Line3DBox[{771, 968, 3288, 772, 981, 3297, 787, 995, 3305, 801, 1009, 
         3311, 815, 1023, 3315, 829, 3403, 1037, 843, 3415, 1051, 857, 1065, 
         3330, 871, 1079, 3341, 885, 1093, 3350, 899, 1107, 3357, 913, 1121, 
         3362, 927, 1135, 941, 3457, 1149, 955}], 
        Line3DBox[{773, 1151, 1152, 774, 982, 3298, 788, 996, 3306, 802, 1010,
          3312, 816, 1024, 3316, 830, 1038, 3318, 844, 3416, 1052, 858, 1066, 
         3331, 872, 1080, 3342, 886, 1094, 3351, 900, 1108, 3358, 914, 1122, 
         3363, 928, 1136, 3366, 942, 1154, 1155, 1156}], 
        Line3DBox[{943, 1137, 1153, 929, 1123, 3437, 915, 1109, 3429, 901, 
         1095, 3423, 887, 1081, 3419, 873, 1067, 3417, 859, 3319, 1053, 845, 
         1039, 3404, 831, 1025, 3393, 817, 1011, 3384, 803, 997, 3377, 789, 
         983, 3372, 775, 969, 3369, 748, 956, 1150, 1157}], 
        Line3DBox[{1159, 1382, 3563, 1160, 1396, 1188, 3463, 1411, 1203, 3468,
          1426, 1218, 3475, 1441, 1233, 3484, 1456, 1248, 3495, 1471, 1263, 
         3508, 1486, 3612, 1278, 1501, 3625, 1293, 3524, 1516, 1308, 3528, 
         1531, 1323, 3534, 1546, 1338, 3542, 1561, 1353, 3552, 1576, 1368}], 
        Line3DBox[{1161, 1383, 3564, 1162, 1397, 3575, 1189, 1412, 1204, 3469,
          1427, 1219, 3476, 1442, 1234, 3485, 1457, 1249, 3496, 1472, 1264, 
         3509, 1487, 3613, 1279, 1502, 3626, 1294, 1517, 3637, 1309, 3529, 
         1532, 1324, 3535, 1547, 1339, 3543, 1562, 1354, 3553, 1577, 1369}], 
        Line3DBox[{1163, 1384, 3565, 1164, 1398, 3576, 1190, 1413, 3586, 1205,
          1428, 1220, 3477, 1443, 1235, 3486, 1458, 1250, 3497, 1473, 1265, 
         3510, 1488, 3614, 1280, 1503, 3627, 1295, 1518, 3638, 1310, 1533, 
         3647, 1325, 3536, 1548, 1340, 3544, 1563, 1355, 3554, 1578, 1370}], 
        Line3DBox[{1165, 1385, 3566, 1166, 1399, 3577, 1191, 1414, 3587, 1206,
          1429, 3595, 1221, 1444, 1236, 3487, 1459, 1251, 3498, 1474, 1266, 
         3511, 1489, 3615, 1281, 1504, 3628, 1296, 1519, 3639, 1311, 1534, 
         3648, 1326, 1549, 3655, 1341, 3545, 1564, 1356, 3555, 1579, 1371}], 
        Line3DBox[{1167, 1386, 3567, 1168, 1400, 3578, 1192, 1415, 3588, 1207,
          1430, 3596, 1222, 1445, 3602, 1237, 1460, 1252, 3499, 1475, 1267, 
         3512, 1490, 3616, 1282, 1505, 3629, 1297, 1520, 3640, 1312, 1535, 
         3649, 1327, 1550, 3656, 1342, 1565, 3661, 1357, 3556, 1580, 1372}], 
        Line3DBox[{1169, 1387, 3568, 1170, 1401, 3579, 1193, 1416, 3589, 1208,
          1431, 3597, 1223, 1446, 3603, 1238, 1461, 3607, 1253, 1476, 1268, 
         3513, 1491, 3617, 1283, 1506, 3630, 1298, 1521, 3641, 1313, 1536, 
         3650, 1328, 1551, 3657, 1343, 1566, 3662, 1358, 1581, 3665, 1373}], 
        Line3DBox[{1171, 1388, 3569, 1173, 1402, 3580, 1194, 1417, 3590, 1209,
          1432, 3598, 1224, 1447, 3604, 1239, 1462, 3608, 1254, 1477, 3610, 
         1269, 1492, 3618, 1284, 1507, 3631, 1299, 1522, 3642, 1314, 1537, 
         3651, 1329, 1552, 3658, 1344, 1567, 3663, 1359, 1582, 3666, 1374}], 
        Line3DBox[{1175, 1390, 3570, 1176, 3461, 1404, 1196, 3465, 1419, 1211,
          3471, 1434, 1226, 3479, 1449, 1241, 3489, 1464, 1256, 3501, 1479, 
         1271, 3515, 1494, 3619, 1286, 1509, 1301, 3526, 1524, 1316, 3531, 
         1539, 1331, 3538, 1554, 1346, 3547, 1569, 1361, 3558, 1584, 1376}], 
        Line3DBox[{1177, 1391, 3571, 1178, 1405, 3581, 1197, 3466, 1420, 1212,
          3472, 1435, 1227, 3480, 1450, 1242, 3490, 1465, 1257, 3502, 1480, 
         1272, 3516, 1495, 3620, 1287, 1510, 3632, 1302, 1525, 1317, 3532, 
         1540, 1332, 3539, 1555, 1347, 3548, 1570, 1362, 3559, 1585, 1377}], 
        Line3DBox[{1179, 1392, 3572, 1180, 1406, 3582, 1198, 1421, 3591, 1213,
          3473, 1436, 1228, 3481, 1451, 1243, 3491, 1466, 1258, 3503, 1481, 
         1273, 3517, 1496, 3621, 1288, 1511, 3633, 1303, 1526, 3643, 1318, 
         1541, 1333, 3540, 1556, 1348, 3549, 1571, 1363, 3560, 1586, 1378}], 
        Line3DBox[{1181, 1393, 3573, 1182, 1407, 3583, 1199, 1422, 3592, 1214,
          1437, 3599, 1229, 3482, 1452, 1244, 3492, 1467, 1259, 3504, 1482, 
         1274, 3518, 1497, 3622, 1289, 1512, 3634, 1304, 1527, 3644, 1319, 
         1542, 3652, 1334, 1557, 1349, 3550, 1572, 1364, 3561, 1587, 1379}], 
        Line3DBox[{1183, 1394, 3574, 1184, 1408, 3584, 1200, 1423, 3593, 1215,
          1438, 3600, 1230, 1453, 3605, 1245, 3493, 1468, 1260, 3505, 1483, 
         1275, 3519, 1498, 3623, 1290, 1513, 3635, 1305, 1528, 3645, 1320, 
         1543, 3653, 1335, 1558, 3659, 1350, 1573, 1365, 3562, 1588, 1380}], 
        Line3DBox[{1185, 1590, 1591, 3667, 1186, 1409, 3585, 1201, 1424, 3594,
          1216, 1439, 3601, 1231, 1454, 3606, 1246, 1469, 3609, 1261, 3506, 
         1484, 1276, 3520, 1499, 3624, 1291, 1514, 3636, 1306, 1529, 3646, 
         1321, 1544, 3654, 1336, 1559, 3660, 1351, 1574, 3664, 1366, 1593, 
         1594, 1595}], 
        Line3DBox[{1367, 1575, 3551, 1592, 1352, 1560, 3541, 1337, 1545, 3533,
          1322, 1530, 3527, 1307, 1515, 3523, 1292, 1500, 3521, 1277, 3611, 
         1485, 3507, 1262, 1470, 3494, 1247, 1455, 3483, 1232, 1440, 3474, 
         1217, 1425, 3467, 1202, 1410, 3462, 1187, 1395, 3459, 1158, 1381, 
         1589, 1596}], 
        Line3DBox[{1375, 1583, 3557, 1360, 1568, 3546, 1345, 1553, 3537, 1330,
          1538, 3530, 1315, 1523, 3525, 1300, 1508, 3522, 1285, 1493, 3514, 
         1270, 1478, 3500, 1255, 1463, 3488, 1240, 1448, 3478, 1225, 1433, 
         3470, 1210, 1418, 3464, 1195, 1403, 3460, 1174, 1389, 3458, 1172}], 
        Line3DBox[{1598, 1821, 3773, 1599, 1835, 1627, 3673, 1850, 1642, 3678,
          1865, 1657, 3685, 1880, 1672, 3694, 1895, 1687, 3705, 1910, 1702, 
         3718, 1925, 3822, 1717, 1940, 3835, 1732, 3734, 1955, 1747, 3738, 
         1970, 1762, 3744, 1985, 1777, 3752, 2000, 1792, 3762, 2015, 1807}], 
        Line3DBox[{1600, 1822, 3774, 1601, 1836, 3785, 1628, 1851, 1643, 3679,
          1866, 1658, 3686, 1881, 1673, 3695, 1896, 1688, 3706, 1911, 1703, 
         3719, 1926, 3823, 1718, 1941, 3836, 1733, 1956, 3847, 1748, 3739, 
         1971, 1763, 3745, 1986, 1778, 3753, 2001, 1793, 3763, 2016, 1808}], 
        Line3DBox[{1602, 1823, 3775, 1603, 1837, 3786, 1629, 1852, 3796, 1644,
          1867, 1659, 3687, 1882, 1674, 3696, 1897, 1689, 3707, 1912, 1704, 
         3720, 1927, 3824, 1719, 1942, 3837, 1734, 1957, 3848, 1749, 1972, 
         3857, 1764, 3746, 1987, 1779, 3754, 2002, 1794, 3764, 2017, 1809}], 
        Line3DBox[{1604, 1824, 3776, 1605, 1838, 3787, 1630, 1853, 3797, 1645,
          1868, 3805, 1660, 1883, 1675, 3697, 1898, 1690, 3708, 1913, 1705, 
         3721, 1928, 3825, 1720, 1943, 3838, 1735, 1958, 3849, 1750, 1973, 
         3858, 1765, 1988, 3865, 1780, 3755, 2003, 1795, 3765, 2018, 1810}], 
        Line3DBox[{1606, 1825, 3777, 1607, 1839, 3788, 1631, 1854, 3798, 1646,
          1869, 3806, 1661, 1884, 3812, 1676, 1899, 1691, 3709, 1914, 1706, 
         3722, 1929, 3826, 1721, 1944, 3839, 1736, 1959, 3850, 1751, 1974, 
         3859, 1766, 1989, 3866, 1781, 2004, 3871, 1796, 3766, 2019, 1811}], 
        Line3DBox[{1608, 1826, 3778, 1609, 1840, 3789, 1632, 1855, 3799, 1647,
          1870, 3807, 1662, 1885, 3813, 1677, 1900, 3817, 1692, 1915, 1707, 
         3723, 1930, 3827, 1722, 1945, 3840, 1737, 1960, 3851, 1752, 1975, 
         3860, 1767, 1990, 3867, 1782, 2005, 3872, 1797, 2020, 3875, 1812}], 
        Line3DBox[{1610, 1827, 3779, 1612, 1841, 3790, 1633, 1856, 3800, 1648,
          1871, 3808, 1663, 1886, 3814, 1678, 1901, 3818, 1693, 1916, 3820, 
         1708, 1931, 3828, 1723, 1946, 3841, 1738, 1961, 3852, 1753, 1976, 
         3861, 1768, 1991, 3868, 1783, 2006, 3873, 1798, 2021, 3876, 1813}], 
        Line3DBox[{1614, 1829, 3780, 1615, 3671, 1843, 1635, 3675, 1858, 1650,
          3681, 1873, 1665, 3689, 1888, 1680, 3699, 1903, 1695, 3711, 1918, 
         1710, 3725, 1933, 3829, 1725, 1948, 1740, 3736, 1963, 1755, 3741, 
         1978, 1770, 3748, 1993, 1785, 3757, 2008, 1800, 3768, 2023, 1815}], 
        Line3DBox[{1616, 1830, 3781, 1617, 1844, 3791, 1636, 3676, 1859, 1651,
          3682, 1874, 1666, 3690, 1889, 1681, 3700, 1904, 1696, 3712, 1919, 
         1711, 3726, 1934, 3830, 1726, 1949, 3842, 1741, 1964, 1756, 3742, 
         1979, 1771, 3749, 1994, 1786, 3758, 2009, 1801, 3769, 2024, 1816}], 
        Line3DBox[{1618, 1831, 3782, 1619, 1845, 3792, 1637, 1860, 3801, 1652,
          3683, 1875, 1667, 3691, 1890, 1682, 3701, 1905, 1697, 3713, 1920, 
         1712, 3727, 1935, 3831, 1727, 1950, 3843, 1742, 1965, 3853, 1757, 
         1980, 1772, 3750, 1995, 1787, 3759, 2010, 1802, 3770, 2025, 1817}], 
        Line3DBox[{1620, 1832, 3783, 1621, 1846, 3793, 1638, 1861, 3802, 1653,
          1876, 3809, 1668, 3692, 1891, 1683, 3702, 1906, 1698, 3714, 1921, 
         1713, 3728, 1936, 3832, 1728, 1951, 3844, 1743, 1966, 3854, 1758, 
         1981, 3862, 1773, 1996, 1788, 3760, 2011, 1803, 3771, 2026, 1818}], 
        Line3DBox[{1622, 1833, 3784, 1623, 1847, 3794, 1639, 1862, 3803, 1654,
          1877, 3810, 1669, 1892, 3815, 1684, 3703, 1907, 1699, 3715, 1922, 
         1714, 3729, 1937, 3833, 1729, 1952, 3845, 1744, 1967, 3855, 1759, 
         1982, 3863, 1774, 1997, 3869, 1789, 2012, 1804, 3772, 2027, 1819}], 
        Line3DBox[{1624, 2029, 2030, 3877, 1625, 1848, 3795, 1640, 1863, 3804,
          1655, 1878, 3811, 1670, 1893, 3816, 1685, 1908, 3819, 1700, 3716, 
         1923, 1715, 3730, 1938, 3834, 1730, 1953, 3846, 1745, 1968, 3856, 
         1760, 1983, 3864, 1775, 1998, 3870, 1790, 2013, 3874, 1805, 2032, 
         2033, 2034}], 
        Line3DBox[{1806, 2014, 3761, 2031, 1791, 1999, 3751, 1776, 1984, 3743,
          1761, 1969, 3737, 1746, 1954, 3733, 1731, 1939, 3731, 1716, 3821, 
         1924, 3717, 1701, 1909, 3704, 1686, 1894, 3693, 1671, 1879, 3684, 
         1656, 1864, 3677, 1641, 1849, 3672, 1626, 1834, 3669, 1597, 1820, 
         2028, 2035}], 
        Line3DBox[{1814, 2022, 3767, 1799, 2007, 3756, 1784, 1992, 3747, 1769,
          1977, 3740, 1754, 1962, 3735, 1739, 1947, 3732, 1724, 1932, 3724, 
         1709, 1917, 3710, 1694, 1902, 3698, 1679, 1887, 3688, 1664, 1872, 
         3680, 1649, 1857, 3674, 1634, 1842, 3670, 1613, 1828, 3668, 
         1611}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
     VertexNormals->CompressedData["
1:eJztyCEOggAUANA/HNkzGDwFbAaLs8iMbhDYDCS4hXfgIM5ZSHZvYoeigWol
vfS2t6nb8zWJiO06YvXz1N2n17Efsv0hnR7PoWwu4+392Xnvvffee++99957
77333nvvvffee++9995777333nvvvffee++99957771f5ov58/kr77333nvv
vffee++9995777333nvvvffee++9995777333nvvvffee++9995777333nvv
vffee++9995777333nvvvffee++9995777333nvvvffee++9995777333nvv
vffee++9995777333nvvvffee++9995777333nvvvffee++9995777333nvv
vffee++9995777333nvvvffee++9995777333nvvvffee++999577/3f/wKP
PJVc
      "]], {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{345.6659389208027, 229.4438770114518},
  ImageSizeRaw->Automatic,
  Lighting->{{"Ambient", 
     GrayLevel[0.5]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{0, 2, 2}]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{2, 2, 2}]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{2, 0, 2}]}},
  PlotRange->All,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.3308779772371762`, -2.8408529821130446`, 1.268194836657406},
  ViewVertical->{0.018695991977955597`, -0.10330013811705743`, 
   0.9944745051276866}]], "Output",
 CellChangeTimes->{3.823975913135416*^9},
 CellLabel->"Out[67]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy0vXn4pVV1Jnr6zPP5zUNVAYUFiqDIoEgBhQUFhUxCDaAMBQUFCChQUMyg
yKTikI4xiUm6E4wZjVPadkDTubYGE9uYTt9OYmcm2pr0/a8z9nSf59z1rr3W
/tbeZ33nd+inbz1Pnd85++xv2vtd73rX2sO5/Kb7b7/1rpvuv+PQTVsvuu+m
w7ffcejI1t333EdFtX9WqVTPq1T+2Xu2Vur0flyp+C+7KpX/fwsew0t7fNtt
t30tL63URrfeeuvn6T9/etF8/3jxPQ699ZZbbqn8lvn+XeH7y+k7fM+fvmG+
fyJ8j+/i+f+t+f494fvXvf3tb39av7f392RxfEX//V+T3+N4vrf8+8ec4+tO
2W9OHnOEvn+lnrMWXlduv/32j+l92uuEdmrhnLgXPS2ORxnaL3mu0G71I9Ju
+I/n/7qp8n+i0z8Ybnsr3dLOQ4cO8acvmO/fz2+b+P4JIINu4SW5Zby3VZ9J
T4XqlSoqV2p4H09vymLr/itzntBjLZznINV8Xp4eR8XzhB6q4zu9LZR/3pzm
3dNPg/JKi+s08B3qoGysl7C3FDq8bs+F81Rx3UrtoGIA/9qhwbQaPuB0etpf
N2d9uGhbVNe21buphvbUj/ypEx7Knl2vgEP5xj9nLvHA9Es0uD/QHN1wMZzg
awrfalH2kt7AZ83J7/Ox8bw8amiJWnKvcpnEsuQyegr+9BlzmXumX6bn3Ll3
mVrRnLHep81l3ulfRiE3DIfj69gYcpmXBDr8iZHJwLAnv53fNtQ2LBhD5YXi
7uIdh86uKbjDKYqyaEC/Zi4kzz/VeCoBMDjH0cVlI8YaxZOiCpfbS7zSadzt
/NrKDUSP59apOy14FLcW7qxVfBtN8JMbXPWMosvsVfVpOkX3xEO2hLIElHJp
a6aVX93g0qenl84N6yTnMm3nMr+ywWVOmX6Zk50m7RSXiWW/vMFlXhvawTOx
SCunOsfJtZ5QKOPfL21wrROLR/LM2WO90AqpnXWLetGcf3GDS7+yaK6pHirY
MIpOda7MhMNGa6/3Cn7bgP+vmH98/eOL5s2tP17XoCN/7qQt+qEsIYBP5PdR
5cvWVGjwp1cUN1HqD891LjgoLhjLfn7ywY8WAYj/KloqxxR9ba+p5zo/nDqx
kkHRR9FK7OWOC9+/zVxOjLpdZiXae7ucyw2dy33cXM6D0Wr6VPnlakWDRUSd
X/RuROuoKIuXft5cekdxGc9Qmk5f7XLu1lwm2ujPmcucNf0ynaLRogV4l5kr
6sXL/Ky5zBv9yyj+94bDE0ObL54wNtq/NKcMHJyYlWrTaFaXhHNsrYRIg9u3
7XQQ+182anuFYICdad40nuUirtvAlQ7KlV7CebbOV8kebzi9SVesmH+N4uli
/y0WdxYR+jPmfgxP52422nDNOe8uOc7cG+5r/KZX1MfvvqA9/s23D6g7/9/n
5umVyuJ9FvpwubizeNafNndmWN1zxS3npnbKIdI1X9OboqYa/+zVvXZxP0/o
/YiESCx4KZQlFmzv7FXpneXWyn6kim93FI20UxqJ7+kYuad/8/Y+hcf/67m5
Gr3Mh/bC3R0su7Nl585+ytzZcdPv7GKn0/R+3kWdhvsZ4X7oVv784eFYm7RW
XDZa4kooS7jmY+ZWji2OiTpcPGMiSS8q+uxg3j4/e3V3SW6Hbi2/nYQszO1E
i/9JcztBlnbKOAlfxpa+MO22J/r9/kS3rRX39ZLelwiNhHFWi16MTfcT5r42
Fc00VUDUivPE5juPX9ul3fm2s48a//rtR/XG/+v9c3N8v9ykL1WKf3qv6+H0
CTH+uLnNVWmSaXrDiN54jnOn9e5V3RpujVrx++9aGp9++unjf3dkvbKMsibf
bgOPodQRLZ2bjInV3uFScYelYsQLSdlZVXGDlcYTzi1WWs49buayujKb3trm
cP6EbH/M3OO8tEaJePECwjfKY5X18b+5rV/pyR3SnWV3yFz30kknnfR8IWpS
ofcRc3vDtAlz9mB7Mx40gki9Zt7J8AXUguM/f2gIWpm4xxUua3HLovzd+145
vvXNJ44vO/d1470XvMHes7YJA03u+ff4Ncln4f32tJFLtFRipOcXKJ2AwL+8
ChwU7x33hntfMKggG8O9k0+mb8nGPnbgWK5LNcZfunvb+LLLLttZqdhHiYz5
o+FRvhNuAMXn040hdYf/50urv6F4pCm6LXmkczPcdDqdBDe/QbgZjP/n++cU
PHgIPBw+Dfm1yQ+Hh9FOQQdRvaYcgkavCPfJwyXu4J+Hh/vd8BVCh7ep1Ukv
4HPMXZrIdFbZeDa/pgyIJzyXkKcMSDe9jgetyl3jgfRBO6W9WOOHlV6Ek2Z7
xxOTxSnjm4eOjf8jyUMjSR0fsOY0xGunP7Txjh4y63gwuld0EO4XnzZJmVoT
PjX4tRWfUzsUfwWtlb484yN3Xjf+L89shuXiOY8qmj2S0oeTZ4zJafwT1fJ5
W3aCYNFR1VHr7i7wurNitK4+LPDaNk/7k3TX8WmrKKry5+b4e/SMP5mB9nO3
H8UHh35sjD9495Xj7z5xPFuouhh50ChW8O9DyYMmgsPL6IeofKq4j+R+QTje
QpegR49L5xQD5QfqykPjsfBI9CjSxS0uwyPiP0gVf/Ho36LuXJTm+Nkju8ff
eOwUfOLHFZcV0mR40Jf5jE7QXxYwJI5sJ7+WInnOecwVLqtz2ecK1HJvC8Dx
VKi0FGDw6w+dXZMTEQU8r/dsHF90XB9IHvvzG2HYyTvYdGTbaamzpaXk4See
GpBech573vQu9aQH5krNMQU9F3obvR4+xdY46LRGlAHPJa2R0LJhrcu1+lFp
a+Q+1hgzrsq03Gw2E+ezZp4c2AVmB+bJPxfoeALXTafF7JPDtO2T/9lDw9xJ
aR6aiSd9cs9JYZAvDsptmuXJO/rkKcr3d8ffui/IH/oLOnvf3ILTDJ3pTNZz
DlmUsr8h4n6YCDwYTij7hevmvBaIbjoMyG2kQdalTx1HFSmTOc3T0gcA91v7
dDP/4318Y++bs00xh4Ku81h1U/atoBAT/4yy/8mCpaxJuuyzhSZyJhnfcP5x
LzUajZ0VX8C8L7RMidA0STvPdZuxruhPdjqGoW30+K42t1Gb26g2/h1pH/pL
HovKltFK9EDmIRNLUYculqKQ+JYobrSJpRbA5JlrXjNBLVU57jeCzrGUkQwK
vjd89YPQ52CLxhPCiklYaAZ/ojPYkbZDxAl0G8zkTx8ckh6ZbIchynrcDmQe
jy+N371XGGLH6/j9595+FKNryXn4MnY5ePDg+GdvOSFhFxN32gGe+ADPhq++
VxhFaVhsdKuesaIxSiVzCwcCTcw7j77EZZ3xX9FT01OO3zX55JFZEnv6lkQt
9NjCLJ0yZmEbEcEQ1da5JnsnTZFopDBIX/nLoilKhwkvmAH+y86zz3FZKz77
Lbhtem78xWfUqTnHcdkqw6XGz4dnLajRdzTCK5F7jICybZKKC1ZS0hJ/VgA+
pms4OLswffzY64uLi+M737TIj7/uPEYPZVU8PREBuk2f/12h313KGKBsIJSh
fQ3e/Z404q1yEgUPAaflKIhOmYLgR346FPyx4Hn6vINEHe3k126ZCeDuub/l
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
nZXe7IQBeKLVWittJwxonS3nUftwyvUSrLv/ZJtv3DP16thErRUlZRMdklcF
hZA479hEbzp2OpWbVhKA7atv+S6DrSO5qixCy1UVaKVylQteJUQUda5Ti41B
4nrZnpcS720hCj7Le2/0vkP2k8qDtYmhwPmNDec3UbWQprSaGreu2pTkK4FB
Xseu0xllackGGmQbxiczzG4iA3lKLfyG+J5egFpayiFvQHlnlb31lL296U1v
4u6Ex8ElXlpVriUpq7ah97HNrRPl/mq8bSomtZZki846zPcVNzAzzHO4gDyR
Sp6v577/yWxV+0uoQ0hDhVYG2t8tG/6y19Y2e4a3W1HeThvW7t27cTXcG+Rk
yhdlHylzre/CRac1CCGMN6Jh4rQow/44MNalviJXmQh5VsodrNrs1k2mqy6p
2bP9mY7rlb1JACAlVDhp1bbYNvrAVwpy/dnZNHGmPDyt88qQ2zGnI06Nguh+
5NQSIVhqq4cHMbbjmJFtOH9tmqQsYfZRMoKKrhBxTPgvWeagQ2MOMV585SvB
rsbBrlQlkuwKPcjP3fe94L73twyj+Bb+Tk0jeZC+dgfplGZW/9TEtorRAp6k
Y3iiDR4vokusyRq/ZHNly9xUCLVyfYVM2makpErf4pyKt2K7Wk1ic7DWItFe
YliZUfVrTXXU7pw9VvZFaUNGtKcixQk5ZFa8WeXBXUFEi2fMgln5Sst173u2
j2ZVoFmJSZWe5rfg1/jMLqG3uqC81c/xCqMggHJdDPePVDdkVLi9ol1EoiWU
qDzhPaks1mkoT6vTCBQt+T0bGw7PzBVZEVFyz8rtDRMVBSZYo6AWJTrqx8we
xz/7lmL3RkX74mKmDh2Tz9vRO0Wme7Mo0/zd+fHPX0rNJ9G9F9CdXFJJD3JD
Px/XWV8/CuOSugt7klF0xZp5mymrUTanEzd64qqVkZ3pFu2vyT6xW/Y8sTfq
tXdmPSXMxJ0uizs9/WMHZmct13lrkSVGVexmvSbQmwv12mQfIwOT3oJtDv4O
kRUdFkO4+uqr8cveys7iiJvwPpjFSE2vmqceHh40GY12TeF5XwBauTRr8BUs
tDbmZQrqNIWKEquNjMHTitRHai9lzhtH0USTl7Ho1/08VPMNLaONQX8b4rmb
JvvJMvH45fNKz/jFlbSfRLym7PDpH+fz45+7tAKzz2Il/toXKr42CpepzTBD
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
Fpvj7G/9f2QxSLE=\
\>", "ImageResolution" -> \
120.],ExpressionUUID->"6abeb5f9-0b8d-49ae-9912-19ce5d5704eb"]
}, Open  ]],

Cell["We can also draw them on the original plot", "Text",
 CellChangeTimes->{{3.82299711180614*^9, 
  3.8229971191969137`*^9}},ExpressionUUID->"5f1c4167-382c-42bf-83ff-\
ef71614c9388"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decisionr", "=", 
  RowBox[{"r", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "+", "b"}], "\[Equal]", 
        "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]", ",", "bsol\[Lambda]"}], "]"}]}], ",", "r"}], 
     "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.823975936715414*^9, 3.8239759671239634`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"28cee7ac-875e-4cdf-957c-839a3247c0d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.5209390816287066`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2.5235048296294593`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "+", 
    RowBox[{"0.025164660939410055`", " ", "\[Theta]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.823975968754363*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"6bc8b0db-65e2-4f7b-b643-16a97c38f33e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors3D", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"PolarPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decisionr", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", 
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8239759745949907`*^9, 3.8239760531264596`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"6ac297d6-aa98-47c5-b46c-1b129f562aa8"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.0009402659049429163, 0.11141564362630568`}, {
          0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918226`, 
          0.034500797441814446`}, {-0.02990472311744523, 
          0.05854307847237184}, {-0.4835702248162677, 0.24533902079622935`}, {
          0.20390719257284282`, 0.10887728322031986`}, {
          0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{
          2.041251388907825, -0.35539451182767}, {-0.729497294004517, 
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
          0.7549130603093654, -1.6895760872115724`}, {-0.5094375357680065, 
          1.9943197246955076`}, {-1.8706064275341703`, \
-0.14104829949370085`}, {1.4543618707479875`, -1.18363578035018}, {
          1.853565067751745, -0.4895674667312021}, {
          1.9874646392084663`, -0.5256987415568544}, {0.29568064965204355`, 
          2.0791324971956673`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.7549130603093654, -1.6895760872115724`}, {-1.8706064275341703`, \
-0.14104829949370085`}}]}}}, {{}, {}}}, {{{{}, {}}, {}, {{{}, {}, 
         TagBox[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1: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
hJOqVKy9/MJP/w88JOY1
            "]]}, 
          Annotation[#, "Charting`Private`Tag$77498#1"]& ], 
         TagBox[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1:eJwV13dcTm8bAPA0FAnJKJJSSJMi6ocrkUKSiITQUka0FA0jSYWmtGhoD7Q1
r4aWdimVtvbePeOces/71/P5fs45zxn3dV9DxOChtjErCwvLEzYWlv//pnwU
jljJuYQvXOvqvnh+z4077eY4tHIJHbNfuB0Le4DPzp9YXUy5PJalSjjMEdck
GKn7U6Yp2jmyHH6N13ZxHDagrNt3Z1tn6DtM0jzWuptyo8F/WY3OPnjTSVKq
j2MJ0xXi9ZIO+eNUw/C+IMq6jte57UcDcXx/wKA6ZdOilL7/Qj/hkNoVrSn2
JUzbteq5bVwYWrw5fc+Lske0Zc5p5whkk/E9vJeyhte5/RtvRCKrkt6PbLYl
jFG+ZN6sEI2x1qUjJyl7dZ9Y9lwfi3P3V9SVsS5h3vP2R8ojcSif5pOauWIJ
O+X59776lIRRrKopYpRtR8+4bbb9hlE8TkbuLEt4ecOXJc3Y73i1+3wfLJMo
rDm+t+RFCsb81U7xXCJRx3OduK15KgYyvh9oIUk0tSis2HktDZmeJlcuEiQK
3PLjNTmQgcL3FWguTBKjPgedJIUzUfaQtmYyg8RJknHgHc8PbBy02DZDI9Fy
IuGO/0AWXtvaqCw4T6Ko79NfagF56HrX1nfjHInn1k1++vwqH131Pn/imCVR
d3W+wdgjxJfbklvrp0g0vH9uPD2yAC3O0egbxkj8zzdwO8OhCOUMUnnrR0jc
4hYtvjRThPbbA/+5DpOYuCetlDAtRovdepldAyRurtt8evjSTyRqNfYe7iGx
mTh00kGqFDlXjgrmdpHYsOD480JEKdqtq64+3EniCvknM8L8ZViWv9pM8C+J
Hz6v6k9gK0fBkz7eb3+TyFp0js2irQKxo4yXt5TEtqumwqGvq7Fi0pt1sZjE
3o69D3s4anD7xQSr34XUcZVs+a0uNci99LzVJo/EC++X3po716LGSbky7TQS
i8e6T9RiHWZLW9bYhJEYcYB3lsxuQOtgs62/P5Eo0z2ifobRgHlsn2b2BpMo
/rgp00uxEflecZ7N/UDiOqnIAO4fjajrEJZq707ioYTl+5lpv6n3tdhrYkmi
EF/Rpz+Jzdhj5Rh+9CGJ1+ZGefNGmzFedlvamvskevOIPguW+INBTxYSvY1J
jIxbJlRi/+DZHZtWHdKl/k+y3UvpSwua+qzTnvqPxIw9dVa5H9tw1L6nXYwk
8MDTj3bvn3bi+fw9Sop0AtmPRcxcTuvE97dDjE7NE1i5Zub6lolOPOGvsOvs
OIHNpkvlz2534aaLwZZL7QQ+CCjPWBDtxj9uRrI8OQReG2NJ/biqB0cndvE3
WhCYIbjrP5v6XiyVFAW2BwSulkpN+DXei4d7uq5ImRIYws+2f9vqfxjBGmZo
pk/g+OnqG0kq/3DH7j+cnmeo+3v42X9I/YfxH7Kj3EQIPCzzJtbcrw/drp6N
Uf3FxMHKLr6N2gN44fiCXOpPJlrGeP2QfzCA6WuNhbciE1el36s+92YALT8J
7v6dysQDGZXSFvkDaPpOlp0ewkT3i983WksM4kLJ6GlOcyauj/T9a7RiCMff
TqsqczMxmz78qSR+GC/t/9DSzs7EkL/NXbtLhpFOmBKWSwzMuLyq9EXXMH6X
XSA9phlY7rbHRGzjCE5FaG2y+MPAP3cJVUHHEUx9qb3MFcHAGrvetfXnRvGT
mpmBvRwDOb4pWIqOjOGR8YYDyRIM3DZVvNzMMY5k6ee0rp0MVFRtEH8pMo5F
RmYlu/kYyC7hIIO643imx+fejVk6pnxslG0sHcfdUXtrzVPoKMUmcuF6+ARq
z65wkZOk4w0Bt3+de6bwp/qsx8uddCzwvsWQODiFmoyXbysF6Lgo42psqTKF
UzfdX6lz0ZGDfXTv7PUpjNRd8XGij4abBJ6w5XpP4VzFwZfjITQs/OpeeIcx
hT33lXPLOWk4p3N3mqd8GuOWyJPdS4vIqag62tc4jT7brWjT84t4L7LOPLNr
Gk3GbIbY+hbxqbs95/nFaZzU/SXZi4t458u0jPruGRTZ9f0/98eLyKX4oeWm
8wxm2AfGBXQtYEZ6dN96pVls2ttHozct4Pzd04EXVWfxu8P2PJ2qBWzs6nL0
1ppFk7ilJOLHAtrtWa5cMplFm1uHbbh8FnBlyJhsqO8s7hBtzBE4sYBe2xOy
5kZnsTBc4sWB8HnsEPST6Q6YQ4kinotr/OexcKjW7k7kHB524mbpdJ/H7zfW
/Rj6NodVNQ9p5tbzKCzzkqu1dA6Dbcfy1dTmUfQc/cOjuTn8azz45s/oHArv
2OpppzmP46qLwa775vDGksePJnIeJ9uzToeLzaFu9WrzD1wLuFgbeiydfw4/
H1FL1eRbQH3zUu4qljmMGansThJfwOrABx/S62bRsljOSujiAuZmdz21fziL
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
P+8USfh25H95gIEF
            "]]}, 
          Annotation[#, "Charting`Private`Tag$77498#2"]& ], 
         TagBox[{
           Hue[0.1421359549995791, 0.6, 0.6], 
           Directive[
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1: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
wmyHSddUi8w7Pkg8/j/0eB8C
            "]]}, 
          Annotation[#, 
           "Charting`Private`Tag$77498#3"]& ]}}, {}, {{{}, {}, {}, {}}, {}}}, \
{}}}, {AspectRatio -> Full, PlotRange -> All, DisplayFunction -> Identity, 
     DisplayFunction -> Identity, AspectRatio -> Full, Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8239760538985524`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"0cca38a0-8b68-4321-adaa-3ae5f1fb988f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors3D", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
           RowBox[{"\[Phi]3D", "[", 
            RowBox[{"{", 
             RowBox[{"x0", ",", "y0"}], "}"}], "]"}]}], "+", "b"}], 
         "\[Equal]", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "/.", 
        RowBox[{"Join", "[", 
         RowBox[{"wsol\[Lambda]3D", ",", "bsol\[Lambda]3D"}], "]"}]}], "]"}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x0", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y0", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823976072792468*^9, 3.8239761939593253`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"31c609ef-fda8-46b5-b57d-15b4077e6233"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.0009402659049429163, 0.11141564362630568`}, {
          0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918226`, 
          0.034500797441814446`}, {-0.02990472311744523, 
          0.05854307847237184}, {-0.4835702248162677, 0.24533902079622935`}, {
          0.20390719257284282`, 0.10887728322031986`}, {
          0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{
          2.041251388907825, -0.35539451182767}, {-0.729497294004517, 
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
          0.7549130603093654, -1.6895760872115724`}, {-0.5094375357680065, 
          1.9943197246955076`}, {-1.8706064275341703`, \
-0.14104829949370085`}, {1.4543618707479875`, -1.18363578035018}, {
          1.853565067751745, -0.4895674667312021}, {
          1.9874646392084663`, -0.5256987415568544}, {0.29568064965204355`, 
          2.0791324971956673`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.7549130603093654, -1.6895760872115724`}, {-1.8706064275341703`, \
-0.14104829949370085`}}]}}}, {{}, {}}}, {
      GraphicsComplexBox[CompressedData["
1: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

       "], {{{}, {}, 
         TagBox[
          TooltipBox[{
            Directive[
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            
            LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
             17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 
             33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 
             49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 
             65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
             81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
             97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 
             110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 
             123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 
             136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 
             149, 150, 151, 152}]}, 
           RowBox[{
             RowBox[{
               RowBox[{"1.5355418831892178`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.0182823091543083`", " ", 
                 TagBox["x0", HoldForm]}], "+", 
               RowBox[{"0.07432662751097369`", " ", 
                 TagBox["y0", HoldForm]}], "-", 
               RowBox[{"0.7079166849826981`", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox[
                    TagBox["x0", HoldForm], "2"], "+", 
                    SuperscriptBox[
                    TagBox["y0", HoldForm], "2"]}], ")"}]}]}], "\[Equal]", 
             "1"}]], Annotation[#, 
           1.5355418831892178` + 0.0182823091543083 HoldForm[$CellContext`x0] + 
            0.07432662751097369 HoldForm[$CellContext`y0] - 
            0.7079166849826981 (HoldForm[$CellContext`x0]^2 + 
             HoldForm[$CellContext`y0]^2) == 1, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJwt0dciFgAAQOHfaEkhoSIrGYUoFa/RI/QAeZ6slhEaGnZWC5UURSlRGohK
tFD5Llx8d+fupJwsPnEqKBAInOM0JZRSRjkVnOHsenOeC1RSRTU1XKSWOuq5
xGWucJUGrnGdG9ykkSaaaaGVNtq5RQeddNFND7e5w13ucZ9e+ujnAQ95xACP
GeQJTxlimGc8Z4RRXvCSMV7xmnHeMMEkb3nHFO/5wEc+Mc0Ms3xmjnm+8JVv
LPCdRZb4wU9+8Zs/LLPCKn/5x38CJgURTAihbGAjm9jMFsLYSjjb2E4EkUSx
g2h2EkMscexiN3uIJ4G9JJJEMimkso809pNOBplkcYCDZJNDLofII5/DHKGA
oxzjOIUUsQaVEFsY
             "]]}, 
           RowBox[{
             RowBox[{
               RowBox[{"1.5355418831892178`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.0182823091543083`", " ", 
                 TagBox["x0", HoldForm]}], "+", 
               RowBox[{"0.07432662751097369`", " ", 
                 TagBox["y0", HoldForm]}], "-", 
               RowBox[{"0.7079166849826981`", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox[
                    TagBox["x0", HoldForm], "2"], "+", 
                    SuperscriptBox[
                    TagBox["y0", HoldForm], "2"]}], ")"}]}]}], "\[Equal]", 
             RowBox[{"-", "1"}]}]], 
          Annotation[#, 
           1.5355418831892178` + 0.0182823091543083 HoldForm[$CellContext`x0] + 
            0.07432662751097369 HoldForm[$CellContext`y0] - 
            0.7079166849826981 (HoldForm[$CellContext`x0]^2 + 
             HoldForm[$CellContext`y0]^2) == -1, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             RGBColor[0.560181, 0.691569, 0.194885], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJwVz9c6FgAAgOHfpXQbFUkZyQiVtOiXRENFMkKpCKUITRGJVFpGqChpSEsa
KnQpvR28z/OdfkuCecn7QwKBQDdLxTKWE0oYKwhnJRGsYjWRRBFNDGuIZS1x
xJNAIutIIpkU1rOBjaSyiTQ2s4WtbGM76WSwgyCZ7CSLXWSzmxxy2cNe9vF/
LI8DHOQQ+RRwmEKOUEQxJZRylDLKqeAYx6nkBCc5RRXVnKaGWuo4w1nqOcd5
GmjkAk0008JFLnGZK1zlGq1cp412btBBJzfp4hbd9HCbXu5wl3v0cZ8HPOQR
j+lngEGGeMIwI4zylGc8Z4xxXvCSCV4xyWve8JZ3TPGeaT7wkU985gszfGWW
b3znBz+Z4xe/+cM8Cyzyl38kIl79
             "]]}, 
           RowBox[{
             RowBox[{
               RowBox[{"1.5355418831892178`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.0182823091543083`", " ", 
                 TagBox["x0", HoldForm]}], "+", 
               RowBox[{"0.07432662751097369`", " ", 
                 TagBox["y0", HoldForm]}], "-", 
               RowBox[{"0.7079166849826981`", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox[
                    TagBox["x0", HoldForm], "2"], "+", 
                    SuperscriptBox[
                    TagBox["y0", HoldForm], "2"]}], ")"}]}]}], "\[Equal]", 
             "0"}]], Annotation[#, 
           1.5355418831892178` + 0.0182823091543083 HoldForm[$CellContext`x0] + 
            0.07432662751097369 HoldForm[$CellContext`y0] - 
            0.7079166849826981 (HoldForm[$CellContext`x0]^2 + 
             HoldForm[$CellContext`y0]^2) == 0, "Tooltip"]& ]}}], {}}}, {
    AspectRatio -> Full, PlotRange -> All, DisplayFunction -> Identity, 
     DisplayFunction -> Identity, AspectRatio -> Full, Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.823976195085779*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"ac547234-b52b-4838-ac3f-5336a1d54389"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implicit map using the Kernel trick", "Subsection",
 CellChangeTimes->{{3.822998220085464*^9, 
  3.8229982269816713`*^9}},ExpressionUUID->"9e25d241-1cf9-4572-b6f8-\
5b01afad8606"],

Cell[TextData[{
 "Instead of defining the map explicitly, the fact that our optimisation only \
depends on the inner product of samples means we can use the kernel trick. \
Let\[CloseCurlyQuote]s define a kernel ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["x", "i"], ",", 
        SubscriptBox["y", "i"]}], ")"}], ",", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["x", "j"], ",", 
        SubscriptBox["y", "j"]}], ")"}]}], ")"}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["x", "i"], 
      SubscriptBox["x", "j"]}], "+", 
     RowBox[{
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["x", "i"], "2"], "+", 
        SuperscriptBox[
         SubscriptBox["y", "i"], "2"]}], ")"}], 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["x", "j"], "2"], "+", 
        SuperscriptBox[
         SubscriptBox["y", "j"], "2"]}], ")"}]}]}]}], TraditionalForm]],
  ExpressionUUID->"896231a9-80c6-4035-8d76-2e4906b1669a"]
}], "Text",
 CellChangeTimes->{{3.8229982370847178`*^9, 
  3.822998367705614*^9}},ExpressionUUID->"1139c56a-36cd-4f56-843f-\
66c2dfee1852"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xi_", ",", "yi_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"xj_", ",", "yj_"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"xi", " ", "xj"}], "+", 
    RowBox[{"yi", " ", "yj"}], " ", "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["xi", "2"], "+", 
       SuperscriptBox["yi", "2"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["xj", "2"], "+", 
       SuperscriptBox["yj", "2"]}], ")"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823978761960493*^9, 3.8239787629777412`*^9}, {
  3.823978945637721*^9, 3.8239790038636856`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"7fe06579-08a3-452d-a7e5-582c4345b97f"],

Cell[TextData[{
 "We now set up the dual optimisation problem by computing ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", " ", 
    SuperscriptBox["X", "T"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2e43f09e-bfad-4fa4-8676-bdc3720628bb"],
 " directly using the kernel:"
}], "Text",
 CellChangeTimes->{{3.822997603357193*^9, 3.82299761824004*^9}, {
  3.8229984162844133`*^9, 
  3.822998436092779*^9}},ExpressionUUID->"db335bfd-2d20-4a9a-8c3f-\
e2e587fd670b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xi", "=", 
  RowBox[{"Join", "@@", "nonsepdata"}]}]], "Input",
 CellChangeTimes->{{3.8239790093285155`*^9, 3.8239790141401205`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"d73b56ca-944e-422d-a216-a8d348e66ad7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.19418006351395`"}], ",", 
     RowBox[{"-", "0.7939897238477599`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.0009402659049429163`", ",", "0.11141564362630568`"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.6985681983270928`", ",", 
     RowBox[{"-", "0.36790456437588814`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.00295604144687557`"}], ",", 
     RowBox[{"-", "0.18777988106197538`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.23888242209918226`"}], ",", "0.034500797441814446`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.02990472311744523`"}], ",", "0.05854307847237184`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.4835702248162677`"}], ",", "0.24533902079622935`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.20390719257284282`", ",", "0.10887728322031986`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.10538241515767546`", ",", 
     RowBox[{"-", "0.38172681750042337`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.1824956607100494`"}], ",", 
     RowBox[{"-", "0.6762831160175996`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.041251388907825`", ",", 
     RowBox[{"-", "0.35539451182767`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.729497294004517`"}], ",", "1.9430725958833286`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.9582099623680669`"}], ",", 
     RowBox[{"-", "0.14589014711693948`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7549130603093654`", ",", 
     RowBox[{"-", "1.6895760872115724`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5094375357680065`"}], ",", "1.9943197246955076`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.8706064275341703`"}], ",", 
     RowBox[{"-", "0.14104829949370085`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.4543618707479875`", ",", 
     RowBox[{"-", "1.18363578035018`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.853565067751745`", ",", 
     RowBox[{"-", "0.4895674667312021`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.9874646392084663`", ",", 
     RowBox[{"-", "0.5256987415568544`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.29568064965204355`", ",", "2.0791324971956673`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.82397901563013*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"0d854a3e-30e4-4ec3-b292-8da8460e74ab"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823979018508445*^9, 3.8239790562513475`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"71dd7b61-2545-4bf5-898c-812b144b2284"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "xi", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239790581513033`*^9, 3.8239790662956376`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"5e208ae1-798b-4a66-988e-8bf5002ecc42"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "xi", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.823979067837075*^9, 3.823979083557317*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"a769be69-df42-413b-afcc-4fe6e0b8035b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"functionToMaximise", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "0.5"}], " ", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Lambda]i", "[", "i", "]"}], " ", 
        RowBox[{"\[Lambda]i", "[", "j", "]"}], " ", 
        RowBox[{"Y", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
        " ", 
        RowBox[{"Y", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}], 
        " ", 
        RowBox[{"k", "[", 
         RowBox[{
          RowBox[{
          "xi", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], ",", 
          RowBox[{
          "xi", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}]}], 
         "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "xi", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "[", "xi", "]"}]}], "}"}]}], "]"}]}], "+", 
    RowBox[{"\[Lambda]", ".", "e"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239790872720013`*^9, 3.823979193766962*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"ed6dc244-c52d-4d17-b40d-f4db325bb572"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"maxk", ",", "sol\[Lambda]k"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"functionToMaximise", ",", 
       RowBox[{"\[Lambda]", "\[GreaterEqual]", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239791983484654`*^9, 3.823979229120575*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"91750c91-84ea-484a-9474-ccca9ac362b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol\[Lambda]k", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.823979231656337*^9, 3.8239792368058167`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"d055d928-3247-4b6f-becd-9ab068dd9907"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", 
    "0.25344350661905934`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", 
    "0.1548634734613137`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", 
    "0.0985800331577456`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.823979237255632*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"aae200a3-57bd-47fa-b5ab-5cd78929675f"]
}, Open  ]],

Cell["\<\
We have now found the solution. In fact, it\[CloseCurlyQuote]s the exact same \
solution as we found with the 3D map because this kernel is exactly the one \
you get from that map.\
\>", "Text",
 CellChangeTimes->{{3.822998658040759*^9, 
  3.8229987123802233`*^9}},ExpressionUUID->"c0803504-b416-4ab1-b175-\
a69e65a4abcc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generic Kernels", "Subsection",
 CellChangeTimes->{{3.822990623352353*^9, 
  3.822990625760766*^9}},ExpressionUUID->"a3305560-56b0-42d2-b21f-\
f613acc54773"],

Cell["\<\
In the example so far we had a good idea for which kernel to use a priori. \
That is not usually the case so let\[CloseCurlyQuote]s now look at using some \
generic kernels. We will apply it to the following dataset:\
\>", "Text",
 CellChangeTimes->{{3.822998723562336*^9, 
  3.8229988024805593`*^9}},ExpressionUUID->"1a657693-4fa5-40a8-841d-\
52ff5cbb44b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"Blue", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.3", ",", "0.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.1", ",", "2.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.3", ",", "2.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.9", ",", "2.2"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"Orange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2.1", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.3", ",", "0.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.7", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.1", ",", "2.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.3", ",", "2.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "2.2"}], "}"}]}], "}"}]}]}], "|>"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.823979384313552*^9, 3.82397945281588*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"2cac18ee-6101-4897-9886-234b81e053da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "data", "]"}], ",", 
   RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8239794557600355`*^9, 3.823979466885723*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"6a07c581-d3be-4e48-94de-93aa6b3f595a"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[{
           {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
           {AbsoluteThickness[1.5], Dashing[{}], 
            CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 1.2}}, {{
      1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 2.2}}}]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[{
           {GrayLevel[1], 
            PolygonBox[
             NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
               Offset[{2 3^Rational[1, 2], -2}]}, {
              Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
               Offset[{3.4641016151377544`, -2}]}]]}, 
           {AbsoluteThickness[1.5], Dashing[{}], 
            JoinedCurveBox[NCache[
             Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
              Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
             CurveClosed->True]}}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
      1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
      2.2}}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.8583333333333337, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0.8583333333333337, 2.9}, {0, 2.9}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.823979467369449*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"2f5d3327-298b-460b-aba1-cb267a537b72"]
}, Open  ]],

Cell[TextData[{
 "We could implement the kernels ourselves, take care of projecting back to \
the original space, etc., but let\[CloseCurlyQuote]s now just use the \
high-level ",
 ButtonBox["Classify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Classify"],
 " function to take care of all of those details for us. We will specify the \
\[OpenCurlyDoubleQuote]SupportVectorMachine\[CloseCurlyDoubleQuote] method \
with three different choices of kernel. Note that this generates a function \
that can return a probability that the input is of a given class."
}], "Text",
 CellChangeTimes->{{3.8229988192188883`*^9, 3.8229989048317823`*^9}, {
  3.822999054185519*^9, 
  3.8229990846382923`*^9}},ExpressionUUID->"eb4a4c44-8f19-4349-be9f-\
b4c29ed20b24"],

Cell["First, with a linear kernel it fails totally", "Text",
 CellChangeTimes->{{3.822998916205287*^9, 
  3.822998922682157*^9}},ExpressionUUID->"3d51c64a-579f-48d6-909a-\
38dd50116918"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fL", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{"\"\<KernelType\>\"", "\[Rule]", "\"\<Linear\>\""}]}], 
      "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8239796218609333`*^9, 3.8239796456336727`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"8a058a80-52b6-43f4-ba95-dacb5f287245"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 12, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 5755441559493940478]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 12, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{0.7071067811865388, -0.7071067811865563}, {
                   0.7071067811865563, 0.7071067811865388}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                    "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 2, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0189288, "MaxTrainingMemory" -> 147168, 
                  "DataMemory" -> 304, "FunctionMemory" -> 21504, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{2021, 3, 6, 0, 34, 9.2697219`8.719641669726789},
                     "Instant", "Gregorian", 0.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             3905946272741463577]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
             "StandardDeviation" -> {0.7017339635186232, 0.71336448530109}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 4219510318259331672]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4147396025890724089]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[RGBColor[0, 0, 1] -> 1, RGBColor[1, 0.5, 0] -> 2]},
              "MissingCode" -> 0, "Version" -> {12.2, 0}, "ID" -> 
             6772050397287602588, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 6181563047931870211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[RGBColor[0, 0, 1] -> 0.5, RGBColor[1, 0.5, 0] -> 0.5]], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "SVMParameters" -> 
      Association[
       "KernelType" -> "Linear", "GammaScalingParameter" -> 
        0.01257837195814182, "SoftMarginParameter" -> 0.1, "PolynomialDegree" -> 
        3, "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
        "Shrinking" -> True, "KernelCacheSize" -> 100], "TrainedModel" -> {
        Association[
        "supportVectors" -> {{-1.0520384828143667`, -0.8028975794788621}, {
          1.6585361479466827`, 0.6148160889155379}, {0.5180058634521635, 
          0.6103608038166278}, {-0.6250810330571168, -1.2180314652050697`}, {
          0.804873975164999, 
          1.59127258976614}, {-1.2057709983541463`, -0.7896085549955545}, {
          1.3684038159188263`, -0.7941486338400905}, {
          0.5116682952594905, -0.7951149204145397}, {-0.6260499179170453, 
          1.5909313065417592`}, {
          0.8041442992315319, -1.213710157637547}, {-1.2029136458952523`, 
          0.6117612098654124}, {-0.9153541246057083, 0.6149675836091626}}, 
         "supportVectorCoefficients" -> {0.1, 0.1, 0.1, 0.1, 0.1, 
          0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1}, "rho" -> 
         0.0030755728250370096`]}, 
      "ProbabilityCoefficients" -> {{4.375725269317627, 
       0.017071960493922234`}}, "MulticlassStrategy" -> "OneVersusOne", 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2], 
         "Key" -> "(f1f2)", "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Calibrator" -> None, "Method" -> "SupportVectorMachine", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "KernelType" -> 
        Association["Value" -> "Linear", "Options" -> Association[]], 
        "GammaScalingParameter" -> 
        Association[
         "Value" -> 0.01257837195814182, "Options" -> Association[]], 
        "SoftMarginParameter" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "PolynomialDegree" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "BiasParameter" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "MulticlassStrategy" -> 
        Association["Value" -> "OneVersusOne", "Options" -> Association[]], 
        "Shrinking" -> 
        Association["Value" -> True, "Options" -> Association[]], 
        "KernelCacheSize" -> 
        Association["Value" -> 100, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[72065], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      1.4638252`7.617034212835926, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.62825076195966, 0.14883578351259277`], 
         "Accuracy" -> Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
         0.000250593616813636, "TestSize" -> 2, "ModelMemory" -> 13096, 
         "ModelUtility" -> -0.2746361865866559, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 109488, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.62825076195966, 0.14883578351259277`]}, "AccuracyHistory" -> {
           Around[0.5, 0.3191423692521128]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "Linear", 
           "GammaScalingParameter" -> 0.01257837195814182, 
           "SoftMarginParameter" -> 0.1, "PolynomialDegree" -> 3, 
           "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
           "Shrinking" -> True, "KernelCacheSize" -> 100}, 
         "FinalTrainingSize" -> 12], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.4445003472969882], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.62825076195966, 0.14883578351259277`], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.0007924465962305563, "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.27463672843963527`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
              556504, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.62825076195966, 0.14883578351259277`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0007924465962305563, "MeanCrossEntropy" -> 
             Around[0.62825076195966, 0.14883578351259277`], "ModelMemory" -> 
             13096, "TrainingMemory" -> 556504, "TrainingTime" -> 
             0.2813312803290729], "Index" -> 1], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.01257837195814182], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.62825076195966, 0.14883578351259277`], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.000250593616813636, "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.2746361865866559, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
              109488, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.62825076195966, 0.14883578351259277`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000250593616813636, "MeanCrossEntropy" -> 
             Around[0.62825076195966, 0.14883578351259277`], "ModelMemory" -> 
             13096, "TrainingMemory" -> 109488, "TrainingTime" -> 
             0.05613297016625449], "Index" -> 2], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.25125384233026615`], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 3], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.4545880781074281], 
             "SoftMarginParameter" -> Association["Value" -> 3], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 4], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.11642497273223906`], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.3105621444473954], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.8688471807821132], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.12819078670751138`], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.8094134160956326], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.1730107534188885], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8382202574622721, 0.3679486255460742], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.000250593616813636, "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.600835639545134, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
              112304, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8382202574622721, 0.3679486255460742]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000250593616813636, "MeanCrossEntropy" -> 
             Around[0.8382202574622721, 0.3679486255460742], "ModelMemory" -> 
             13096, "TrainingMemory" -> 112304, "TrainingTime" -> 
             0.05613297016625449], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["Linear"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 12, "PreprocessorEvaluationTime" -> 
      4.5390625*^-6, "PreprocessorMemory" -> 37872, "InputDimension" -> 2, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6931471805599453,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8239796501583728`17.335090561611445*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.40297267833783923`, 
          "ElapsedTimes" -> 0.46677939999999996`, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.3}, "ID" -> 
           5006195930348260787], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.9}, "ID" -> 
           626850493589782258]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 1.0112058, 
      "MaxTrainingMemory" -> 7516288, "DataMemory" -> 1792, "FunctionMemory" -> 
      172432, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 3, 6, 0, 34, 10.2341438`8.762626476837319}, "Instant",
         "Gregorian", 0.], "ProcessorCount" -> 4, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8239796503189173`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"85ad0b0c-c83a-41c7-97a8-c74e2eaabe70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fL", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.823979654460178*^9, 3.823979723441392*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"6dce9d81-3a03-499b-a0e6-b71e5e691447"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1:eJx1mAtQVOcVxxfYZVcRE0iaiiYRVKzRGIaKQSx4buvUV1QSH4mKiUlnTIAY
HtFKYpS0TZkEtBaVqBg1vrVBAxkQRvA1RoyWooFgBG+wAhsBVzYsXB577+7a
7V7Pd+c7CzvMfPPfe+53z++e17eE/Sl10WpfnU533ken+/9KP2Lpe+6/KuC1
yPS4udvdf2Zy3cK05/I4G7GXmH7o+fQxfdtzv8L0ac/jXEzP8eznI6BW3fFl
Wt1fz7THfK4/0+rHRLTGOfAqMo28/HUL08jL20tMIy9q5EWNvKiRFzXy8vvr
mUZePm4morU4DsyprTyvSHhFwisSXpHwioRXJLwi4RUJr0h4RcIrEl7vPB04
jhonXZEXNfLydhLTyIsaeVEjL2rkRY28/P56ppGXrzsT0VodDpynohcXf11b
+fhaSHwtJL4WEl8Lia+FxNdC4msh8bWQ+FpIfL37zMB1KHrFjXKhpivyokZe
1MiLGnlRIy9q5OX31zONvHzfNBGt9dGB+4zolZc0bpSLt9dWPp8lks8SyWeJ
5LNE8lki+SyRfJZIPnvPiYH7qOhVdzQvadwoF2q6Ii9q5EWNvKiRl99fzzTy
8nPPRLQ2B5GX9k3aV2jd0bykcaNcqOmKvKiRFzXy8vvrmUZefq6bhMHmPPLS
uUD7Ju0rtO5oXtK4US7UdEVe1MjL769nGnn5c4tJGOwcg7x07tG5QPsm7Su0
7mhe0rhRLtR0RV5+fz3TyMufy0zCYOc05KVznc49Ohdo36R9hdYdzUsaN8qF
mq7Iixp5USMvr7VzKN+f9V7nGL4/673mIJ0TtI/SPkPrkOYpjSPlpCvfn/WM
l9faORt5eS16nVvoXKdzj84F2jdpX6F1R/OSxo1yoaYr8vIaP/RcTc+d9FxG
zy10rtO5R+cC7Zu0r9C6o3lJ40a5TF6r6m8F4IrkqFX/jQJ/3fs+tMP7UQ+2
0n3ofdQP6jfvVwHgqvIP/j1d+edodvR7+nz6HB33MXl9P/BzTcIaj6GdvUfU
ql0d0ypvE9Pq/W1Mq3lgJbqLaTUPepmmq5pXTraqeYlzwgme7Ur9mFb9NTCN
8eD90+l4virgtUh4zeS6hfDbiL3ENNYRaqwj1Ns8N+iYv1Tzc9FJ5oeT9Fcn
6T9OoPGk5w983ljPPvIjvx4++t7xSOvI+60g574KwPtVfy4D718dOQfWMXvV
v3rg49VEzpFNzF7lbwaerw34/tTG7FM8DrYD//6swM9nK7NX318nse8i9l3M
Xs2/buDffy/w86GX2at2fcx+sLxAe/4+rQ7485ST2bk8+aZprHfU6vusIe/z
DuG/R57bQeLVRfbvIfv1M83nkZ3VL/87wEdAOzU/NK3a+bL8xXrH+1Gjveq/
plX/9aSfGQQ+fw3MXuXTtMpjEPh6Nwp8fhqZvZpv/oTHKPDvT6fj/fMhz/Ml
9+sJnz/x18TqE+ubf+8PSb1oz8f84Ou7it2P+cJfF4H39w6pdzPw/t4j91uA
5+8g9W8Dnq+L7C8B738PmQ99xL9+r7rB67je/SpybLRVmwdX55Tn25+RGe/h
2NH+ZxfIjC8qIWdN5iaZ8WR/EF4jnJKZ/+WJI6f5NcrM3+aH249WDtN+934X
fOaZz2K137szM0qPzFvj/bv3ZEDOUzt6XODIyPty8iEZ3l38UuCQ5Z3Q8Y/u
I4V1MkSHjrD+3t4NIYYtxyKNCsxY+GzVhvw+KDBWniiOUdgaetFQNNW9v7J+
7eYHDS74d/Vw5XSdHaRcq2F47hl4Nevyhz6+Mmw8mCAVrf4BYhvW98yPkOHE
ziMxhVPuwuZ9I97fvVKGSx/F9mWV3IOLx/Z2t2TLEHjrsYKVUzsg6rVl1h8X
OuCHwpze1H8ahS2Fyp5157V5C20BrU8laPnqnF1/f9LftflTm9+Z9rrbv3M5
y8K++8kFtbl+0ol8BeYfbYjNH+4jRJurStZnKSD8rj9Tv1QnJLbXNi/9UTuf
5HU/vzW83g7LY240L/vbOVgxc0hFgsUOSRm300quXYOXhzlXjfCX2fw5dvPC
tuNDZRj229KSD5tuwifW89HHR8jwl+QFxZ/ea4ATe6zf354qs/kDrz2+47k4
GazZt3a8ENkMTx9ILu76owyXL0zMH7muBeKTamL2rZbZ/Ek9lLWzIFUG49Z9
rxxIb4dXnn8YOWOtDMG/alxkk9rh0vwb+1d9LrP5U+vcWJp9QIaW1Dd05umd
EBASrB9TKbN5c2Hd+Oib1TLUFI5JiP+oG3596Nv3zJLM5ktrQlpxqCJD1sez
yssreiHnbODdY+O0ebLz0wURayYoUDT0Vsh4hx02xo1clbREmx+uqqKvy5a6
5/Ompj9vi3WC7c2JOWZ3/C4NCWidFvwmJI7Nyn3bZoezvf+1PfaHarj/S9L2
trEy1Jqmp1jCGqG1E/KSX5Vh1Loj6e/U/AwtL6fsefCZDFcP/hTVENQBm+v3
ZkSUybA7redkiGiDjLl+h1MqZFiiS88Mf64Lgibv7tlglqGj9p2hWaN64PTE
rqOdHe75urt65RvXeqA3YXL6lSAFWlYIyZ0J/bDEd+Hx90MVaB2/K2ZXkh3e
iom3BoECi6O2XE3Yq0CuvKlAWqSA62ZUyPdDnHDQeC3ZWqzNG9eukrKy/e76
851TFhznI3yzdULxwiIFnswb82TJHR9hcv/KdOmKAsOqWyzXv3bPn7x5Z/rL
FLiaYrWGhvsKD+6WNRa1aPPHdX5keUyN+7otcnxEoJ9w5TejI/Y0KtA35s63
7Zl+gu8HHQ9AcvuVWPuFPl4v1Dq+Kd9wX4Ek17LX43r8hIB/XZ+99gkHm0cv
TtlXUeHngMXGr/JeatQLK2bOKvh5qAO+SPvr2tGjDcJb5uPJm8MccD3w5Lzp
vxiE1NlJ5xxPOyD843f/s7zSICRHRZ+aOtPB5pPt2cMX4150wP76Fn3iKX/h
7OncSZHTHFAf/ETY0gv+wjRzUWVmvAP6Jsyasf5zo3DpevOowL3a/2sMm8xb
blRp/8+oPpjt2KZov/flIEfKkknafFIOp07x+0QBnxfmvJ05Qyf8D0Ypx5E=

     "], {{
       {RGBColor[0.87, 0.94, 1], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
nIf/AWliuvI=
           "]], PolygonBox[CompressedData["
1:eJwt0rdKREEUxvGZi2Dc3VItrUQQBMHKgIWFhViIT2DvrmuOiIqiKGbXnAMG
DJgtfAOfyPw/zFf8+PbOnbkz58yWtKVakpFzrhRZGPPOFaMQaRyjFnGk0Iki
zbG5c8jDN2tnyQy81pxgHPsurJnAIz54biSfMIUcfDI2Sc4gF188T5MjaEYT
ntGOApShC0nEUI5urKECDqs6c1xjPThFHRLowCVumF5PXmmNra3BEZa01y/D
i+Qt3vndQN6hX2fPJrfsWz68s29ek5uoQoQNjKJVNb3hwoe9rUfnlqhWjVbr
gHphPdrGEH5c6PkuVlT7H2PL2iNSjWc4VC0x9Sqtu7Uz9eFVvbU7eSEXkK89
5slh1W5jexjUXdsd7eDBh7u0ntyT66jUfyCjHic01uvDGe2sVuMB/gF49kgs

           "]]}]}, 
       {RGBColor[1, 0.9, 0.8], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
HpKPP8rJkc3kRjb7LFeCna4bvv8k9v0PLmmFcg==
           "]], 
          PolygonBox[CompressedData["
1:eJwt0kdLQ0EQwPG3mnjPRUQUNRIVhIAgtpuCgoKYPCUfQE9RUbB3LLG3iIjY
e4+918/mf9g5/Ji3m83u7MzmNHe6HUmO4wThwaZxnCJM8N1HXEUeqhm3EzcQ
RBfjXuISclHCuI24hgI0Me4mbqEYccb9xGfUwotHjCIFqfjEJNIRwheGUAY/
FtCKfMfO7WIY5QhgGQl4UIMH3Ou3ix9jc5Rc5T97GEGF5hw39o5yV5nbxzWq
EMY3PlCvOb/hTtbrmQk9w9U7PuEPEfgwjkGUIguzuECynnGDK1TqnPz2i0Y9
811rEtI1l5hBJtLIOap7yt7ZmEMMGbpmWmvo154t4ggtju3pMQ60d4XEQ83Z
pz2Zwon2Xt7IKdaNXSt79GgPAvpmVjAg9dYcYlrDsNbsFvOaq/RUentm7NuT
N3OOMTToHtt4QZ3WRGoT1btLTXeMfVNeXfMquRr79iLai38NF0x+
           "]]}]}}, {{}, 
       
       TagBox[
        TooltipBox[
         {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["
1:eJwVztc6ggEAgOG/S+mWOugCnCn1I9mbQvZIlNUwkqyy6dq8HbzP8x1+0YEw
lo4EQRBnXpSZZJUceQapMMUa62yQ4IxpCmyyRZJzZthmh12GuGCWPfbJkOKS
Kw44ZIz+WJUaRxTJElKnwTElxhnmmhtOOGWCEZYYpcciKyzzzR1Nbmlxzw9t
HnngmSd+eaXDC290+eODT96Z44sF/gHX8TPt
           "]]},
         FractionBox["1", "2"]],
        Annotation[#, 
         Rational[1, 2], "Tooltip"]& ], {}, {}}}], {}}, {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 
       1.2}}, {{1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 
       2.2}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], 
             PolygonBox[
              NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}]}, {
               Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}]}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             JoinedCurveBox[NCache[
              Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                 Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
               Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                 Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
              CurveClosed->True]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
       1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
       2.2}}}]}}, {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotRange->{{0, 3}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.823979724657298*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"06705b5d-9e44-4237-9233-9b66275471d9"]
}, Open  ]],

Cell["\<\
Next, the polynomial kernel does quite a good job in this case\
\>", "Text",
 CellChangeTimes->{{3.82299893543262*^9, 
  3.822998947040895*^9}},ExpressionUUID->"af4083e9-c97a-4451-aa68-\
ef3827a8545a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fP", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{"\"\<KernelType\>\"", "\[Rule]", "\"\<Polynomial\>\""}], ",", 
       RowBox[{"\"\<GammaScalingParameter\>\"", "\[Rule]", "2"}]}], "}"}]}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.823979753113859*^9, 3.8239797853490915`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"35700b94-83c0-46d8-85f5-11ef195ed815"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 12, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 5755441559493940478]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 12, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{0.7071067811865388, -0.7071067811865563}, {
                   0.7071067811865563, 0.7071067811865388}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                    "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 2, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0113254, "MaxTrainingMemory" -> 106176, 
                  "DataMemory" -> 304, "FunctionMemory" -> 21504, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 3, 6, 0, 36, 26.1987844`9.170856059158593}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             3905946272741463577]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
             "StandardDeviation" -> {0.7017339635186232, 0.71336448530109}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 4219510318259331672]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4147396025890724089]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[RGBColor[0, 0, 1] -> 1, RGBColor[1, 0.5, 0] -> 2]},
              "MissingCode" -> 0, "Version" -> {12.2, 0}, "ID" -> 
             6772050397287602588, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 6181563047931870211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[RGBColor[0, 0, 1] -> 0.5, RGBColor[1, 0.5, 0] -> 0.5]], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "SVMParameters" -> 
      Association[
       "KernelType" -> "Polynomial", "GammaScalingParameter" -> 2, 
        "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, "BiasParameter" -> 
        1, "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
        "KernelCacheSize" -> 100], "TrainedModel" -> {
        Association[
        "supportVectors" -> {{0.5180058634521635, 
          0.6103608038166278}, {-0.6250810330571168, -1.2180314652050697`}, {
          0.5116682952594905, -0.7951149204145397}, {-0.6260499179170453, 
          1.5909313065417592`}, {-1.2029136458952523`, 0.6117612098654124}}, 
         "supportVectorCoefficients" -> {0.06995836942417911, 
          0.01525905462334245, -0.07041928547843215, -0.005958288004387213, \
-0.008839850564702212}, "rho" -> -0.2672913662217944]}, 
      "ProbabilityCoefficients" -> {{-2.524534225463867, 
       0.34895873069763184`}}, "MulticlassStrategy" -> "OneVersusOne", 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2], 
         "Key" -> "(f1f2)", "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Calibrator" -> None, "Method" -> "SupportVectorMachine", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "KernelType" -> 
        Association["Value" -> "Polynomial", "Options" -> Association[]], 
        "GammaScalingParameter" -> 
        Association["Value" -> 2, "Options" -> Association[]], 
        "SoftMarginParameter" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "PolynomialDegree" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "BiasParameter" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "MulticlassStrategy" -> 
        Association["Value" -> "OneVersusOne", "Options" -> Association[]], 
        "Shrinking" -> 
        Association["Value" -> True, "Options" -> Association[]], 
        "KernelCacheSize" -> 
        Association["Value" -> 100, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[78529], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.145632`6.614801807322269, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.45916319500156927`, 0.19263562287269778`], "Accuracy" -> 
         Around[0.8333333333333333, 0.31914236925211287`], "EvaluationTime" -> 
         0.00019905358527674846`, "TestSize" -> 2, "ModelMemory" -> 12200, 
         "ModelUtility" -> 0.00461820112823863, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 110896, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.45916319500156927`, 0.19263562287269778`]}, 
         "AccuracyHistory" -> {
           Around[0.8333333333333333, 0.31914236925211287`]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "Polynomial", 
           "GammaScalingParameter" -> 2, "SoftMarginParameter" -> 3, 
           "PolynomialDegree" -> 3, "BiasParameter" -> 1, 
           "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
           "KernelCacheSize" -> 100}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Polynomial"], 
             "GammaScalingParameter" -> Association["Value" -> 2], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.45916319500156927`, 0.19263562287269778`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.000250593616813636, "TestSize" -> 2, 
              "ModelMemory" -> 12200, "ModelUtility" -> 
              0.0046181495882070545`, "TrainingSize" -> 10, "TrainingTime" -> 
              0.0630957344480193, "TrainingMemory" -> 110456, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.45916319500156927`, 0.19263562287269778`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000250593616813636, "MeanCrossEntropy" -> 
             Around[0.45916319500156927`, 0.19263562287269778`], 
             "ModelMemory" -> 12200, "TrainingMemory" -> 110456, 
             "TrainingTime" -> 0.07066722258178162], "Index" -> 1], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Polynomial"], 
             "GammaScalingParameter" -> Association["Value" -> 2], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 2], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Polynomial"], 
             "GammaScalingParameter" -> Association["Value" -> 2], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.45916319500156927`, 0.19263562287269778`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.00019905358527674846`, "TestSize" -> 2, 
              "ModelMemory" -> 12200, "ModelUtility" -> 0.00461820112823863, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 110824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45916319500156927`, 0.19263562287269778`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00019905358527674846`, "MeanCrossEntropy" -> 
             Around[0.45916319500156927`, 0.19263562287269778`], 
             "ModelMemory" -> 12200, "TrainingMemory" -> 110824, 
             "TrainingTime" -> 0.05613297016625449], "Index" -> 3], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Polynomial"], 
             "GammaScalingParameter" -> Association["Value" -> 2], 
             "SoftMarginParameter" -> Association["Value" -> 3], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.45916319500156927`, 0.19263562287269778`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.00019905358527674846`, "TestSize" -> 2, 
              "ModelMemory" -> 12200, "ModelUtility" -> 0.00461820112823863, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 110896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45916319500156927`, 0.19263562287269778`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00019905358527674846`, "MeanCrossEntropy" -> 
             Around[0.45916319500156927`, 0.19263562287269778`], 
             "ModelMemory" -> 12200, "TrainingMemory" -> 110896, 
             "TrainingTime" -> 0.07066722258178162], "Index" -> 4]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["Polynomial"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[]], "MaxTrainingSize" -> 12, "PreprocessorEvaluationTime" -> 
      4.58828125*^-6, "PreprocessorMemory" -> 37872, "InputDimension" -> 2, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6931471805599453,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8239797863473872`17.335090577078613*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.2, "ElapsedTimes" -> 
          0.18746469999999998`, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.3}, "ID" -> 
           5006195930348260787], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.9}, "ID" -> 
           626850493589782258]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.4301024, 
      "MaxTrainingMemory" -> 408800, "DataMemory" -> 1792, "FunctionMemory" -> 
      139384, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 3, 6, 0, 36, 26.6017093`9.177484461480802}, "Instant",
         "Gregorian", 0.], "ProcessorCount" -> 4, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8239797866805296`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"398114be-0555-4d74-b852-a24fa990e7fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fP", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8239797887329865`*^9, 3.823979850822292*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"8d06e01f-1255-4612-8232-9c842c6fa2fd"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
ez9jjiZM+MaN18NFwYG2VS72yM2G649zhx4vLuvfLrarcHPoXplnw/jr+r4n
3X6Ps8BI9+evM+3r6DNjokv7hdkw4uT6/oPNVrixxSk45c9saNcwcNOf1wzK
kRRbXrkyNvi1Y3qLsY9lvcjW0cfSytntvtztuR13jNcqN9ZFL9txxAw7L5Ro
3+SwVqmw79HDznb7WB06Jnb3YidlavXMv1ceeQOTLmztt7Sd3b8fDVj5xaQM
mDxrqavhlQ3CpgV98dkgvfJDlVEBr3rZ/eeuT5Pa7NYr0ztWjpjZyQZBE1aP
9J/xEpx+bx3V4Wo2jA9Z8Wb3/ShIqjCx2Fqb3PdZ66Us8Pxc1neVuNU/oqF9
vWuMD3pgOifrnzAOm3NkSUvvg9mQedR24sGvcp9W36NKjwV95LmLz8i/D1VZ
nQYxs8oHXHW3wZbtMxdMCNMoS5unXdza1AYrBv0ZEBAWCrOHf3142YUs+KfY
+ifFk0PhyM13xk7+WbDk8Oe3jl2R9U/jTtbr3Chb1i9iPFV60p1HSj0zjPzs
dJ8pndNZPiYDtt7yv5J42gaj+roqSxqkw3XTypjbo2X+ZcO2yZX+0NvjlTyA
4QeyoK1vjFvT+XkwtXntCc3Py/1l7I2UzXu2yHrbR7/3PFtrqQXinq/T9vgh
He6FtJ617g8LeGUtLnb6dTrM2dDtaNgMjWJ4Pf3AAPv8rpzcIyB/rUYpE7nJ
J7+yrI/74tok7zZxdrt0Pn6j1tc2WHj6asVNdcywRDtm/ZUbsh6qhGlHs4HP
ZN1D1pd/RcX4pMLN/dMuuMTLeqhiq/4oO36UDYZXCytb8ZKsh3q3/uDy56cT
IG5KxQoPylihevhvLfZ5JsCdiO29rztboW18bJ1ZN9X1TiU7Tmlfr6KTAkEJ
855Oy4BKywYOXPPaBv1+si58uMcG7a5/V3rgfrsf9a5XbMxWW+HVDBvqRq9+
4Sbrnx51V/Z1fBcFHvfHuBTPy4ayZ2/6f+3kpBzvGTeq7ngbNPOp4ragsax3
wrzUfCdP5fEvNige7BKzO8xJaWystPg7O78ss09cwM9OSqOlpfJCfpHf6y6a
+3z6sXE50PPR7nMd9mTCqaZDe9z4UdY3WfJGNL47LBcObtG4p983QZNqk0/c
3muP90vklhsfa5/ftBHNvAyv4cSwVGtqkhn6H8u5vlb7Fn639g18/609Tuqb
sHa+VdYr/bzBLW7ENRMo+UOWpETdhPLDfRvV8DPBywZl20+MMsP0057Go7Mj
4bN69WNX5tn3aaHG26V6xsA/k6OVlxp5TnbK1vOlqYEFov9atWH/gwQ4MsSj
wZo2FrjjW+9OpnuSyKMkeWp8zeE50Li3fqA2xAzFn7U/tGVcGNSY33Dinfdy
f335+8bBszur661qdx6eZD6dDEunX797ud99MMx78r1OnwVZF8pZhiy7C1vO
XSh/M8EENRt12P7jh7fQ4+/vPnWdY4bWJ2s38jKZ4VRstzubDkTDzLgGc5qk
muHeirvBFXu+hV7Nik32q2YBxXOQdspX8TC6Wdt9japYYOjqay+XLJb1Rnu0
lW+F18oC/4Y+Wxt2sMD6gOm7A8o7K30OnmtfKkTWE0VnnRzR4qCsHzJkJs0b
EPIGPD70NlXoYoZf2z0oM+6aBXZu9QlxWueiPOnT8TPP67IeH+3kSuu+a7Z1
l/VB4TFjk8v8KOt/+rzrEt33MxsMarN26dlgK1y7sb5f/gmDsmVOmI/bayt0
/RD16O/nBuWrNl1+bdZM5n0fp99KLN/NCl+VaFc27qIJHtza6D14jBVa/909
psUXWdA9a/jhGh3tfFHemKlZaoX0iF6K53h5vl7Czy21wkgLjHvRqm5AXCrE
uh8tu2iOBW5FV0xrGZcG5bSPLilT7f4sr2nXaxvSoK77Yk/tLJnPPJP7dvOo
eVaooy3ZIuiGXsn6Y1eUEiXz/T4xqSGXXsh6nEV1Il9WC5P1N9s0c37qb8e5
EUGRy0aHQ5VR3bQtZ12G8g1KxZf4UdbbNPL+M2JtfxPsfZfpHeeWCfuONQ49
VEnWN3c70Tx4i5s9DvrHvGL2BVlPM3jBqDY1L5oh5c6ZnPqaPbBtfYXWT/1l
/UzChB+HXrHj4VVObe+85ZT4fe+JhB+7/J8J6vSYduVTJ51St4fngNBpNmje
qvyamy1kfQzWy1xyjXi4y46vbJq42fNnnVI+f9rYJfb9yPTXF729nuiUvn/V
99pkX+9J3++eGLDdCrVK7tjXr5pBOTQBhl22x1Wf1JwbG+huUJ6VSovr8etj
SOky4LD3DFkPU31Nv68//UHWwywK3aR7YN9nKs2qKr6xsVCu38M/ao6Tcfji
Ucc2dtpmgfDQng2/aSbrX9w7vfeOtibCvCXhA05/a9+3lC2zdettI6y5s/dp
p/QcuLbmm9C+PU3w0+Wv+5i65sK1HsujHpeT9S6Yb15zu9U49/K5YHHv1eXi
+2zwXVcj7esBGsUr4XKnhXXk91wYB5oTSvot62eFrK6v6zTbkAuV10/7dl4N
K6zMbvLtq025EP1uaY28mlZovLzc9MiZ8vu0ejkJXiVuy/qVTWZL9Wj7/uub
MU8jvs80wux9u2wLKlshOGlJrzJuJujb89b3P7c0wsjqFcbm+uVAe++7PrYZ
sn6l65Vz89wuZEPzJX6e9WprFF2971KC99jxoDPXdMU0ypqxC9N+722GxVEx
nvdsGqXZgGeT1rUww/LlNfz2hGiUlGrhI0cHynoWf31EQH6W/B5t6L4LWy/X
knEb5vluuQUPsQy075enaqZWydUqUzZPuZg61gYnG4165rtNq1yPD5xZzUvW
M5Q33z4Mh2T9Spl29/ZlJMg6hX5Thizubo9XP/W+9arpGhfF7cfi49/NtsGz
Ac8X/NDARbHAs24d59vAo+83KaevOSvT9vu+HGuPf5fHVP/hiyouyrDSv1zb
ZX++atimQX8MsUK51/eyc0fpleiuX7pXtdtvgwFtiplGRsLmqRN9y8TolC9O
9/q/iUPk+dWuJeYmi763wbtXR9xH9Jf1LOdeaZ8Pqe8HyQf2GUc9NMK7rY3n
j115QlW/siyvtvuqVSZY51ps9CE7n9QdHdI7YGQWFD9wRn9gi6xX2fnj6K01
syPgRHz7Rl4js0GXodHfNryABbcWXi2xQOaNnnTITEjfmw3lugxybn33hcgr
VV33snNNj6dQzL6/i7Rmgcdql8oVz6vzbk+q1K6jqZgNJ5z3T/9z23L2/ds2
eKlv1rf3aSMMmVwyybbgAnQJ/bVBYAcTXC6T2Hlv2HloWn+Wx0YPExwOGvhn
h9WynsUz/6a+1h1ZT78mcJ5tszUGEo551vC178OuVBub2HmiTvnbZ7jtsZ0v
qqcMvhNr55OZG2vX/5dPHvnc2h49KgbePrpp3ZUhz2Uff3l8x6VQM8wcd7T+
v3aOejHau9a5ns9lvUpccsm3A4wWONjS4+SjfkZIP3Jh4vxo+/6z4Cr/zs+I
IVMTAxZaIaRCraWXFuRAgw+Rc7sutkBg32ZbtwWrv+fa2qKPc9P9djwkLjqz
g7p+ZUv/h/VPvbCCd69bv7lWsPNC9o7Oi41WuP+qY+0o+3j35s7onltJ1qdc
Wutxzu15BjxRlu29d0DWq5j2D6hb9nEevCtZ/syeHfa4cG2pw/8k58G5cXfL
r/ST9ShfLGnZ6YPdD+38bdfUJy21SqPwmeua97BB42cTJs5crlUyQquOLznA
Bi7rrX0H2/17wq1yJ/64FAapzfOblLH7nxkdIxZccg+H9gcPjdhsj/f7D+vt
02TDRdjReP/BeZfNcKRSrGHw4nPi3DO7s0v4sNo2COj7++MvlxiUqwm5B5Sq
Mv/q+/kY1y2tbHAh+H6VZsUNyv8tOzvwqn2/oc+tXv2vYL1y+JctMzza2eD5
1Uq1V4bplbA7d6d4tbVB7VUHun5o8RDqJWiXVW2cBaH9M2IPT4mHNlUrnsx8
YYEOO/7yHugk601SA2dXfmKU9SUPQy5Zr+40KL0+6300sYINPjs8o1LZv+X3
Si0vLgqvucgMPkm9PVr10Sq/Bo13uvzQ7v8a3619wKxV9p6wnC4/PZOdH2SC
4t/5L79WOdDJt8rdT8aqvx+6FHmx5t3GWuVsc++jO8/b+WPR9qbLPiyGa/ad
4Ri7P4bZI9s8PrIJlrpo9QmPDcq7a1M/rCppA+u04ENeOQbFrcqIo90NNjgY
/6BCUPssiGuzYPaA4nnwmyX1uPGWrP9o2Gz5pv3XZL1Hh0qHViTHyHqOua+t
CbVPyXqO7OjyQWcayu+bA9vNmXh8gpNiPtzP/7Y9Xl/zo1urlLfynN3aq27i
Y5u0s8H5l82h7rJ+//2dNl9dt8czJ7w9Nmy8+Bwu6HZ7tdNnQ1frUL9bljx4
8jgctn4v6xOG/7x1V5/WFiieetH9jVvh38cu7axsSvcfs3u+/P6u7HhjF+tC
+f1danidpNyZNih2PMCrV4+3MPvgF30GeZlhl//4+XfvyfPWNQdL/Pbkjhka
vnmy2Kf0Q9gRMnH2MXt7ypqhgb90DYKmiT6v6wbJ85L/B4dAxfE=
     "], {{
       {RGBColor[0.87, 0.94, 1], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
0zjzCDUeNZ/n/yad40fR/x9kWPbN
           "]], PolygonBox[CompressedData["
1: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
dSdqrb1IfVfXHUN3jf8BTxKLpg==
           "]]}]}, 
       {RGBColor[1, 0.9, 0.8], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNm3n8VlW1xs/7nnP2EVEmQxxwKAdkClEJwcgRRBBlUsCwckBRTFHDwtAg
tRyge7NQSLsXxAEKUEIxZvPKqIBlAmp4y3tTk8FSUBGs1pfn+X3qj/PZ6+x3
T2fvNTxrrf1+/vIbBl5fz7Ls7DLL8ij31LLsu0GfEWVLfojKs4J+P54D4r1N
VG2L8h/xnBN1jeuqv8O/N3abr7vvBVE/MugU9GtR9V687x/vE6LsGPN0iGdR
/HZ6vH8S9SOjzcd10VcH/Ycod8Tzs6DfiHJ7PPcFPczthrIej3lIprbvx7Mn
U7nD7be7HpqxP/ZcX87128Sgt9b1bR8GfV6hb2keYw/3995K33hvHnTXKNfF
0yLon0b5qelbok3T+KZ3Ytyh8XSJ5+WoHxH1e1lXPNcEvTjK1vG8HvRJNbW5
MuijcrW7xu0/8zoX10SfGeWieHbXtWeDYq6B8XzKfseaH4r+fw/6S/Fbsyi3
+nt3ez9n+XfOdGaufpw169rruS7J9M4eb6xrX+7xuW/1PvzDewV9W5S3x/Pt
oJvEmDeaB1jnrd6TI6J+bNBjgm4V9M1B9ww6RdkP/mD/ov4m1h7182uiW0Q5
pVCbMuiphd4fZJ9qmvfBKD8X5bh4vhN959W0hiZRPhXPaK/nmZrmPSTKZfC5
v529vc3rPzJXPWt+0PXs+WR/C3u+pNS3fCXoc6L9GMYPehX94rko+vaLNufH
81G8L4tyaTwXxvNhvO8yP1DuNL3T9V+OcWZE2TSeXua3D4Luwrw+01H+lqae
d1CsYUPQF0f9eo/5raDX1TUf47fx2tpG+4XxfMdn8VPTp0R5b6m54O0B/i6+
pX/QK4I+NOhJUTZifZnWyvhXec9XBn1C0DNr4u1vwqtRHh7PK5l4cVPQY80/
w61DPoj3vpxNlC/GXGvj6Rfvz6Ys+17Q70Z5V5z5D+K5IeonxTM+6OOj7BC/
94qyZzxjgu7o9xPcZnCmcoLb89uldbX/LJ7X4jk7njdyyQZ6i2eW9d6SmPv5
oI+ssmx50ri7SvEb/AFvwIfQtB+ba60veh/u8prnRfun/L2fRJuN8bwaz9fq
Wg/r6lHTd3N2Y61X4LGX4vlJTfu9y2cKfVusY1ohOb4nyrsL8fu9hd6hjytF
b7Uc0ObAoKdH+WSuvmvju/YyRpSr45kWdPNK+/1Dr/+gSvTz8ftvfRZ860+8
bta823r7dMsWMoN8rbf8UP9pqbVMSJKHdTHOsLp4Z4X5Z1ypddF3Z7y/GfX3
RrkmyrXmYfZgnXkP/h+Y672N2yALl+Xqc26mujWufz3K16zTVnjuJua/9ZYd
xlsd9JBMcrDKsvB4Tfx8bU28vNH8fLd1JWN+6DmgT83VDj2Jjl9vPX+KZRbZ
7JVr/B/VtOZveO6ro3wryocy2TNo7OCVUf+numwWe/MH78+QXPNCD7P9abCZ
b7g9Y/zR49BmC3oz6Km2tdSflmvc+zzXFfH8b7x3d3vqR7vu4aCnZNrPqdaZ
4AZkoYfXyfqpO7guPDAr0xp+EeWTdcnSd4w9DrIeXm8avqFfS7c5Old75O6R
4JNJ2INccoU+2Ya+Ct56IuraJs0xIuhfRnljrnWP8Lqu9Dfw8I2TvK6rcvWj
jjbsWzcwTdCnuuSM4KtNpdrRhjOjvrf7Xu4xkf0NyEQmnfhCTfrh97H2V2yz
ZxY6L87i7Fj3HUE/EOWGGH9xPMvi/VbsTjxzC81zmdcAX19mnsG2M97ymngB
nuBsnot+y0vN8XaM++sY4/+j/FUS/jolypNKyTRrax7vedCDozw86nsV0hHI
JvhwXNBfinHHwx/RfmESvSjKQaErRkb7uUn8Bh+zr+w/ews/oMOH58IArGmY
v53v+rr38OJc64efsbNfs03qV6jv8ba51CM7fCd94EP4dJj5/6ZY743xPBT9
rvL+r402E6JuarSZE+/nBn0XmCLqvxrr/368D4vyzvhtTU04ZG3UrUHnlsIM
663T/hrf+XSM/X9Rrojy8nj6FsI/YERs69YYu1nUdcdORnllPOcX0p/od2xx
vZT9+8947ma+mrFKkv1amoQxGRN8gg35cS5bdnGhfuji+V5z10y2/iXbjmc8
JrgC2WL9yNpx0XcHutx7saomLL3KtgCbsDvK6T7zbUl71TJJzy/zeh5JksUn
o2xbCqOVltPp8UyMeRYnjXNclD2T9v8o5DSXrcfWrI62q+IZEs/gUhgXeT4g
zmNGlG2i/Yul6DNj/tu8ZuZCzpZa1rDLy/2NjaPvlpi/UZQnRP+vRt07xs7Y
IL4BuRln2YFPrzavIm8t4/m28cUY8+ottjfYBXTSk8YE3W3rWQPlPNMbjAPO
MY6bWxeWa+m+6Dd+ow825MKYc05d2I+2c9x+jvuC8cFmF8bzgm0nZdson4/y
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
           "]], 
          PolygonBox[CompressedData["
1:eJwtlnnQT1Ucxn/e332/V/YtO5ElXl5kly1r9uxLaEErMamZ0qJSUmnTYimJ
NiVTTCoxVEqTajSW0UbFZMseyZo+zzzvH8/c5znfc88595zv9zm35phJAyfm
ZDKZ5SAB0yKTuRyyNpvJtITXTzOZDfD1oC26ITonN5N5Dn0CPRXk038Fugm8
EvFD6FnoquiB6B7071+IcdF3gbPEpjLXnfAhxPsR305bH3RLdHH0TnQzeGtQ
Cr2ZRQ4jXhN9gvGP8X4NeAmwC/0G/YvBn6DPuaznuAF+JW1Vct22Ad0ZXQm9
gPc7wR+n7W9iR8Eo+HIwgfFOoa+HP68x0I/SfxZ8UniuZ8BEeAqy8HzG7MV4
w8Bg+GLa+hOrBX7i/R9BltgFYsNy3JagFxG/m75r0Qfg5cK8G3gBvh0shQ8B
C+FFeGcCa9mBLgovnJpP1hkQz0OvSnxmndCF0FsTH+4Y9D/gW/hQUETfDtbD
B4JK8NzwXr+L/gV+HHwNHwwqwy8oDn8SfAk/wvdsSTyH5lJOKDc0x0nNDxZp
7WALvDR9FhKfjy4DL0rbCviHYBf8WlCZMSuCdqnPRGejtg7okwW5VJvnVeiX
iDeCL+P93+EfgSYFa8oQL4OeolyirQ96NvqRrN/pjf4c/TB96zHmZ/DuYA7x
POI9U5+xznovfcqh96JXw28BJbU34GmdHe+f4Z1/wR54PZ496L87nKsr6bMH
XkxrhK8Dh+DFwceJc7g4/Y+Ec1N7chTeIDz328oh5TYYwflsRJ8X551pzDWD
NZZHj1K9oueiX0eXBQ/Cl4Bt8OZgFXy4zpO+m8K5+gHYrPwJ951BvCzxuehe
8LGgJryDvpn4jehL4W3pkwc/TNtIdLuwV9SnrTaxamEv2AbeUX7R1j9xDtRG
r9R+Zr3GT8KeI+9ZB6bA/wzvnXK6BLyu8onYaZAy1hfox4htAtXDOaRc0h5r
r/uFvWUAezKU/q+Gc30QWAC/CRRO7HlPwceGa6UFGKC9Ag9lPedq+M/h2tgH
GoZrVLXaHbwIbxNe+z6wQ7kDOib2kGfhFVnDgcQe2Rj9Wri2VOOqddWwalk5
odzYGq4d5bRy+wF5MLo9uBn+fjgXx6tGGbsn+tesz6Sp/EGeht4DhsJfBlcn
PoNXtHegFbw04w+HX5z62w6CRuE9094p5/rqXTA9Y4+T1/UOe6M8XF4uT5A3
DADzVYu0zUtcU43h68K5pTPT2SmnlFtjwBJ5ZTjXlzJfAv8h7BXyTHlnDfTM
xB4kLzqd69pT21fo/NS5r5psBG8W3ht5/HXw98C4xJ4mb6sYXuso3SHhnFZu
q89SnXV4bfJIeeUJ5qtbyJ6xNpzTym3dGcvCHiQvWg7+gO8Mc3n8b/q28Lfp
DBZrLrA7a08fF/YoeZXulNLKhfBdpD53hD0pr8BjThV4jLxmHvFuxG8Fh+CT
GW9fgUfKK+V5XXQ2qtnEd3bX8J2lu0ueMAhdJXzXjAZvhnNaua07tCN9j/Ls
ir4M3BO+Q3SXKMeV68pJ5WZ1cHt4T7W38pA58FJh75GHyktVg6pF5Wg+/DaQ
TbzGmaqt1N5SRzUGvyhcW8rZ6eF/Dv17nJQfEa8DvkGf0xpT57ByWTWn2nsr
/G19wTz4f7oXcpyjG9Fd6DOZ92drf+B1U4+lb9a365v17Wvo0wJenvj+xHec
7rqq6GO62+jbBt5U9ZL1P5D+hdSm2Br67A97rrxXY1RIXYOqRf3z6N/nivC3
6Z/nEv3LpJ5bc1RL/Q36FuXkcd65JnUu6E4YCW8V9mJ5xv3ww+G7R2s6GPYE
eYM8vT38bPhuUY2fge/PdS7pTHQ253Ltva3RM7R/Ye/VHTs+fGfr7tY/1mid
d+p/n5GMURL+fXhvtefntSfhf71atDUnfm/4LtYZ3gfPCcfkaT20/lzn1nfo
zmGI65+0Qeo1aW2qgRHwv8J7LQ//VLWR639Pef6EsMfL6/XP2YL3K4TvUt2h
ukv/BwgaaG0=
           "]]}]}}, {{}, 
       TagBox[
        TooltipBox[
         {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["
1:eJwV0DtIUFEYB/AjvjLNd6CRgSQoFkUalaBmOgjpZIUOZSbVoig9JFyLIsGm
tCGnhtRF0RJqaMnFcmnKUulhDQZZhoMNgfk7w4//933n3HvPPcWdvS09CSGE
p6wmh1CWEkJWagjZJLJfnyT/W3unzlXn8EY9RwnJ+hH5mDFGmeC4eZL8yAcO
kG/WI3spJUOfya5IP8MOdRrp7OSy2RXO8YBrXKeDaf45W5t9U+pxivjLXgrN
D8sCeUjulgflIkvx7CyTQisnrLfJe9wljU9Usc/aK9nPMW7TyCBX6eaXs9yR
fdzgJpcYYJ631HnPSYbUD+Od8JMnfGaFr3xhmCZ7H8mG+D31pm/cUh+hRV8R
/4s1fsczxHvlG+l85w/rnLK/nhou6Ktlu6yV5+V9Nrz/oqzkrPmkPCOz5CrZ
7NEflc94Htc5bZYanyGHZn2u7GIr3h+vmSXPWrl8TyILccYPXvAy/o9zbAMc
4k1H
           "]], LineBox[CompressedData["
1:eJwV0kdszmEcB/DnbaIVB0ezwmvUrr1aW9u06NAEaTnVwUiMk4gtkUhIWlyQ
WNE6GIlTJYiRGBcjWo6OiJKgZmmNz+/wyff3e8b//b//58k2bK3dkkkptbEh
N6UleSmV8Fj9hD+9Ujoo/8pn8imTzU9im7qMCnWX+f3qn7JcX6oeSr16DXX0
03fSn7X6C/IaE9WFPFQ/4rdnHJC/5AO5wtww+Y/7nKbK2ADZzAlOkuUyl/jC
QKqtOyPPxu/Qm1XMYz7DucoVvjKIGnvOyVecZzAtXORUrPNeOdZ8k3f0t7nH
Xb4b2yl3sYBR1o2mgM/mdhibEc/UDyGfOXQYe88NbnIr9pIbe2We7LH/kLqO
In293Mg74/tkh9wkj3CYEvbGecX/tL4ozkRm43vSaX2XsTe85TV9GWdukRwj
F8qxsliOkHPlSDlL7mYP69nMR89bLMebnxDfR/0jvgl9aKSJSnNH5XGOxf+2
b5lcaXy5XBrnG+ekr5SJnriLcSfojjvCB/uq5WrrauI9eU4b7XHP4s6RUb/g
Ja3xPGOf7M3IBv26uGNxLvqZTKNWP13myHKmqCvkVDlbFse9ltcpVZexXf0f
gedokA==
           "]]},
         FractionBox["1", "2"]],
        Annotation[#, 
         Rational[1, 2], "Tooltip"]& ], {}, {}}}], {}}, {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 
       1.2}}, {{1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 
       2.2}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], 
             PolygonBox[
              NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}]}, {
               Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}]}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             JoinedCurveBox[NCache[
              Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                 Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
               Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                 Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
              CurveClosed->True]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
       1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
       2.2}}}]}}, {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotRange->{{0, 3}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8239798546852694`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"ebdbf37d-3443-40b3-85ea-8fd25da9d789"]
}, Open  ]],

Cell["The Gaussian/radial basis function kernel does a good job", "Text",
 CellChangeTimes->{{3.82299893543262*^9, 3.822998947040895*^9}, {
  3.822999357537806*^9, 
  3.822999373005495*^9}},ExpressionUUID->"b13bba6c-3616-4f39-992f-\
cb29a2e45d59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fR", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{
       "\"\<KernelType\>\"", "\[Rule]", "\"\<RadialBasisFunction\>\""}], ",", 
       
       RowBox[{"\"\<GammaScalingParameter\>\"", "\[Rule]", 
        FractionBox["1", 
         RowBox[{"2", " ", 
          SuperscriptBox["0.4", "2"]}]]}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823979913723468*^9, 3.823979957436326*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"da820700-2ab6-40a1-88d0-4088cbd4033d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 12, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 5755441559493940478]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 12, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{0.7071067811865388, -0.7071067811865563}, {
                   0.7071067811865563, 0.7071067811865388}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                    "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 2, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0117983, "MaxTrainingMemory" -> 106072, 
                  "DataMemory" -> 304, "FunctionMemory" -> 21504, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 3, 6, 0, 39, 18.9198838`9.029493404837707}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             3905946272741463577]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
             "StandardDeviation" -> {0.7017339635186232, 0.71336448530109}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 4219510318259331672]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4147396025890724089]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[RGBColor[0, 0, 1] -> 1, RGBColor[1, 0.5, 0] -> 2]},
              "MissingCode" -> 0, "Version" -> {12.2, 0}, "ID" -> 
             6772050397287602588, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 6181563047931870211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[RGBColor[0, 0, 1] -> 0.5, RGBColor[1, 0.5, 0] -> 0.5]], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "SVMParameters" -> 
      Association[
       "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
        3.1249999999999996`, "SoftMarginParameter" -> 3, "PolynomialDegree" -> 
        3, "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
        "Shrinking" -> True, "KernelCacheSize" -> 100], "TrainedModel" -> {
        Association[
        "supportVectors" -> {{-1.0520384828143667`, -0.8028975794788621}, {
          1.6585361479466827`, 0.6148160889155379}, {0.5180058634521635, 
          0.6103608038166278}, {-0.6250810330571168, -1.2180314652050697`}, {
          0.804873975164999, 1.59127258976614}, {
          1.3684038159188263`, -0.7941486338400905}, {
          0.5116682952594905, -0.7951149204145397}, {-0.6260499179170453, 
          1.5909313065417592`}, {
          0.8041442992315319, -1.213710157637547}, {-1.2029136458952523`, 
          0.6117612098654124}}, 
         "supportVectorCoefficients" -> {0.7569966186859145, 
          0.9301493552750262, 0.9243687992795631, 0.6599310684468067, 
          0.8624959335249971, -0.8650639585955764, -0.7569966186859145, \
-1.0016667035268827`, -0.5207602984449211, -0.989454195959013}, 
         "rho" -> -0.048376233950908384`]}, 
      "ProbabilityCoefficients" -> {{-1.857298731803894, \
-0.0294551569968462}}, "MulticlassStrategy" -> "OneVersusOne", "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2], 
         "Key" -> "(f1f2)", "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Calibrator" -> None, "Method" -> "SupportVectorMachine", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "KernelType" -> 
        Association[
         "Value" -> "RadialBasisFunction", "Options" -> Association[]], 
        "GammaScalingParameter" -> 
        Association[
         "Value" -> 3.1249999999999996`, "Options" -> Association[]], 
        "SoftMarginParameter" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "PolynomialDegree" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "BiasParameter" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "MulticlassStrategy" -> 
        Association["Value" -> "OneVersusOne", "Options" -> Association[]], 
        "Shrinking" -> 
        Association["Value" -> True, "Options" -> Association[]], 
        "KernelCacheSize" -> 
        Association["Value" -> 100, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[79313], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.1515935`6.632225573587179, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.4960493448508145, 0.17629045736757057`], "Accuracy" -> 
         Around[0.8333333333333333, 0.31914236925211287`], "EvaluationTime" -> 
         0.0009976311574844395, "TestSize" -> 2, "ModelMemory" -> 13160, 
         "ModelUtility" -> -0.06127352916799589, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 109088, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.4960493448508145, 0.17629045736757057`]}, 
         "AccuracyHistory" -> {
           Around[0.8333333333333333, 0.31914236925211287`]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
           "GammaScalingParameter" -> 3.1249999999999996`, 
           "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
           "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
           "Shrinking" -> True, "KernelCacheSize" -> 100}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 3.1249999999999996`], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7876790670604056, 0.1430631694786871], "Accuracy" -> 
              Around[0.16666666666666666`, 0.16666666666666669`], 
              "EvaluationTime" -> 0.0006294627058970831, "TestSize" -> 2, 
              "ModelMemory" -> 13160, "ModelUtility" -> -0.4901761882441593, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 133008, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7876790670604056, 0.1430631694786871]}, 
              "AccuracyHistory" -> {
                Around[0.16666666666666666`, 0.16666666666666669`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006294627058970831, "MeanCrossEntropy" -> 
             Around[0.7876790670604056, 0.1430631694786871], "ModelMemory" -> 
             13160, "TrainingMemory" -> 133008, "TrainingTime" -> 
             0.08896476228911951], "Index" -> 1], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 3.1249999999999996`], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 2], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 3.1249999999999996`], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2096207006765656`, 0.3823963139613804], "Accuracy" -> 
              Around[0.16666666666666666`, 0.16666666666666669`], 
              "EvaluationTime" -> 0.0006294627058970831, "TestSize" -> 2, 
              "ModelMemory" -> 13160, "ModelUtility" -> -0.94477405436511, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 109944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2096207006765656`, 0.3823963139613804]}, 
              "AccuracyHistory" -> {
                Around[0.16666666666666666`, 0.16666666666666669`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006294627058970831, "MeanCrossEntropy" -> 
             Around[1.2096207006765656`, 0.3823963139613804], "ModelMemory" -> 
             13160, "TrainingMemory" -> 109944, "TrainingTime" -> 
             0.07066722258178162], "Index" -> 3], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 3.1249999999999996`], 
             "SoftMarginParameter" -> Association["Value" -> 3], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4960493448508145, 0.17629045736757057`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.0009976311574844395, "TestSize" -> 2, 
              "ModelMemory" -> 13160, "ModelUtility" -> -0.06127352916799589, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0630957344480193, 
              "TrainingMemory" -> 109088, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4960493448508145, 0.17629045736757057`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0009976311574844395, "MeanCrossEntropy" -> 
             Around[0.4960493448508145, 0.17629045736757057`], "ModelMemory" -> 
             13160, "TrainingMemory" -> 109088, "TrainingTime" -> 
             0.07066722258178162], "Index" -> 4]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["RadialBasisFunction"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[]], "MaxTrainingSize" -> 12, "PreprocessorEvaluationTime" -> 
      7.64375*^-6, "PreprocessorMemory" -> 37872, "InputDimension" -> 2, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6931471805599453,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8239799590834474`17.335090596696475*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.2, "ElapsedTimes" -> 
          0.21309480000000003`, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.3}, "ID" -> 
           5006195930348260787], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.9}, "ID" -> 
           626850493589782258]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.8011464, 
      "MaxTrainingMemory" -> 407912, "DataMemory" -> 1792, "FunctionMemory" -> 
      139384, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 3, 6, 0, 39, 19.6944768`9.046919385244621}, "Instant",
         "Gregorian", 0.], "ProcessorCount" -> 4, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.823979959771304*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"4167ad63-eac7-4268-aebc-a9ab19c95fed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fR", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8239799615475245`*^9, 3.823980046472968*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"d54ab134-0dfb-4aec-b8ae-597cf95334d5"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
deT1oykL9ncf5maU1UfqPtz/esSjKPg/LFFxfA==
     "], {{
       {RGBColor[0.87, 0.94, 1], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNm3n8llP6x+/7ee7zaJOikgjtyiipbKGaNktJtvmhzTIjRdZBpWlnlKFS
ZGuxv35DhcJIRBIGbRiMJUthyPIru/L7vL/Xp5f547zOdZ/n3Oc+5zrX8rmu
c54mZ1144ohSlmW1UpaVVe+UZxnPdVU2FVn2hhpX6LdPRb8leqXofXhWvy/U
9qTalqr8Rf2fML1VA9ym36eqLFT7KerfRe39VZ9CX7XPUrses/oq9VRm6p1n
9NsC0YeJPkTla9ED9I0zVL4SvVAvtKaP6qKI732j9prqO1RjbhF9ax5jzFV5
thxjLhPdWX0OV/k/0VeprbrnuU7jrFV5VeVveneMyl3q01F1S5Xuog9WvZ9K
jyx4s6v5U0PvLFNDG/12kEp7ld+rvZ3qbqpPUFmuua7Tt542f3fz+4XXzfMU
9R+pMl/0C+r3vjq+qPqBFHx9U53v0XfuVhmrfpP1PElllfpNV9u1apunfkfp
+V7VN6v8qrbRKneKHl0KfkxTeUVtbVW6il7G/qmcrzJWZZTab1T7Y+q/TPQG
0QepfKTSARlR24eqm6o0Fv0xvFF5TvN8W+/UU32OxjlbZVf93iqLPi1V9vC7
jFc7jzGbqXTXexU9rxF9j+pXVD+l8qHGeFnreSKFTD1hGXtMzy+KfjzF3iI3
7O8dene6yiOif0IGVFaLflD1vSqviu6pMa8UPYP+em+iyvuiz1P7a6pXqmwW
vUnjvqrxTxV9isp3ar9d712nskj0yWr7q+qRyJLGGKUyXfTl+v0X83ml+jyn
MlvlerU/lMVeIEA36PnhLPTjNu9dc7UvQl9UJomeoLJW7dv0/ITKe6KHaax1
an9d9P9ofj00z3tUD1TbL+rzuMpM9XlM9TvIgX5/VKWGystqO0Cli9qf0Tvr
1bZRfVur7VPv4yGsVe1NVPZUe6M89u5I9E/faIxsq+yjsq/Kga6bWEaaW04a
6r3d85CT7zXW3qoPUFmhtjoqLUTvZflBRg5Qn7p63oMxNLcO+tYWffMoPbf1
N/fQ80/qt0W/NVXfJuhbFjLVzHI1Q32W6vfd9NtKlX3zmGNDlWoq1S2Hn2Tx
bif1XaMxN1t+2Je7mafG+UXtP5dDJpaoPMq60SPL2feaZ2P1+yEF7x+zjP2M
feT9FDIz1Xp9nXXxIcvA9bYzpxchx2vVNqsU8ozN3Mrvlre7LT/L2TuPgfww
97We/33qU7b8349MqSzOgqesu4ZKA5WKyk4qu7uuZj58ofos9oP9UekkeoDq
Y1SGiD5adQeV/qJ7qO6nepDKsfRVOVF0L/idh907TvWZqi9ijaJ7qwwWPVzl
DMbOYu7rPP/ryyGTHVT6InNZ7D/9+mTR9ib2WOV4ZFX1SZ7z+e43UKW31vK5
51Yu4ht91XeVSnOVjmp/XnWzPGR1i37fGXlEb9W/pupGWdhmbDQ+Chtd9vOu
sX1Vz63MR+SrvvvC3/b6sZbqPbOQIeQHu7xLHnuA/NfM4xvI7ieW327Wpbr+
DrpVx8+766M19E71PPSQOdfOQj8beB475zEP9LCpx2Dus4qwC+tL4S+xpRda
xpCtp0V/qrbF2J0sZGeJ6GeZl95rpnJ1FvZnuG0Qi0XXvi3C/z1Viv1g/2iH
h9jGB0phE8eYnu72v/tb2LoF/ha+7EH3wSZfrPJ8FvUlpse4Dz7tP5pDTbV/
ovqCPMbkW7+W4h10t7fqXiqPMD/VJ6rsWY45LLbtRkdvt659m4cfwgdN1m+P
20/caluNbpb1/K7GGC/6vXLQw/TbuhR44IcifOsFKlfl4Usfsz1/zGNC42/x
vTNF1ypH/8nmyaP2AUtMw58dzyvgj/rXKwffmR/jbshijPM9DriljfXkn/p9
hHEU9YUqf8wDXw1UGY3slkNG8B2L1Hamyjj1+UBtg4rYL94d4HGWar2v67cn
U/gR6J5Z7MXL3t9ZKeiK6j7oovEY+3Oe9+g17zd+7WZ/d7boE1SvAPOIvtbv
lsvxbTAhes8z47Jff0+BRx9U/Vk5ZPq9UvQd4DWCKVI5ZLiJ+j2t+v4UMt5c
ZWf99oaev1b9WgoZWOj9amtZrZhvI8zDSe5DO/oxzLK6wHi1Zwr+DS5iPj+l
wKYPqZ6vcovoG1Os/UqVISpz9Txb7TNSrGOQ3z3P48Orte4L3quWAqecm8JG
DrDN7GPbiM0F0+5nW41vxL7iW5vaJ3bNAlu9oDInCx/axJgBe9nNdqqVMUMP
21LsKrj32HJg0l+z8NuMjx0HP4ADfmf72MD2ssof235iM7EZ2F/sMO01bOew
d9hncC9zqw0+0Tp30/PmFDYcW4vN3eHb+EYqBc7YmP2GV9rZPiB3+PT7LQPr
U9hp2p9DTvT8sdr/qfp/LVf7V8L34oOXZ+FvofHF99nnoqe91XdUFr5uWBY0
WHEffx/egJHALuCQOvZF2O2PzGP8wp7GSPji3Y1l8A/ghWeNGVYYp+HXqpmX
rH+Hn8BH1PH6+X4v+3F88dH23UOy8Nv4TPw6WAC/jf8+3RhgBP1L4V/x5WAD
fDx+BGzZ1n6Z+KKd8cGR/yWDxEctjR/aGyMgT8+nkOvPU+ztKssevh6cgU8/
uBQYBZwAhu1r2Vqsd6qp/yOqG6jUkjx8msL/YxsGWu537AP+t7llD/nAd7Yw
v1r5GZ/Z1Hyer/HalgOf4lvZE3x2Xf8OT8Gtrcx38Ntd9h34d8bB//67FLYR
G0ls9579RZ888Av2GRx1iDHTAM+feb9dhL2sXgkMAzYjJq2udW5jLNULixiz
diniBeIAYp/H7RfwD3NKEfM8YVmrY5nZw2to6LUxb+b8TB594FfXIjA5Md08
0dOLwNhdHOfVtawhc2D9Y20DiDlv0Pxu0vO0FLano+ffQOM9nUe+YblxDbI6
Jw+9Qqd+cHz9WYpv7Igpx5bCFtNvvfX3xyLknPHqei41PB90qrbXcloe/gP+
npFHjuEClSnlwAWNVCaq1HfchB6AmZBzsOQa48kLbf/xq7VT+M0N2Hu1XZHH
+k/V83T1vy9F7FzTMkRdy/LRwHKJTGIParkP893Zc2Yv6NPCskt7Pde13f8s
6y3ygy+abH80R9+eqLb3iY1UblH5mRhJ5TL9Pk6/TShHrFjDMQ+xD7ZxUx74
hVzNXOMZcArt5EnALeRehnuceqbHi56eYsz3yCsUMS4YGBv7s8d/hRhf5cEi
MBS4Cr2oi5/zmF/mkccgVgLfgS3AFf2KyOnQ7xrLA+v9ynMjjntBfZrap2/O
I8dyp9o/Nk0eAB9LTmCi26HJgayxbcRetbTc4jfPtM8d5z1mr4n3b3Osz3M7
6eqh6IbqvTWvr/PI23ziGn5u9LpuND3K/AQLQE/Koj+5sptEF6XIL/Ct+qbh
cw/0Su+0rQRGACvAn4F5yMPFKq/aJu+wudBd3X6gbTX5P/zJjyns6wG259hZ
sAIYoIvbjzJPsOn4/bfz8ClDRK82zbcqtnnkFl7KA4uCGV4qBW5t4/fxB938
bnvznG+39dza+1u0v+U547/ALGAXfGhX9+/ivWvp/cI34kfxofhSaOx8R//W
yeOQF8DvflUO7IccgnEae/7oKj64SRbvN7I+MuZe7vOhx2E+tbUXhzm2PdDv
tnfd0DR5sr1s0z4VP94qBWY50Dxv5zEb2lZ87Pl08j42M/86mGb+4LWm3t95
KeRoQxEyg+4QHxGHjXGshJyQE8XOHV0ODAle6aN3qqvPYP2+Wwqc+1kRcoiM
/6w+d6aIMz4owp4MdztxFXJIzNUzD3+MLz7NNPaW3z9zn8NVn5uHnS17HHK5
dbHp1vGSa+b6SxHzBPOudRz6HbG7Zfj9FHvXyryCRg6JTXjGh3a0DIBd4V97
8w7er83DV+GXX8ijT3fLfxPzljwU+SjyWi+6f3fTLSznk8GM5bA/H5YiDmIP
+qTAFceSwyuFL6yWRw6E+PmgcozRyuMsLkIut3g+Lb3v1xA3qBxXjvhopmOk
fxGzk3dIgd1Ot76Q1yO/B5Y+tBT7wV4cJtvxrdpz9d9aDho8Dd47w30G6Ldh
ah+YAv8xJpjwc+8r/vSHcuB8eHJqOXL9+I8OKfIINSsRV04t4vygq3Wvm+0D
+8QeMWfwJT6X/AL7yz7jyxkfrLGKGKsI+9g2hRxtLUKPbi2HLrE/P3g+x+u3
vkVghe/dTjwCP7aaJ8QaxBLEEX9OcU5wueOLrebJwdYJ7Co44TZjheM8Z2zg
ePxDEb5loGNP9KdVOfg5wrz60XO4N8U4/1G/icTZRfiBL6yf6Ga1UtB8d4Jj
fPxEVb6kFPkQ/ONV1uthjq+JQ8kp74iziV8n2VduKwVG47wETAO2AUcMRW5E
n6b6YPyLxilVIv+wQr+vyyJvT479GXiWIj+7NYUcg8HAYtvzyH3Qn9wJOZR5
ov+RIv7eOUWunvz88ixy7eTWsT/E9eBozgPI4ZOTedp8GGo7QD9wPTgZm42O
1ChFDM15E+chh+obv8Nuaf4tisAW4B7OXDg3AQPgx/Gr8IJzE7ABfpm8EWcG
5IjYT85IwAe32q5iXzkzwo/ju6fl4d/x1+QciAPRC/ad86avrXecbYFBOY/6
xraXnBznUcg85zxgGHBCPft67OoulcjR11HdvBK5kW1FyOYWy3BZc7oC3Jpi
jL95buAocs7gn9FuB1ONs+2A3/irKcbAV6fAeu1SnEURt3yj+gjVN6h0Lkf8
AVa8L4uzPXh+Ugr+TTFvwV3kvufTpxS5NvJsFNqJp4+1PTw+hUwgG21Uf8Ra
0XettWM57CO28Ys8xkGWNhh775LiGRljH/+dB347M4sYnli+sc9MwOScMa7R
+KtVpqhcr99mqf101e+k0M1C9SXlaAfL7KZ5bEfGUsRdrP877EMeZwLk29+3
DwJP/dV+8/cp4hrOF8jPf2Ua/rN+9uVh6yHzJ8d4tnEj44Ihka17spDZKebn
Q84jPZxiH7YbVw/X86XIXoqYktgSLLSTc3Hk5Dq5Hf6A346xj4Bvx9mO9SxH
OzI5NoW9G6d6fArfNkH1v1Lo3Ffi4UjRf1H7InSOfqKrVcKfHuI5gPkOtl/b
zzR+FjzYxzRzoj+2qLH9An6beRxne0jfvu5DDgCaNrBhL68lFXFODLZAZo+0
3JZsQ8ZlgXGG2q528Ltg1xnwvBT8/sK2Ap7PdjxFXAUWxReSNyFXAdYB58Bb
civ9PebR5ucZ7o/97+d3wLnE+939Lv60p8ek7mH6ePcBm7cRT/+kdbVWPSJF
bqFOim+97bVzNo1PxZ9W5QLyOJ/63jE1uep/5HFu9S5+MI+zgOWWybutp+1L
0ecV79eL3jv25CXTLdwO/hmk/vupLM0Dj5MbAjeRq0Ye2CPwywvu39w0eIbc
+1228wf43eM9PrkP8NpNpbAj9OMMnHj7V8//Xr+Lzsy1PpIvJy+3wjK11jJG
2/1ur2MeLrUuz7Oe4jc5kyUf2M728EjrzhrLMzmIOe6PznKOSOw5vhS8w2+R
ryA/+GwWe8A8V3sO9/ndMeXAc/hkbMMdbr/B42MfPi8iF39zCn+BbP/F+7LW
82npuSF74JcJ9j3oAP3xN/gTcDw+hRzPCvMWX4JPaZqinbwDMU4j94EmXiFG
Id7BLl1kO4VsV+UHVS9wTD8+i7gDGty7axGY/ifLObnEC1wfbZq4Z6Vl5nPn
Bhsac9IPXdhm24KN2cXzJE8yuBTnZOSTkCty0x0sY6ssb9iHV63j7Uz3M03u
smsWsdTz+W+x6Wr3b+s+/azXq83n1sSzeWAd8mtP5nFeDw4ix6Wfq9r4jfsG
A0pBIwPoFnrImUsTr50YhLEYc0MW+IlnziDmluK8H/3i7JQ4kxiTc37sc1UO
Jw/ZBe/Bt7dsEw40DQ+5p/HHInLjyDN2f4jtK/SZoj9IYUM3qt5eChlFPo+x
nRmS/WYf59nGcBa+Q8Z/8hrxsdyz4Y7N0FLwC2y4wH2Wmw+8iy3i3AU892YK
W7LN/Dy3FPckWB928U3bh9EpcG6vFDKerBfXFeH3iTUaFaEPYCzwDzkXcBFY
hbwPeG+U26HPKiLXw7stUtx/6Kr6shSY/fUi9nCb18g9mk0ek5iE3M0s22zm
iW3nLAj/yPnDKPtKfOZ26x2YrigHJgOPgd82eZwd+SOw5ZUp9uIK1W+niNeI
4VgL+BWMBxYmliZmxFZy1vu07Tr0Itsf7N1i98H+PmX7ucX2h338znt0j/sw
zpgU87wqRT4AezLN/R90nwGOEbjbQzzKeTx+uluK5z0rceYGliBGXmmb+5zn
+Z3HeSaLcZbbrj5oGeNsjBjrlhTnZ8RMt6XY3y/NB+wnCgjWut40tnS0ecVe
k89b65zejlzDuCza1rmdnAT8xKYNdR9ikKmW//miNxl7g8HvLcWdLWwjOHez
5zPSNP3XpMiB7FyJuTHnuzxnMCJ+5GJ0AL1MYWv38Zhj3If+x6TIM7SvxDlA
nSLOAsgrkF9g2eRZX3E756r9nFupyku4nXXV9NpfNU84WySWrtjmo8trzBPO
HbD15G7B6YzFOAv8Lew+uBU/gfySI+JOFPEX9UrTq20buFM1xZgcekkRuQ9y
UcM9N+R5nfswh6meD+8RH1fzvgw1Da4jD7zKuYJb/N3ZfiaHgE4xj7peO/4D
P1Ldv/PuNVnMeTf7TeJc+IuNJ6Ym/4x/J9/8gsfmHtGLRcRHzKe65z/YNHMj
5uZsCxwLv162r6zrWBVfyd7+uRxzGO0xR3lefAvdGW7+Mv+zJA8j1PZuEfiE
uaFDrJk1MH9kCFlC1y+xXV2PnlrGiDX4Bmv42THTpY6brrAN/yALW8y76C1y
coljpcuNA7Hb3NEAj4JFwYzQbVzXNB6tZZo+2FTerfIn5ZgDPMRn8F184TDH
ZuelmC/zBvPVT3He9ifVf9DvF5bj7sqZer5A9BDVm0vBH85uyAlwLsKZCDkV
7Dg2HLsLTf4KvdvbPLnF/ZEXcm2MyfncOSm+dXaKPNMSyy0+Fl/L+RnnJ9wL
2fGdZR5/sN45X+8OSpHLg55jnwiGxNaRC+pkmXmriN8nprDJ9AGfIy/IDTbs
whR3KPZOgffq2Xbh0xbZr2ErFlp/8RfoGrHcVPdBv9DlhbYP2GDyPtjzV6z7
tE9NkRskR0hun7spxHOcFXKGyvkp+jSsFGdy3EXiThJzvsn0esvUUMsVMnWu
ZbKP7QC6Q56AMTl/pJ5nmjV3tu6TjyTPQo6FXMuhxpbcFwCDolN1TWMDv9S8
64neC9yRIvf/eor7zvWLyCnSt577Y/OJQRbab0LjT8k7cYcDvsNT+APPyaeQ
NwSnfe05MZ/FlhN4jm4hl+gX+XByQ9x7qW+d4z3Oubpbl1knfS5y3dn94TG8
3sV7zXzwb9iq80qBR5HhWy3zxGsDrWucI9F+Qxb1LabBZfQBm3GOPMAysNJ9
LrO9HOzvDvS4S63Hgzw+9q2+5XC4ZRJbdJ59FX4KWaUPOUzuFBNrbLT/57tg
LfiE7sJHdOJg6wX6Ndc6Rf4ZmpgNfDLbdo9cMvdEuWvCPRPOsjkDn2H6v++g
cP+EtmluR0aR3XesmzMtw9Mth4yDLCPT4Djudt5YBHYmnjvb9pb7zODRqnvy
qm83n9uYbm3/dJvbW5tmHXxrhmUejMGYd9suzXZ/cpRgWvJvYBZ0G5l+wzm0
jo4Lazg2rG4aGSOH1Np5JPKe5EC4j3dYihg+VWJP3jIeuN1zY47s16feM2wg
d+3It5PTJbd7bRbYo38ReJd8If7sKOsZeXve572T/C45V3Kvk4wNTvY4YB38
4tEp7E27IuZHPMKcZxjXMTYYprPzP8TBJ6Sgv9HvlxdxjwEbVasS8SZ3UvYv
Qh/g506VGL9SCcwKduWMBb+7v/1yvxT9OY8lFm5lfsJb6BH23aM8J3JWzZy3
mufvIz/ktFkj94Wq1mH+cy+4j30NWIocMXFBF68BjMj9mSZF3I96xvK3wL4e
LMp721P0aZ/CLnHnATyCz8Zvck62zD60vvOyl3t+YG324kqPd69lDxnnW2st
j7TzTc4kOJuYl/lM3v2xVeBP7BVycrxt4L7O03L3ilhsrPedOSITzHOGx4Qn
nAMRl5H35jwQGYN/2MvNtg8jy+Hrea7j7+Ir2AP2gjsJtJ3g+YCtVnif+ru9
jr/Jt5GvK8xzeMOZKDlecr1Xes7EFOT+OQPgzuEqywpy0sv6hjygc/UtJ/g7
cBj5JnAL9gvbBT5paZ/FHrDf3IXpVsS9HPad8yzu2DW2DWltGehq2aYPebNZ
9lld/C73aXjvqCL4iM9Gh6pydGpr5e9yFx/80jLFWVBL+46Zxj/goEnGMGCZ
G41hwDI1KtEH/IWdbmR5OyLF2TFnyKtT7PGX2AzjFvDLrr5HUbcSZxO8iw/t
kuIs81LVeSXm2SnFPSMwGPzjPK2H+Ut8fHgR53dgtxb2WeROOhcxNmdEbcy3
202j++uLiPeJ+7Eh+GbkBBvKWQRj8n8Rzk0YBx7Da3DBTPP8KcsV+n+f/TXj
kItbaN1GT5ljR4+Jrs/0u7x3ld9lXvt7bpzFdPZ8+vu7jIdtPcLt7O2RXsMd
KeK0qnOVImjwW0Px8Ag97666QSV4Ur8SNpJ2bGbtSvC8i3Mh0OjdVV5XF/OD
82t8Zd8UPurXIu69cjeF3CVnq9z1rOn6IPenbu+1H+518V3urt1hvIH9uMc2
hDj7bWMD8C95AXAyPpVzi6qzgnLcRSNnhV/GJ+OvyRNwhjrKeBZcxXkodw/J
KZNPPsU6eLV1mbsR2Ja27g8GIx/HmSj5Oe5bTfQ8uSfKfVHuI5Pvo31DFvPq
Zd2n5pn58n8RcimFdYm9L3suky2T3AEnl833xtt/oKfkQlg7cQB3mIk/r7Yv
4N1VHrfstYONWBu+4/YUd773T8EPzp7RSc7fuCPNHWPuVvKtA1L4Z2IufD82
ZpLnxjdPMa/IuU21j+YeGmfN8An+TjZ/OFPlbHViFjaIezDcgdnL9EZjmJ7u
Q9s5buecn3fBJhT64OuJIYk9iCsPMT4E/4OrR9r+g4fJ62FfyMlw539+FvEj
MR7x3bcp9OzkFDbvHNvJYywD2HO+39tz47955Bo/TIE3kRl4/KjX/qx+e802
mFzOrcYV2E9ipmM8Jnc1J5tXLW2j6INNOM52YZ9K0HtXwof0svzA/2b2Medb
XjkTZ769Pf4p3ifyEh85r0t+l7s6j5iX2JVDPT/2kL0kTqQP9womZCFP6BTx
J2eJH7j9pRQ0ZxQ3pcgFNUpxdoudOSjFfFgvvvoBjzndeAdsR86H8xDOS8rO
7UyxLOH/+xoDLDENZtjx35JpxhJ93Id7EWM8PjkV5kNeBb99hfcDuzLHMkms
B/bEppDX5Td0l5hupO0bcQ35d+KgAX6XvtfY12FnwCCnes7Huh1egZu4FzLJ
uJRxwSAjTSOT5AUmWAfr23+BZRiXseYaE7JXyDzPo42v8Ofd7KdZ92jzhFx9
T9sccD25Z7A9OOs6z3ONdXac8yvkdzh72O5v45vIV8FbYnD+c8jc/pDiP3Dk
oul7qn0vdoD/6/AfD77X2vl58vTkKFoYVxAbkida6hzVWOsLWHK7v/v/3w04
rQ==
           "]], PolygonBox[CompressedData["
1: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
Dp+FYmw2vCjc+6nnPRWuYapl6lEaov8HvAlq2Q==
           "]]}]}, 
       {RGBColor[1, 0.9, 0.8], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
YF0h3d3AvN7Q+znFuq+NdR/7p22/Uv4kev7CkLfL8RWifikXzLmPC/jcKIsz
nZUzY1/g69nWJ3OtM6DXUXGWLQH/q5SPPTjKjGhvZHhr9D8CfzyX7enj+R+B
tlEP9Fojc/0GfirXnFdUFJPSjk/O2P7uA3xOlNcr2jPz0LeH12Ldo+Js7we8
rZQO25orNiCG3mg/pjbghaXOiX9FDIKfdlyc6z38m5jjg1z+LnHZh4VoAP6f
SrJf9aJ+KOZYViomfybXWPjwuVz+EL7Qj6uCf0QcFn0/LrSn7V7jk1K43Zzv
xfdm45n53vecvZL2Wa8qPA/NpVexR8Nz2aSP0Z+5bBB6CV9nT26gu+n4qn8D
w2vEZvDb7bliScY2Ncz81L0MQ8M+pkUjtyOfNVH3zqU/a5HjXPmB5m5nb7Qv
ZD9Rxrh+Pvrf7Tlft70Yajrip7A3fJU7fK4J5gv4ZqdlFH8IPn8wlx5BhzQx
jO3DF6EP/NzYY9n/TuNtjf2EEd7PAsPsGZ7qYR6+1TB8fksu32WPvwmMbjrW
Zye/0dh8C8xeLvV+1gcdt6MTqvK18Y/wt48oFe8QbzWuKp45KPr+KODVAX8Z
38cX4gl4bVIpGUZfoXPRvei0vsZzC9e1pgU4WWT8XG34SvsDc92+2TC81zrW
/V/sfBI+Fhjn0z0vc/bz/Kx5RpKO/6IUXhcYh81inhx9Et9/Ft+6lrL9k0ud
Af2NfkRPoktPjraWpXy+DUn+WBn1A9G2uJT+qyT1/7aUrwE+8DeG2XbjWxMb
1fNv5JBYFJ19VaGYlN9tYm//F/C8JNxhF7BlGx2jEavVL5WvYR9Dk+LTrkl4
etB4u8Qw8kss1cB2ZUnUDxR7beMO0wia42vi4xEzfew9tvU32rFtjIO25LWe
iH5f5LIr+LLYGfAKjE97tr8TJ/axDSTO3Zi01iul4g/4Czv+R8duuxOLpeZi
nvluw7891DzaCX+5Klx8EvBi/G77f/iSjxkPcw1jJ672N9rRv+h3dDs6FFuG
7SLXstR8uMM4B/fTrVPQJ3xf5j5zPOd40+pz06u2UIz6udelP/irTcrNHZcU
Q6Pr0fOr7H8+meSDzPGc5DXJ0+Hv1XoP4OGwqEnEbom2b5x/aZGURwHGV7wh
fk8K+HdJvDfJ/NfOudOpSTk44rspSXxHfpScw8ykfGmdqI+o6ixvBh6eivpJ
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
WHextw/cf6Zlual1MvM/7P38G5tiYFo=
           "]], PolygonBox[CompressedData["
1:eJwtlneMVlUQxd9+7823UhdE1lVwWQiSUKRoIJBgFFsUGyIWjBUMoJgFVBQR
goUQE6wYuwhiEIRFihBFJYIFBQtYYJEsPVIWWF1YUJTi7+TsHyfvzJ377n13
7syZ13bIqIHluSRJKkAGno4keSZNkpHgdwb6Yz8H7waugX8DNsFLC5JkL/5a
7GKe1SyyBn4DeBF/P3BTeEy+7eA7eDcwGd9UMAVeB0p4fw3+w/CjoDX2ceyt
8NHggN4FKTzySdIVf3fQB/sjfRNrrQZL9e3gWXhPsI85n2H/BM/Bm+nbwSHs
laz3G/wg6IK9C7sVfDgYg70O+zT41eGzjwNj4PeFzz4A+374YDAt9Tsj4HeB
M1PHcHL4G/QtlazXAvsXnQd7ELH+G99snQF7GbgV3g7sZ+6D7HEC/6BwLBWT
I/DHwSSdB3SEP6wxeDvwK3My4jMF3gL0xreVsYnsNRz7JcUC/AEvYI+D+I6C
6djV4OdwzBX79aBB+Mw6e63ixdzbscsLfOap8FHgEfjFYKDWBoXM28T8HfC9
+kZ8VdjF8DyYiT0DvKL5zG1Z4G9YhX0E+x3dp5JSa2ss5zOMhW8Atalz7i/d
J89/8a9grEKx5/zbcv6GEvgw5RC+BtoH/j3YqfsGP8A/B+tS54hy5TXwLvwB
vmk/76zGrsK+AN6Y9XqAsfBV7HGVcj2cy6XgBXhn/MMzf/M87DvCd6+YKXbL
wrk6lPNUMm8J9lfYCVgMXwRWwj9m6DF4e9YbzLwi1jjJ8w3GZuH/EXuachF/
DXwDY23yPpPOtoexMnhN5rveo5zGPpaZ1yhfsOeC5aoV5rSFt2SNLTnnSDH8
LcbeU3wYexn+D+8fTJ3DymXljHJHd6a7U8wUu+3Ya8N7aC/tob1Kwr4izYU3
BrOxT4Ft8HPAlznfke6qGd/Qk7nfMlYE/1R3iG8j8dnJeJO876aMsfX4GmG3
gTfXnWF/EtayIsUU/gXYmPMZV4ZrXLWuPY+zzlPhd4+w/pPwLKxNh0AV/LZw
7SunnoffGM59aZ6074lwrQ0jBpPgpzLncnfGrtVdh+9KOb8bX4dwbbVm7LBi
h30pfAL7j9Ta4doeD86FXxdeS5osbc5x3t7w00EvxQ+7P+vU8f4unnPC2qI1
b9Z589bOQuwuuk/wIXyB9Ei1DxaqNrD/g7di/mWZY9YPu1NYe9QsmoRrWLWs
mimE92H+2sw5uRn7Qn1Tas2X9tfW57JqdAB2j/DdSLNOwluHtVgaWKNcYf48
fPPBTOxt2I3gHyjnwmPyKUffDI/Jpxp5XWuDOdI73tsO3wea1OewcrlUGpSz
hknLdAe6C/Wc9thDw7WtnLoX/lD4Lnox76JwDiuXpRHSij1hrdMe1eEYKVbK
2eXwjsSnb+Ke1wl+hu4kc0/9OqxR0ipp0opwz1Pv05zd4TPoLLqjpvAJ4bsq
wZ4Ir6uvBcWoq3Itc+6qR6hX9AzninpeAfv/mbn21RMr8S0Ia+kIxufDD2TW
EsWoDfbd4b3OAvfA7wTFqXueet8loEPqHqxefIVyJnXPUu96NJxremdcWOOk
dZozXrmoGk2tgQvhWzLXgtYcEtZIaWWpdD/c09Xb1WPK4TtBvr4nqDc0z7sX
LlaNKJfxL0ldM9fDO4NFqXPkbcVeGp9Zkzdn/kfQv4J6zsbwnevupUlNmXsL
9tLUPVy9XBopraxQTUgbM2uB5ryPPUvnT10TfcM1qlqdiz0de0fmdzVHc88O
+9QzXw3HXLHXNzZk//OwyzL/A+lfKJ/3v4X+kQrzrnHVuuacCP9T6N9CPUW9
5Vg4ltJgabF6tnq3YrgrrMnSZmlEo3BOKDfU49TrFFPFdjR2N/2b5c0VY8X6
cmlC5jvV3TYM/1torEXePXBoYo2R1pwf/leUhknLrgxrsXqueq96nnqfNGGG
aiHcG6Q50p7/AaLMbn8=
           "]]}]}}, {{}, 
       TagBox[
        TooltipBox[
         {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["
1:eJwV0slLlGEAwOHXsshsoZmDQVpOFi2aGuVC3lqP1VRWaG4XgyJBaM8F7BAu
B+/dtCTLrA5t/0L9AS602yEpqSDbTHrew8Pv3Xjnm28m1dSSPpcRQhhmMjOE
9zxfFMIzlrOVosUhbNGr7KfU/IBe4TIPGOU++0jaX6qvyOI1s/zgKDvtH9PD
HGGHeVpbWMsm83X62bPk60tekMdfawX253SJeTOnOUkPtZwiwUbnkvrJ2Ru6
m23W9mhTfD7rrXqGs1QzxAlucZzbTDvXoZ3U0B+/k7V2Pc+F+MzcYZhCn3FX
R7jHWHyv+oF3fGSK1c7lcMj4mzPd+lXn2WD9n663ljL+bjxjnBvfC2v4Eu+x
nmG/zDhouS7QzXqQvRSbl5BgFRXWFmqlZmqpzrOdxzzhKePu7tLr1FNHL7u4
xEV+8osBKtyVrW9Yxm/+8JBHTLgvK/43aDRvoI8q2rgWf1/mGKTSuRX6lpXc
jO+W/yobVQ0=
           "]], LineBox[CompressedData["
1:eJwV0klLV1EYB+Bj6d+gQQPNbLZBKtLIIRAadNe8aOkyLSjIEvsCBRZtKrQc
aVy1r1YOzaVBWWnaBCnSTFmZWUHkcxYPv/e97znnXu69ObsO7KxKCiF08Dc5
hM0pIaxJhLBJHuYIRfynkKlmG2QlFZzkFMc4ymrWs45LDDlzrT0X1fW00sIF
Bs2Kzc6r62imiXO8MZtnlq/+qX4sp+uncU/9mdnk6h/E3ppGmcoZEjQwh7MM
m8+3tkCdzX266OY733hGP308Z4AR+xbZl6O+TC9/XFvsWo/6q7pWfpGP5ENm
mWWSpb7BdTqZSRlzzQasv6a+yhXy+McqppiXyBSZSoJ+618zzlOz3/Kj/MT7
eE8+sJ8q0mmjnQ4y2cNuTlDOPvbG/c4aifvlXXmHDN4xmYMsYbnnWCpHrcuN
71bfp65Wb6VAv01uYQfb439jHuSYfCJ/ydPyJm/Vx+N95G15i4XOWEAGL/Ul
Mkm+YBJp+nRmsFFfwzJK43d1rddZh+K3jO9LJvMqvsv43PFf4gcrrV3BBK7Y
Zbw=
           "]]},
         FractionBox["1", "2"]],
        Annotation[#, 
         Rational[1, 2], "Tooltip"]& ], {}, {}}}], {}}, {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 
       1.2}}, {{1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 
       2.2}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], 
             PolygonBox[
              NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}]}, {
               Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}]}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             JoinedCurveBox[NCache[
              Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                 Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
               Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                 Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
              CurveClosed->True]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
       1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
       2.2}}}]}}, {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotRange->{{0, 3}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8239800222054634`*^9, 3.8239800511075373`*^9}},
 CellLabel->"Out[87]=",ExpressionUUID->"2f96b399-1199-4bd0-b87c-223d7f7db947"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Handwriting recognition: Support Vector Machine with MNIST Digits dataset\
\>", "Section",
 CellChangeTimes->{{3.8229906835961246`*^9, 3.822990701966954*^9}, 
   3.823253026441883*^9},ExpressionUUID->"5b7456a3-1a2f-41f1-a5be-\
9904c63118e1"],

Cell["\<\
We now return to the example of handwriting recognition to see how well \
support vector machines perform with categorising the MNIST Digits dataset\
\>", "Text",
 CellChangeTimes->{{3.8229995585095243`*^9, 
  3.8229995901177692`*^9}},ExpressionUUID->"5ec8ac3d-447b-4953-ba0e-\
0deec8bb5628"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNIST", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<TrainingData\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823980070792406*^9, 3.8239800846893654`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"f96c09ec-4927-44fa-a984-f7963204d93c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNISTtest", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<TestData\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239800868242464`*^9, 3.8239801018366127`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"968b9afe-3a7b-4a95-8d88-2f53ebe73e14"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNISTbynumber", "=", 
   RowBox[{"GroupBy", "[", 
    RowBox[{"MNIST", ",", 
     RowBox[{"Last", "\[Rule]", "First"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8239801039788494`*^9, 3.823980119169897*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"a6f1562e-8494-4f2b-a43a-101687ed430d"],

Cell["\<\
We will train our support vector machine with a random sample of 100 digits.\
\>", "Text",
 CellChangeTimes->{{3.8220330577685127`*^9, 3.82203317073836*^9}, {
  3.8229996472198153`*^9, 
  3.822999666670204*^9}},ExpressionUUID->"eaa048fa-eb2a-4e80-83d6-\
d4ea0b4f7340"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"MNIST", ",", "100"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823980131814189*^9, 3.8239801599021683`*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"275bb8fe-777b-42f8-a626-cb1409a52851"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cf", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingset", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8239801437787933`*^9, 3.823980153691042*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"1b411cae-969a-41a0-b78a-7e96a5857298"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
                    "5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
                    "5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["100", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1610608, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10285371240129673742813359589597473183401488912422421692480, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10285371240129673742813359589597473183401488912422421692480,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.823980155224908*^9, 3.8239801764941034`*^9}},
 CellLabel->"Out[94]=",ExpressionUUID->"a4adf5e0-e909-4bf5-afb5-10dcbb6c1b8d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "cf", "]"}]], "Input",
 CellChangeTimes->{{3.823980181911296*^9, 3.82398018431121*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"6cb68309-406c-4ea6-b8d5-210f05243df8"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Data type"], 
                  TextCell["Data type"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              InterpretationBox[Cell[
               "Image",ExpressionUUID->"c20f7be9-d3ca-4a7c-925d-cc5f53a9a01a"],
               TextCell["Image"]]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Number of classes"], 
                  TextCell["Number of classes"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["10",
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", 
                    ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                 Short[#, 1]& ]],
               Annotation[#, 
                Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Accuracy"], 
                  TextCell["Accuracy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"39.", "15."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   38.6008932372340964889`3., 15.450461121800652009`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Method"], 
                  TextCell["Method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                InterpretationBox[Cell[
                 "SupportVectorMachine",ExpressionUUID->
                  "c6ad1a73-9308-4677-9870-4a1660885ef7"],
                 TextCell["SupportVectorMachine"]],
                StyleBox[
                 TagBox[
                  
                  GridBox[{{"\"KernelType\"", "\"RadialBasisFunction\""}, {
                    "\"GammaScalingParameter\"", "0.0013270969145174945`"}, {
                    "\"SoftMarginParameter\"", "3"}, {
                    "\"PolynomialDegree\"", "3"}, {
                    "\"BiasParameter\"", "1"}, {
                    "\"MulticlassStrategy\"", "\"OneVersusOne\""}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                   False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                   FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                 "Verdana", StripOnInput -> False]],
               Annotation[#, 
                Style[
                 
                 Grid[{{"KernelType", "RadialBasisFunction"}, {
                   "GammaScalingParameter", 0.0013270969145174945`}, {
                   "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                   "BiasParameter", 1}, {
                   "MulticlassStrategy", "OneVersusOne"}}, Alignment -> Left, 
                  Frame -> All, FrameStyle -> GrayLevel[0.84], 
                  Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"43.`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"425.`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"1.846422295410716119`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3393134301944950582`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "1.1677954350217261137`3.",
                   "\", \"", "2.5250491557997061243`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 1.1677954350217261137`3., 
                  ", ", 2.5250491557997061243`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Model memory"], 
                  TextCell["Model memory"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1.61`", "\"MB\"", "megabytes", "\"Megabytes\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training examples used"], 
                  TextCell["Training examples used"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"100", "\"examples\"", "examples", "\"Examples\""},
               
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training time"], 
                  TextCell["Training time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"14.3`", "\"s\"", "seconds", "\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8362477552037287}, {
                    4.382026634673881, 0.6132498723295354}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.70805020110221, 
                    0.8362477552037287}}, {{4.382026634673881, 
                    0.6132498723295354}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, 0.7861847667380463}, {
                    2.70805020110221, 0.8839234796579972}, {2.70805020110221, 
                    0.8839234796579972}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, 0.41019315672744766`}, {
                    4.382026634673881, 0.781952488395391}, {4.382026634673881,
                     0.781952488395391}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 0.6008611010587469}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.6008611010587469, 0.8362477552037287}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.315188227672316}, {
                    4.382026634673881, 0.38600893237234096`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.70805020110221, 
                    0.315188227672316}}, {{4.382026634673881, 
                    0.38600893237234096`}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 
                    0.27914550281296424`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.27914550281296424`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8732493087071683}, {
                    4.382026634673881, 0.9383983586299954}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.010993795483448341`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8529504454090339}, {
                    4.382026634673881, 0.7659272773090766}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0023714504161615017`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8609818035019937}, {
                    4.382026634673881, 0.8900862462598292}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.011723741711166566`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8825892459369359}, {
                    4.382026634673881, 0.991741194833945}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.010556421043856682`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8664690711423099}, {
                    2.70805020110221, 0.8664690711423099}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002879699716303419}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, 1.0044166332440647`}, {
                    4.382026634673881, 1.0044166332440647`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.013410719845632857`}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8753527976990146}, {
                    4.382026634673881, 0.923741850050527}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.004028835613021142}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8607166633463819}, {
                    4.382026634673881, 0.885506054320914}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00375498069109835}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8362477552037287}, {
                    4.382026634673881, 0.6132498723295354}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0013270969145174945`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, 0.9189063267238948}, {
                    4.382026634673881, 0.9189063267238948}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.004827220877601384}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8732493087071683}}, {{
                    4.382026634673881, 0.9383983586299954}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.010993795483448341`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8529504454090339}}, {{
                    4.382026634673881, 0.7659272773090766}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0023714504161615017`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8609818035019937}}, {{
                    4.382026634673881, 0.8900862462598292}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.011723741711166566`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8825892459369359}}, {{
                    4.382026634673881, 0.991741194833945}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.010556421043856682`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8664690711423099}}, {{
                    2.70805020110221, 0.8664690711423099}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002879699716303419}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, 1.0044166332440647`}}, {{
                    4.382026634673881, 1.0044166332440647`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.013410719845632857`}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8753527976990146}}, {{
                    4.382026634673881, 0.923741850050527}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.004028835613021142}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8607166633463819}}, {{
                    4.382026634673881, 0.885506054320914}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00375498069109835}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8362477552037287}}, {{
                    4.382026634673881, 0.6132498723295354}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0013270969145174945`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, 0.9189063267238948}}, {{
                    4.382026634673881, 0.9189063267238948}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.004827220877601384}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 0.5915183856120616}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.5915183856120616, 1.0044166332440647`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8362477552037287}, {
                    4.382026634673881, 0.6132498723295354}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.70805020110221, 
                    0.8362477552037287}}, {{4.382026634673881, 
                    0.6132498723295354}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, 0.7861847667380463}, {
                    2.70805020110221, 0.8839234796579972}, {2.70805020110221, 
                    0.8839234796579972}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, 0.41019315672744766`}, {
                    4.382026634673881, 0.781952488395391}, {4.382026634673881,
                     0.781952488395391}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 0.6008611010587469}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.6008611010587469, 0.8362477552037287}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.315188227672316}, {
                    4.382026634673881, 0.38600893237234096`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.70805020110221, 
                    0.315188227672316}}, {{4.382026634673881, 
                    0.38600893237234096`}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 
                    0.27914550281296424`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.27914550281296424`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8732493087071683}, {
                    4.382026634673881, 0.9383983586299954}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.010993795483448341`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8529504454090339}, {
                    4.382026634673881, 0.7659272773090766}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0023714504161615017`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8609818035019937}, {
                    4.382026634673881, 0.8900862462598292}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.011723741711166566`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8825892459369359}, {
                    4.382026634673881, 0.991741194833945}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.010556421043856682`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8664690711423099}, {
                    2.70805020110221, 0.8664690711423099}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002879699716303419}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, 1.0044166332440647`}, {
                    4.382026634673881, 1.0044166332440647`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.013410719845632857`}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8753527976990146}, {
                    4.382026634673881, 0.923741850050527}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.004028835613021142}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8607166633463819}, {
                    4.382026634673881, 0.885506054320914}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00375498069109835}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8362477552037287}, {
                    4.382026634673881, 0.6132498723295354}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0013270969145174945`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, 0.9189063267238948}, {
                    4.382026634673881, 0.9189063267238948}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.004827220877601384}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8732493087071683}}, {{
                    4.382026634673881, 0.9383983586299954}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.010993795483448341`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8529504454090339}}, {{
                    4.382026634673881, 0.7659272773090766}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0023714504161615017`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8609818035019937}}, {{
                    4.382026634673881, 0.8900862462598292}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.011723741711166566`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8825892459369359}}, {{
                    4.382026634673881, 0.991741194833945}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.010556421043856682`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8664690711423099}}, {{
                    2.70805020110221, 0.8664690711423099}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002879699716303419}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, 1.0044166332440647`}}, {{
                    4.382026634673881, 1.0044166332440647`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.013410719845632857`}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8753527976990146}}, {{
                    4.382026634673881, 0.923741850050527}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.004028835613021142}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8607166633463819}}, {{
                    4.382026634673881, 0.885506054320914}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00375498069109835}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8362477552037287}}, {{
                    4.382026634673881, 0.6132498723295354}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0013270969145174945`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, 0.9189063267238948}}, {{
                    4.382026634673881, 0.9189063267238948}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.004827220877601384}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 0.5915183856120616}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.5915183856120616, 1.0044166332440647`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {123., 126.38790538896808`}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.8239801857963977`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"3b071272-a05e-4354-a48b-1f40b60faa25"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cf", "[", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgU/0cCe9wZJ/1/PRlJZIcrF5Pmq6NCzAlwoVeGTExZz/8fYGLShgnN0WPi
aH/wHyTWDRVayMXE0QZiHGBinQUW+baKhYm3HczMZ5KDqMpgYjJ4AWZdkWGa
D9HIwsQ0DSJbyAQRm8PFxHT/D1joljhTxFcgfZCXia33L1jobj6TyUcQw5+J
qRSi8W82E9MSsOUCTOq3wUJ/JjExub8BMn4HMDGvBwv9BAo5fgCxOpmYLCE6
XZmY7H+AWexMTLtB9CINVt5ciNB/RiaX7//PpimzMgmlw/zOyCS0IEWciYnJ
ZN1/hBgYiMR8RIRkAjNQhE/8GHJ4/58iodB9AUXkPwDBoBwJ
       "], {{0, 20}, {20, 
       0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 20},
     PlotRange->{{0, 20}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 196, 106, 255}, {255, 144, 74, 255}, {252, 64, 74, 
       255}, {236, 2, 74, 255}, {204, 2, 74, 255}, {145, 1, 73, 255}, {237, 
       28, 74, 255}, {158, 2, 87, 255}, {146, 2, 164, 255}, {146, 2, 164, 
       255}, {145, 1, 163, 255}, {146, 2, 164, 255}, {146, 2, 164, 255}, {146,
        2, 126, 255}, {146, 2, 48, 248}, {145, 1, 0, 205}, {146, 2, 1, 237}, {
       191, 2, 64, 252}, {244, 40, 74, 255}, {255, 164, 74, 255}}, {{0, 20}, {
       4, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{4, 20},
     PlotRange->{{0, 4}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgU/4eAAxMzmZgYmJiYJn74DwP5TMzMzGCcgBAT0tCortJQYmbygYsdPAim
biGLQYEXptgrM0yxhUA7ElGFDggxMzt8QBULAboPVeRUChMz3zwUoWRxZia+
mShCeSCzNiGLvHcA+tUBWeR+jyIzk9NmZBtf6QD9rvYQWdU0Q6BQOLLIBTGg
o5jUoLwNkw4srJs8iRkEONRU1dSAmJdZkIMZKgYNTxBW1lh8YbIOXGwyCABt
BwDO0xJ3
       "], {{0, 20}, {20, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 20},
     PlotRange->{{0, 20}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgQgyT/A8HXrqqqyjxGiaqqByDuVTEmJiZGJhBQewXkbwMyVFXV1NR4mJhu
A/nPVq9e/RukMJGJ6ch/BNhvwcS0E8a5sW2JKBOT8zcw556NoTjIuLT7EEkz
iPkp36CKVSF8T5jm3urq+i9xTCzHkEz/f4uBsfn//9/PfkD5b7SYNF7872da
CuWfZGKa+v9/EpMdhPvLn4n3HIgvfAXM7wdL/9/HxJQO4q6XZlJ/BzKViYl/
/f9bBYxMfBtA4j8rmJj4VMWYGLkroeaUg0OCbRvMHX/WMdmYVe+C8gC6b9R+

       "], {{0, 20}, {16, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{16, 20},
     PlotRange->{{0, 16}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 110, 92, 255, 255, 255, 255, 230, 255, 255}, {255, 75, 
       57, 255, 255, 255, 235, 42, 211, 255}, {236, 17, 130, 255, 255, 255, 
       232, 23, 170, 255}, {141, 1, 151, 255, 255, 255, 255, 56, 170, 255}, {
       141, 1, 204, 255, 255, 255, 255, 56, 170, 255}, {141, 39, 250, 255, 
       255, 255, 255, 56, 170, 255}, {141, 86, 255, 255, 255, 255, 255, 56, 
       170, 255}, {40, 86, 255, 255, 255, 255, 255, 56, 98, 250}, {23, 13, 37,
        37, 37, 97, 118, 9, 111, 252}, {159, 95, 95, 95, 95, 70, 0, 1, 170, 
       255}, {255, 255, 255, 255, 255, 255, 255, 56, 170, 255}, {255, 255, 
       255, 255, 255, 255, 255, 56, 170, 255}, {255, 255, 255, 255, 255, 255, 
       255, 56, 97, 255}, {255, 255, 255, 255, 255, 255, 255, 56, 76, 255}, {
       255, 255, 255, 255, 255, 255, 247, 46, 76, 255}, {255, 255, 255, 255, 
       255, 255, 233, 25, 76, 255}, {255, 255, 255, 255, 255, 255, 255, 123, 
       51, 248}, {255, 255, 255, 255, 255, 255, 255, 150, 1, 236}, {255, 255, 
       255, 255, 255, 255, 255, 196, 1, 111}, {255, 255, 255, 255, 255, 255, 
       255, 249, 32, 83}}, {{0, 20}, {10, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{10, 20},
     PlotRange->{{0, 10}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
GUhCBIj/o4J/T9cVT0QRebs2mZGRwQMhsCtOT4SRMWHXxV9woS18HKIh827/
QdJ2WigGmQsWElF/iyZ0ToTRIboaReFPVUZGWXWmKchiv3199339L6/wDVnw
L9D+GxwOf9GM/L+KeR6UdRUm9MWW8wmUaaYHYv38/yWKMQEmncEoVNASqmGp
xp7/Am5lGjsjCMTvRnHIeiC48Q9JBABCvQ8W
       "], {{0, 16}, {20, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 16},
     PlotRange->{{0, 20}, {0, 16}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 255, 255, 255, 232, 173, 54, 80, 255, 255, 
       255, 255}, {255, 255, 255, 255, 255, 251, 108, 1, 19, 198, 255, 255, 
       255, 255}, {255, 255, 255, 255, 255, 148, 2, 20, 198, 255, 255, 255, 
       255, 255}, {255, 255, 255, 255, 197, 18, 18, 202, 255, 255, 255, 255, 
       255, 255}, {255, 255, 255, 247, 50, 2, 175, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 255, 40, 1, 101, 255, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 115, 8, 2, 184, 255, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 1, 2, 125, 249, 255, 255, 255, 255, 255, 255, 
       255, 255}, {248, 103, 1, 13, 219, 255, 255, 255, 255, 255, 255, 255, 
       255, 255}, {215, 2, 1, 134, 255, 255, 255, 255, 255, 255, 255, 255, 
       255, 255}, {193, 1, 14, 225, 255, 255, 255, 255, 255, 255, 185, 61, 
       158, 246}, {73, 2, 68, 255, 255, 255, 255, 255, 253, 137, 5, 2, 1, 
       141}, {21, 2, 157, 255, 255, 255, 255, 206, 88, 2, 2, 2, 72, 243}, {21,
        2, 195, 255, 255, 233, 140, 9, 2, 2, 2, 2, 172, 255}, {59, 2, 37, 142,
        195, 74, 2, 1, 2, 2, 55, 175, 255, 255}, {224, 37, 0, 1, 1, 1, 1, 0, 
       59, 187, 255, 255, 255, 255}, {255, 240, 92, 2, 2, 13, 134, 216, 249, 
       255, 255, 255, 255, 255}, {255, 255, 99, 2, 27, 212, 255, 255, 255, 
       255, 255, 255, 255, 255}, {255, 255, 1, 28, 212, 255, 255, 255, 255, 
       255, 255, 255, 255, 255}, {255, 255, 1, 194, 255, 255, 255, 255, 255, 
       255, 255, 255, 255, 255}}, {{0, 20}, {14, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{14, 20},
     PlotRange->{{0, 14}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgQCwPx//+PHv//f+zYylUrVxWVrFx17D8QWFmHhcvJM7FAYDhQjRUDEwgy
QqFs+P9VLDB5a+sSiKpj4WHHQdp7gXgVUFXYfxRgBVR1HFkApIbRGkON9WOE
ilUQ+xAm9cJslYNaBjEFDsNgpiAg3E4M246Fo9gGMw3N3asgvkMGlmiugqpC
UwfxXy+y0OM1TCyrYTYCANRP8Vg=
       "], {{0, 20}, {19, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{19, 20},
     PlotRange->{{0, 19}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 252, 207, 207, 207, 226, 255, 255, 255, 189, 
       10, 68}, {255, 245, 130, 53, 1, 1, 1, 22, 174, 255, 255, 73, 1, 68}, {
       243, 68, 0, 1, 24, 125, 120, 23, 19, 220, 209, 3, 1, 83}, {95, 1, 1, 
       123, 231, 255, 255, 228, 188, 238, 43, 1, 1, 172}, {67, 1, 121, 252, 
       255, 255, 255, 255, 250, 114, 2, 1, 84, 248}, {67, 1, 177, 255, 255, 
       255, 255, 255, 183, 1, 1, 85, 247, 255}, {13, 1, 171, 255, 255, 255, 
       255, 208, 58, 1, 22, 216, 255, 255}, {67, 1, 56, 221, 255, 255, 242, 
       75, 1, 1, 204, 255, 255, 255}, {190, 54, 1, 26, 170, 247, 73, 1, 1, 
       121, 252, 255, 255, 255}, {255, 193, 38, 1, 1, 1, 1, 1, 64, 255, 255, 
       255, 255, 255}, {255, 255, 240, 148, 1, 1, 1, 1, 189, 255, 255, 255, 
       255, 255}, {255, 255, 255, 222, 1, 1, 1, 1, 20, 145, 252, 255, 255, 
       255}, {255, 255, 229, 46, 1, 2, 153, 76, 1, 1, 203, 255, 255, 255}, {
       255, 238, 117, 1, 1, 159, 255, 249, 17, 1, 38, 255, 255, 255}, {255, 
       93, 1, 1, 78, 243, 255, 255, 109, 1, 32, 255, 255, 255}, {171, 2, 1, 
       23, 246, 255, 255, 255, 109, 1, 32, 255, 255, 255}, {67, 1, 20, 198, 
       255, 255, 241, 146, 36, 1, 129, 255, 255, 255}, {67, 1, 41, 140, 140, 
       137, 29, 1, 1, 45, 246, 255, 255, 255}, {91, 1, 1, 1, 1, 1, 1, 23, 118,
        232, 255, 255, 255, 255}, {239, 60, 1, 1, 1, 3, 126, 226, 255, 255, 
       255, 255, 255, 255}}, {{0, 20}, {14, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{14, 20},
     PlotRange->{{0, 14}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 255, 210, 82, 0, 1, 0, 11, 190, 255, 255}, {
       255, 255, 255, 173, 3, 16, 123, 165, 114, 1, 58, 255, 255}, {255, 255, 
       191, 13, 16, 166, 255, 255, 166, 1, 82, 255, 255}, {255, 215, 14, 1, 
       187, 255, 255, 244, 69, 1, 114, 255, 255}, {255, 117, 1, 16, 233, 255, 
       255, 252, 45, 1, 17, 104, 194}, {238, 14, 1, 186, 255, 255, 255, 255, 
       176, 1, 1, 1, 26}, {185, 1, 35, 244, 255, 255, 255, 227, 84, 1, 1, 1, 
       97}, {185, 1, 109, 255, 255, 255, 123, 16, 1, 53, 31, 1, 123}, {185, 1,
        62, 207, 207, 87, 6, 9, 102, 248, 57, 1, 191}, {221, 10, 1, 1, 1, 1, 
       82, 208, 255, 249, 47, 5, 201}, {255, 141, 5, 1, 23, 115, 235, 255, 
       255, 211, 1, 23, 255}, {255, 255, 191, 170, 233, 255, 255, 255, 255, 
       68, 1, 105, 255}, {255, 255, 255, 255, 255, 255, 255, 255, 250, 46, 1, 
       195, 255}, {255, 255, 255, 255, 255, 255, 255, 255, 220, 1, 13, 221, 
       255}, {255, 255, 255, 255, 255, 255, 255, 255, 176, 1, 27, 255, 255}, {
       255, 255, 255, 255, 255, 255, 255, 255, 48, 1, 68, 255, 255}, {255, 
       255, 255, 255, 255, 255, 255, 255, 48, 1, 199, 255, 255}, {255, 255, 
       255, 255, 255, 255, 255, 224, 15, 1, 199, 255, 255}, {255, 255, 255, 
       255, 255, 255, 255, 129, 1, 24, 238, 255, 255}, {255, 255, 255, 255, 
       255, 255, 255, 188, 1, 146, 255, 255, 255}}, {{0, 20}, {13, 0}}, {0, 
       255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{13, 20},
     PlotRange->{{0, 13}, {0, 20}}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.823980205547583*^9, 3.823980216605612*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"b67b4493-0d65-435d-ae7f-dae6c3f84b59"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", 
   ",", "6", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.82398021700113*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"def2b5fd-393a-4a23-9b6a-085012a2dc40"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s see how well it performs by testing it on a random \
sample of the test data\
\>", "Text",
 CellChangeTimes->{{3.822591053083922*^9, 
  3.8225910697086077`*^9}},ExpressionUUID->"c1843b7e-da22-4305-b0d9-\
50f9042468f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"cf", "[", 
       RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       "]"}], "\[Equal]", 
      RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
     "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"MNISTtest", ",", "1000"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8239802225014696`*^9, 3.82398025587959*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"92201ddb-4d6f-482d-a635-a205ac17ba8c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"True", ",", "434"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "566"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8239803035931396`*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"df21aea3-0a09-444e-82d1-9e44a644ef76"]
}, Open  ]],

Cell["\<\
It\[CloseCurlyQuote]s right about 15% of the time - only slightly better than \
random luck. We could improve this by going back to the training step and \
using more training samples:\
\>", "Text",
 CellChangeTimes->{{3.82259110804383*^9, 3.822591138974526*^9}, {
  3.822999966931994*^9, 
  3.822999999837356*^9}},ExpressionUUID->"413ee70e-ba3b-4b17-afd8-\
cc7cd2cdabec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"MNISTtest", ",", "1000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.823980351586757*^9, 3.823980371180238*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"f7aa0f2e-309b-4eea-b461-eb05d42d5404"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bettercf", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingset", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.823980373252694*^9, 3.8239803890026913`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"031228fa-0e2f-49e8-a2c0-a5e57ab2d483"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
                    "5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
                    "5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 18901568, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10285371240129673742813359589597473183419935656496129593120, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10285371240129673742813359589597473183419935656496129593120,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8239804218576593`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"cc188eb9-f1f3-4e9d-95e3-22a04817c770"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "bettercf", "]"}]], "Input",
 CellChangeTimes->{{3.823980394736667*^9, 3.8239803986184034`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"1987a109-7278-4216-b71d-0d62d886c5c6"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Data type"], 
                  TextCell["Data type"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              InterpretationBox[Cell[
               "Image",ExpressionUUID->"3e939647-5cf5-4969-a4ea-f1082e7db47f"],
               TextCell["Image"]]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Number of classes"], 
                  TextCell["Number of classes"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["10",
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", 
                    ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                 Short[#, 1]& ]],
               Annotation[#, 
                Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Accuracy"], 
                  TextCell["Accuracy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"86.5", "3.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   86.4604622366606037076`3., 3.5086158294887197506`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Method"], 
                  TextCell["Method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                InterpretationBox[Cell[
                 "SupportVectorMachine",ExpressionUUID->
                  "67f063dc-526e-428e-85e3-14ead69bc648"],
                 TextCell["SupportVectorMachine"]],
                StyleBox[
                 TagBox[
                  
                  GridBox[{{"\"KernelType\"", "\"RadialBasisFunction\""}, {
                    "\"GammaScalingParameter\"", "0.0011746584031946616`"}, {
                    "\"SoftMarginParameter\"", "3"}, {
                    "\"PolynomialDegree\"", "3"}, {
                    "\"BiasParameter\"", "1"}, {
                    "\"MulticlassStrategy\"", "\"OneVersusOne\""}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                   False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                   FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                 "Verdana", StripOnInput -> False]],
               Annotation[#, 
                Style[
                 
                 Grid[{{"KernelType", "RadialBasisFunction"}, {
                   "GammaScalingParameter", 0.0011746584031946616`}, {
                   "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                   "BiasParameter", 1}, {
                   "MulticlassStrategy", "OneVersusOne"}}, Alignment -> Left, 
                  Frame -> All, FrameStyle -> GrayLevel[0.84], 
                  Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"43.6`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"386.`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.5213025198280505368`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1319880927632962886`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.2573263343014579596`3.",
                   "\", \"", "0.7852787053546430585`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.2573263343014579596`3., 
                  ", ", 0.7852787053546430585`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Model memory"], 
                  TextCell["Model memory"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"18.9`", "\"MB\"", "megabytes", "\"Megabytes\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training examples used"], 
                  TextCell["Training examples used"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1000", "\"examples\"", "examples", "\"Examples\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training time"], 
                  TextCell["Training time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"31.5`", "\"s\"", "seconds", "\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.863877731576542}, {
                    3.6888794541139363`, 0.49495671872315994`}, {
                    5.298317366548036, -0.2583898209144592}, {
                    6.684611727667927, -0.6514247534809322}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.863877731576542}}, {{3.6888794541139363`, 
                    0.49495671872315994`}}, {{
                    5.298317366548036, -0.2583898209144592}}, {{
                    6.684611727667927, -0.6514247534809322}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.8534193743414895}, {
                    2.302585092994046, 0.8742278426758738}, {
                    2.302585092994046, 0.8742278426758738}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, 0.4661289561435995}, {
                    3.6888794541139363`, 0.522976674302306}, {
                    3.6888794541139363`, 0.522976674302306}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.298317366548036, -0.3213145591293542}, {
                    5.298317366548036, -0.19919129116447004`}, {
                    5.298317366548036, -0.19919129116447004`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.684611727667927, -0.9433679660625298}, {
                    6.684611727667927, -0.42573320645442625`}, {
                    6.684611727667927, -0.42573320645442625`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, -0.7356082248730141}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {-0.7356082248730141, 0.863877731576542}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.14727514076100184`}, {
                    3.6888794541139363`, 0.5606395923533257}, {
                    5.298317366548036, 0.7302633470031504}, {
                    6.684611727667927, 0.8646046223666061}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.14727514076100184`}}, {{3.6888794541139363`, 
                    0.5606395923533257}}, {{5.298317366548036, 
                    0.7302633470031504}}, {{6.684611727667927, 
                    0.8646046223666061}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {0, 1}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8715256561496865}, {
                    2.302585092994046, 0.8715256561496865}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006303982962006238}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.7250533486519912}, {
                    5.298317366548036, 0.1053408587303815}, {
                    6.684611727667927, -0.5115907394755779}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001791485465053763}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.298317366548036, 0.8308103367067375}, {
                    5.298317366548036, 0.8308103367067375}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006171601249220227}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{6.684611727667927, 0.8440473849005771}, {
                    6.684611727667927, 0.8440473849005771}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00008022164414034946}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8686017518491493}, {
                    3.6888794541139363`, 0.8708394217453905}, {
                    5.298317366548036, 0.8577586335549192}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0017336901595955516`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8700977896354569}, {
                    5.298317366548036, 0.6786323351221767}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005480181531154812}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8683205042584248}, {
                    3.6888794541139363`, 0.8713657149973727}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002542551550864308}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.8192605080951948}, {
                    3.6888794541139363`, 0.8192605080951948}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002898852740062293}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8698168510372949}, {
                    2.302585092994046, 0.8698168510372949}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011918163023145606`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.863877731576542}, {
                    3.6888794541139363`, 0.49495671872315994`}, {
                    5.298317366548036, -0.2583898209144592}, {
                    6.684611727667927, -0.6514247534809322}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011746584031946616`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8715256561496865}}, {{
                    2.302585092994046, 0.8715256561496865}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006303982962006238}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.6888794541139363`, 0.7250533486519912}}, {{
                    5.298317366548036, 0.1053408587303815}}, {{
                    6.684611727667927, -0.5115907394755779}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001791485465053763}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.298317366548036, 0.8308103367067375}}, {{
                    5.298317366548036, 0.8308103367067375}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006171601249220227}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    6.684611727667927, 0.8440473849005771}}, {{
                    6.684611727667927, 0.8440473849005771}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00008022164414034946}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8686017518491493}}, {{
                    3.6888794541139363`, 0.8708394217453905}}, {{
                    5.298317366548036, 0.8577586335549192}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0017336901595955516`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8700977896354569}}, {{
                    5.298317366548036, 0.6786323351221767}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005480181531154812}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8683205042584248}}, {{
                    3.6888794541139363`, 0.8713657149973727}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002542551550864308}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.6888794541139363`, 0.8192605080951948}}, {{
                    3.6888794541139363`, 0.8192605080951948}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002898852740062293}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8698168510372949}}, {{
                    2.302585092994046, 0.8698168510372949}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011918163023145606`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.863877731576542}}, {{
                    3.6888794541139363`, 0.49495671872315994`}}, {{
                    5.298317366548036, -0.2583898209144592}}, {{
                    6.684611727667927, -0.6514247534809322}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011746584031946616`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, -0.7360331095715221}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {-0.7360331095715221, 0.8715256561496865}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.863877731576542}, {
                    3.6888794541139363`, 0.49495671872315994`}, {
                    5.298317366548036, -0.2583898209144592}, {
                    6.684611727667927, -0.6514247534809322}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.863877731576542}}, {{3.6888794541139363`, 
                    0.49495671872315994`}}, {{
                    5.298317366548036, -0.2583898209144592}}, {{
                    6.684611727667927, -0.6514247534809322}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.8534193743414895}, {
                    2.302585092994046, 0.8742278426758738}, {
                    2.302585092994046, 0.8742278426758738}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, 0.4661289561435995}, {
                    3.6888794541139363`, 0.522976674302306}, {
                    3.6888794541139363`, 0.522976674302306}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{5.298317366548036, -0.3213145591293542}, {
                    5.298317366548036, -0.19919129116447004`}, {
                    5.298317366548036, -0.19919129116447004`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.684611727667927, -0.9433679660625298}, {
                    6.684611727667927, -0.42573320645442625`}, {
                    6.684611727667927, -0.42573320645442625`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, -0.7356082248730141}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {-0.7356082248730141, 0.863877731576542}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.14727514076100184`}, {
                    3.6888794541139363`, 0.5606395923533257}, {
                    5.298317366548036, 0.7302633470031504}, {
                    6.684611727667927, 0.8646046223666061}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.14727514076100184`}}, {{3.6888794541139363`, 
                    0.5606395923533257}}, {{5.298317366548036, 
                    0.7302633470031504}}, {{6.684611727667927, 
                    0.8646046223666061}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, 0}, DisplayFunction :> 
                    Identity, Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {0, 1}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8715256561496865}, {
                    2.302585092994046, 0.8715256561496865}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006303982962006238}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.7250533486519912}, {
                    5.298317366548036, 0.1053408587303815}, {
                    6.684611727667927, -0.5115907394755779}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001791485465053763}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.298317366548036, 0.8308103367067375}, {
                    5.298317366548036, 0.8308103367067375}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006171601249220227}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{6.684611727667927, 0.8440473849005771}, {
                    6.684611727667927, 0.8440473849005771}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00008022164414034946}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8686017518491493}, {
                    3.6888794541139363`, 0.8708394217453905}, {
                    5.298317366548036, 0.8577586335549192}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0017336901595955516`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8700977896354569}, {
                    5.298317366548036, 0.6786323351221767}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005480181531154812}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8683205042584248}, {
                    3.6888794541139363`, 0.8713657149973727}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002542551550864308}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.8192605080951948}, {
                    3.6888794541139363`, 0.8192605080951948}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002898852740062293}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8698168510372949}, {
                    2.302585092994046, 0.8698168510372949}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011918163023145606`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.863877731576542}, {
                    3.6888794541139363`, 0.49495671872315994`}, {
                    5.298317366548036, -0.2583898209144592}, {
                    6.684611727667927, -0.6514247534809322}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011746584031946616`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8715256561496865}}, {{
                    2.302585092994046, 0.8715256561496865}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006303982962006238}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.6888794541139363`, 0.7250533486519912}}, {{
                    5.298317366548036, 0.1053408587303815}}, {{
                    6.684611727667927, -0.5115907394755779}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001791485465053763}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.298317366548036, 0.8308103367067375}}, {{
                    5.298317366548036, 0.8308103367067375}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006171601249220227}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    6.684611727667927, 0.8440473849005771}}, {{
                    6.684611727667927, 0.8440473849005771}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00008022164414034946}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8686017518491493}}, {{
                    3.6888794541139363`, 0.8708394217453905}}, {{
                    5.298317366548036, 0.8577586335549192}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0017336901595955516`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8700977896354569}}, {{
                    5.298317366548036, 0.6786323351221767}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005480181531154812}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8683205042584248}}, {{
                    3.6888794541139363`, 0.8713657149973727}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002542551550864308}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.6888794541139363`, 0.8192605080951948}}, {{
                    3.6888794541139363`, 0.8192605080951948}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002898852740062293}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8698168510372949}}, {{
                    2.302585092994046, 0.8698168510372949}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011918163023145606`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.863877731576542}}, {{
                    3.6888794541139363`, 0.49495671872315994`}}, {{
                    5.298317366548036, -0.2583898209144592}}, {{
                    6.684611727667927, -0.6514247534809322}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011746584031946616`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, -0.7360331095715221}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {-0.7360331095715221, 0.8715256561496865}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {123., 126.38790538896814`}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.823980426969988*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"0b207b17-cb5d-446d-a3dc-db627a47b68c"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s see how well it performs by testing it on a random \
sample of the test data\
\>", "Text",
 CellChangeTimes->{{3.822591053083922*^9, 
  3.8225910697086077`*^9}},ExpressionUUID->"9e2b11b4-e5ab-44c7-bc3a-\
805813741f8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"bettercf", "[", 
       RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       "]"}], "\[Equal]", 
      RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
     "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"MNISTtest", ",", "1000"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.823980432845567*^9, 3.823980457966772*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"d8d09969-5562-4af0-b927-0883c894f475"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"True", ",", "888"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "112"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8239805112076817`*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"a5226d06-0388-4be3-8ddd-e57a0ceed173"]
}, Open  ]],

Cell["Now this is close to 90% accurate", "Text",
 CellChangeTimes->{{3.8225911746427097`*^9, 
  3.822591182160274*^9}},ExpressionUUID->"54ec42a6-53b3-4bb2-b07b-\
d6b50541c19f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"Tally", "[", 
   RowBox[{"Map", "[", 
    RowBox[{"bettercf", ",", 
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{"MNISTbynumber", "[", "8", "]"}], ",", "1000"}], "]"}]}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.823980462404854*^9, 3.8239804808471947`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"df8ec54b-84ea-414f-936a-09171563b6ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "25"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "30"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "41"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "70"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "801"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.823980572697539*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"c0fab6a8-2b9e-4de5-9e85-f42f07fa4644"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{574.8, 579.6},
WindowMargins->{{-4.8, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a64993f-039e-4bd8-bb26-a1c01cc3d079"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 166, 3, 97, "Title",ExpressionUUID->"289eaf38-3e93-40a8-bc2b-d9c992b97006"],
Cell[749, 27, 423, 8, 104, "Text",ExpressionUUID->"ef24bbba-1885-49f3-bd5c-aeaabe0bc185"],
Cell[CellGroupData[{
Cell[1197, 39, 171, 3, 67, "Section",ExpressionUUID->"bde7937b-f30f-4050-93b6-58fce63e9674"],
Cell[1371, 44, 917, 28, 58, "Text",ExpressionUUID->"cadd491c-50ed-4874-93d3-6fd1c6d20aee"],
Cell[CellGroupData[{
Cell[2313, 76, 716, 20, 32, "Input",ExpressionUUID->"f1d5892e-59bc-4c87-a022-44f65051edb4"],
Cell[3032, 98, 455, 10, 32, "Output",ExpressionUUID->"1ac94df0-8a00-4286-b002-df3c923ec3c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3524, 113, 710, 21, 32, "Input",ExpressionUUID->"feac82ae-7f5e-4e08-a8c3-a1f554c91966"],
Cell[4237, 136, 437, 10, 32, "Output",ExpressionUUID->"6e53b46b-f83e-4627-a745-ee772f20c088"]
}, Open  ]],
Cell[4689, 149, 268, 6, 58, "Text",ExpressionUUID->"395ea9a3-acfc-487f-b9f9-78cf4694122f"],
Cell[CellGroupData[{
Cell[4982, 159, 2116, 60, 174, "Input",ExpressionUUID->"b32f8fb6-b992-46ba-8ab9-0eb4ea9eda06"],
Cell[7101, 221, 84074, 1384, 278, "Output",ExpressionUUID->"4200c751-75db-457d-959d-8448c6879998"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[91224, 1611, 170, 2, 67, "Section",ExpressionUUID->"3b64852d-85ac-42fc-81d6-a533fd895d6a"],
Cell[91397, 1615, 697, 15, 81, "Text",ExpressionUUID->"05d2161c-cfdb-419e-8627-028b75f6b563"],
Cell[92097, 1632, 2743, 73, 400, "Input",ExpressionUUID->"1baf39a4-fe3b-48a8-8f4b-14e1da2c8efc"],
Cell[CellGroupData[{
Cell[94865, 1709, 500, 8, 49, "Input",ExpressionUUID->"277a89e2-d112-4ae2-ab84-e40a68fffb47"],
Cell[95368, 1719, 18385, 402, 246, "Output",ExpressionUUID->"f74db8e6-c34c-4481-b732-161819d716b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113790, 2126, 174, 3, 54, "Subsection",ExpressionUUID->"a0d87674-85da-448f-9f75-c4c4fc2b0335"],
Cell[113967, 2131, 311, 7, 58, "Text",ExpressionUUID->"572c21a5-143a-4be7-99b8-0e67f833dbbf"],
Cell[CellGroupData[{
Cell[114303, 2142, 658, 18, 49, "Input",ExpressionUUID->"ab79a048-191a-44be-b0dd-4f6f4c591807"],
Cell[114964, 2162, 1628, 38, 111, "Output",ExpressionUUID->"ef580280-4c09-4b09-a629-f18ede000bba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116629, 2205, 625, 18, 49, "Input",ExpressionUUID->"78dc4baa-6592-4038-b870-fee62d3c5cd0"],
Cell[117257, 2225, 2452, 64, 248, "Output",ExpressionUUID->"1b7ea952-a212-4874-8c26-2e12bdb299bf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119746, 2294, 291, 5, 28, "Input",ExpressionUUID->"a9912735-3d83-4ff2-ba99-4378d90fc8c4"],
Cell[120040, 2301, 3807, 96, 345, "Output",ExpressionUUID->"74c1ad90-7b99-4cb4-b8f7-382ea551e404"]
}, Open  ]],
Cell[123862, 2400, 241, 6, 58, "Text",ExpressionUUID->"b2879cb0-22d2-4c9a-b278-59ac4e9c8e3c"],
Cell[CellGroupData[{
Cell[124128, 2410, 641, 18, 54, "Input",ExpressionUUID->"88731b18-b2c1-422e-9fbd-c5aa2f168574"],
Cell[124772, 2430, 542, 12, 32, "Output",ExpressionUUID->"81fcf7e0-5224-4317-9f41-3641e40d0610"]
}, Open  ]],
Cell[125329, 2445, 234, 4, 35, "Text",ExpressionUUID->"bd7948a8-251a-46fc-afb2-461b6156a944"],
Cell[125566, 2451, 432, 11, 49, "Input",ExpressionUUID->"5f3d2c05-c50b-4d8e-af22-0a156dc29575"],
Cell[CellGroupData[{
Cell[126023, 2466, 259, 5, 28, "Input",ExpressionUUID->"a47f2ed9-44c1-4039-a71f-6ae93bb1cd54"],
Cell[126285, 2473, 255, 4, 32, "Output",ExpressionUUID->"11c62e23-c283-4f7c-95fb-6398ac24ed33"]
}, Open  ]],
Cell[126555, 2480, 221, 4, 35, "Text",ExpressionUUID->"8f936eb6-5958-47e8-975c-20e978b0b6cb"],
Cell[CellGroupData[{
Cell[126801, 2488, 352, 9, 28, "Input",ExpressionUUID->"09059c0b-eb6e-4ea1-8d32-4ea7266a6105"],
Cell[127156, 2499, 508, 11, 32, "Output",ExpressionUUID->"81f74a17-ad8e-4b7f-95a7-5745615ddf16"]
}, Open  ]],
Cell[127679, 2513, 161, 3, 35, "Text",ExpressionUUID->"4c0682ec-235b-4b88-9fdc-5ef34b86fb08"],
Cell[CellGroupData[{
Cell[127865, 2520, 352, 9, 28, "Input",ExpressionUUID->"1b6cf5d2-b20e-4968-a33b-e45c57aca0e5"],
Cell[128220, 2531, 504, 11, 32, "Output",ExpressionUUID->"0af0ee9b-608f-4282-87b6-9898826fa8c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128761, 2547, 301, 8, 28, "Input",ExpressionUUID->"51e59949-6a90-4721-afb8-925bc279d4ab"],
Cell[129065, 2557, 479, 11, 32, "Output",ExpressionUUID->"16097642-a847-42a7-b6d3-a51a9374e928"]
}, Open  ]],
Cell[129559, 2571, 218, 4, 35, "Text",ExpressionUUID->"71aa4012-4450-45c2-aab6-28babcd20107"],
Cell[CellGroupData[{
Cell[129802, 2579, 1025, 24, 166, "Input",ExpressionUUID->"50e8ad4c-f090-4dd4-a90d-01ca68b7d208"],
Cell[130830, 2605, 19105, 383, 246, "Output",ExpressionUUID->"e6df9cbe-c6e6-46d7-a1bd-bff01ded4a08"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[149984, 2994, 171, 3, 54, "Subsection",ExpressionUUID->"e82e002d-49e0-42cc-8e54-e6f0cebf4365"],
Cell[150158, 2999, 435, 16, 58, "Text",ExpressionUUID->"e94c3f54-6f1d-429b-ac94-ebd841892928"],
Cell[CellGroupData[{
Cell[150618, 3019, 363, 8, 28, "Input",ExpressionUUID->"4f12c307-d5c6-4051-8f19-8645f8d460f0"],
Cell[150984, 3029, 2625, 69, 189, "Output",ExpressionUUID->"d176a937-c512-4e13-9078-d24ae81b4860"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153646, 3103, 584, 15, 49, "Input",ExpressionUUID->"4b254041-e79e-4be5-9e0f-f02a0cb937df"],
Cell[154233, 3120, 656, 19, 53, "Output",ExpressionUUID->"136a7376-0dfb-4f9d-9177-f7fa88f404b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154926, 3144, 297, 6, 28, "Input",ExpressionUUID->"326f6f52-2f16-4169-8daa-8e72b1306e04"],
Cell[155226, 3152, 434, 8, 32, "Output",ExpressionUUID->"ee798250-1711-4b22-8632-8197cd9c24f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155697, 3165, 389, 9, 28, "Input",ExpressionUUID->"4aa41e78-9b6c-4fd7-b8ff-43ec276f41d7"],
Cell[156089, 3176, 1194, 25, 72, "Output",ExpressionUUID->"7448e7df-c65d-49b8-9d25-b2a5014d110b"]
}, Open  ]],
Cell[157298, 3204, 188, 3, 35, "Text",ExpressionUUID->"ed6a3e03-94c6-463e-8ee5-edd2ba5ddf24"],
Cell[CellGroupData[{
Cell[157511, 3211, 839, 21, 49, "Input",ExpressionUUID->"2dc7405a-f135-4529-82e5-c54a16740582"],
Cell[158353, 3234, 2178, 54, 136, "Output",ExpressionUUID->"2f4510bf-a19b-4940-ba72-e517c3be8368"]
}, Open  ]],
Cell[160546, 3291, 434, 11, 58, "Text",ExpressionUUID->"4a17afa9-4bb3-4bfa-9e7e-1967d1f6127a"],
Cell[160983, 3304, 738, 18, 81, "Text",ExpressionUUID->"4e33ebd1-1ff3-4600-8d97-0b8096964f14"],
Cell[CellGroupData[{
Cell[161746, 3326, 493, 12, 28, "Input",ExpressionUUID->"d0d0e41d-e8bf-48d3-ba87-b9d3e9fb4bd7"],
Cell[162242, 3340, 341, 7, 32, "Output",ExpressionUUID->"1926ac02-4337-490a-bb58-135e426ec7cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[162620, 3352, 591, 15, 68, "Input",ExpressionUUID->"3d9386e4-3958-4c6c-af60-5bad263c8bd8"],
Cell[163214, 3369, 286, 6, 32, "Output",ExpressionUUID->"e41120e7-c1f9-4ac5-b45b-42337fffdbc2"]
}, Open  ]],
Cell[163515, 3378, 271, 6, 35, "Text",ExpressionUUID->"35032774-e30d-4dbf-99f5-7cc7e51618d1"],
Cell[CellGroupData[{
Cell[163811, 3388, 176, 2, 28, "Input",ExpressionUUID->"2dacb5bc-25d5-480e-a23d-0e2725cf975d"],
Cell[163990, 3392, 392, 8, 32, "Output",ExpressionUUID->"b2b588da-8d0d-4e97-b2f9-a6ca4810344c"]
}, Open  ]],
Cell[164397, 3403, 407, 8, 58, "Text",ExpressionUUID->"140257a3-8af3-40b2-a63b-ffe6b06ec56d"],
Cell[CellGroupData[{
Cell[164829, 3415, 552, 14, 28, "Input",ExpressionUUID->"778789de-047c-4c37-8291-dc27437672a8"],
Cell[165384, 3431, 230, 5, 32, "Output",ExpressionUUID->"d436dfeb-28fc-45c0-82d0-089f6759cd95"]
}, Open  ]],
Cell[165629, 3439, 198, 3, 35, "Text",ExpressionUUID->"1e40ec72-719c-4d47-a1eb-5c57eb1e9b24"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[165876, 3448, 161, 3, 67, "Section",ExpressionUUID->"b5bf50b5-4b7d-404b-ba9e-547513b6c38b"],
Cell[166040, 3453, 427, 8, 104, "Text",ExpressionUUID->"4864c7c6-789f-4875-aaa1-93856e1c6573"],
Cell[166470, 3463, 228, 4, 28, "Input",ExpressionUUID->"e06cd2fb-dc51-4b1a-b0dc-25fd3a1c1018"],
Cell[166701, 3469, 616, 18, 49, "Input",ExpressionUUID->"a2121479-0c02-4a78-a8b6-15ce7fadb418"],
Cell[167320, 3489, 641, 18, 49, "Input",ExpressionUUID->"badc6d73-125e-4035-ab8c-96e04cebe612"],
Cell[167964, 3509, 238, 4, 35, "Text",ExpressionUUID->"d9346f6a-07ba-4745-9a38-bdcf7b6b95e4"],
Cell[168205, 3515, 763, 23, 49, "Input",ExpressionUUID->"547a28d1-27e5-4a4a-bf97-69792b503365"],
Cell[168971, 3540, 561, 15, 49, "Input",ExpressionUUID->"84412164-1060-48e5-9068-a97aa8403b2e"],
Cell[169535, 3557, 189, 3, 35, "Text",ExpressionUUID->"aa20f92e-3f62-4012-a4b0-70f91dd6e8a9"],
Cell[CellGroupData[{
Cell[169749, 3564, 408, 8, 49, "Input",ExpressionUUID->"1cbb6b96-ffe3-4f5c-8088-c8dbf38d9699"],
Cell[170160, 3574, 13003, 275, 451, "Output",ExpressionUUID->"7eb0e206-b75e-4b3e-bf4d-6edd6b66f413"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183200, 3854, 179, 3, 54, "Subsection",ExpressionUUID->"125c3fb4-950d-4960-89f3-f59c80d6202d"],
Cell[183382, 3859, 655, 17, 81, "Text",ExpressionUUID->"94ddb11d-5747-4a93-a5ab-a11e3e07c2c2"],
Cell[184040, 3878, 521, 15, 39, "Input",ExpressionUUID->"763e08df-f285-4c62-89d8-c6acb5c2139e"],
Cell[CellGroupData[{
Cell[184586, 3897, 310, 6, 28, "Input",ExpressionUUID->"d822a952-0710-4709-8fd4-097be9c7a839"],
Cell[184899, 3905, 2728, 69, 209, "Output",ExpressionUUID->"a8169a44-7b22-4136-b884-4011b216ce47"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187664, 3979, 403, 8, 49, "Input",ExpressionUUID->"ad9588e6-c95c-4944-b956-b489c2f5efe8"],
Cell[188070, 3989, 12975, 273, 451, "Output",ExpressionUUID->"a8709bf4-b650-4a5b-b0d9-c7864532d826"]
}, Open  ]],
Cell[201060, 4265, 199, 3, 35, "Text",ExpressionUUID->"ef691abc-d69d-4fbc-ac0d-ff6784b6e37b"],
Cell[201262, 4270, 391, 10, 28, "Input",ExpressionUUID->"90f16516-6c5b-429a-b58e-9f33da7bddb7"],
Cell[201656, 4282, 618, 16, 49, "Input",ExpressionUUID->"543907f6-92f6-4ea8-b831-c17d404cd603"],
Cell[202277, 4300, 314, 7, 28, "Input",ExpressionUUID->"5c2402a5-f207-4f59-a6d1-0a8f799a8e1e"],
Cell[202594, 4309, 413, 11, 28, "Input",ExpressionUUID->"50e24add-7163-41bb-96cd-72467901ef05"],
Cell[203010, 4322, 188, 3, 35, "Text",ExpressionUUID->"0dd756a2-321a-4c55-8b9e-139c2354cdd9"],
Cell[203201, 4327, 796, 21, 49, "Input",ExpressionUUID->"7bf3ef13-de10-4ffc-8a63-089664afe0e3"],
Cell[CellGroupData[{
Cell[204022, 4352, 266, 4, 28, "Input",ExpressionUUID->"7e408c98-5367-4fb6-b072-1f516406bef6"],
Cell[204291, 4358, 1858, 48, 111, "Output",ExpressionUUID->"9a7b9f90-c09a-4de2-8c50-2ea3ed389839"]
}, Open  ]],
Cell[CellGroupData[{
Cell[206186, 4411, 630, 15, 74, "Input",ExpressionUUID->"becb038c-4b45-488c-8ee5-50d5663ccc68"],
Cell[206819, 4428, 565, 15, 53, "Output",ExpressionUUID->"309016de-5697-42f1-a36d-00076a6f9af9"]
}, Open  ]],
Cell[207399, 4446, 722, 19, 81, "Text",ExpressionUUID->"fa2fed76-7ef8-45bb-88bf-f7dad0734bb5"],
Cell[CellGroupData[{
Cell[208146, 4469, 442, 11, 28, "Input",ExpressionUUID->"31afaea5-291e-4cb0-ab86-8dccf93ee11a"],
Cell[208591, 4482, 335, 8, 32, "Output",ExpressionUUID->"51153414-78d4-42a0-98fe-b6361ac4be3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208963, 4495, 608, 17, 28, "Input",ExpressionUUID->"850bbe21-4092-4a47-9c3f-8b1cefa41f39"],
Cell[209574, 4514, 220, 4, 32, "Output",ExpressionUUID->"4f9deb9a-b199-4f86-bbb7-d333c7d22fd1"]
}, Open  ]],
Cell[209809, 4521, 208, 4, 35, "Text",ExpressionUUID->"3cdd876a-61f0-4c1e-a3e6-e20a8bdb5b3d"],
Cell[CellGroupData[{
Cell[210042, 4529, 777, 21, 68, "Input",ExpressionUUID->"8654090d-6d23-40f7-8af2-dceab3b01e59"],
Cell[210822, 4552, 373, 9, 32, "Output",ExpressionUUID->"c8e77558-260f-439a-9c32-7cb58f12b01a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[211232, 4566, 997, 25, 88, "Input",ExpressionUUID->"c4ecf976-33f4-4562-97fd-a45f7c868593"],
Cell[212232, 4593, 19240, 388, 451, "Output",ExpressionUUID->"daf1ba9c-d5dd-4676-bd31-dd12286180b9"]
}, Open  ]],
Cell[231487, 4984, 185, 3, 35, "Text",ExpressionUUID->"2c5cf1ec-d97d-4d2c-bc13-067fa2c68da3"],
Cell[CellGroupData[{
Cell[231697, 4991, 701, 20, 68, "Input",ExpressionUUID->"d43ca367-44e3-4a41-bc86-cf5b34eddbc7"],
Cell[232401, 5013, 382, 9, 32, "Output",ExpressionUUID->"ff1fc78e-123e-45a8-83e3-ae2cc8c4e60a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[232820, 5027, 1129, 27, 127, "Input",ExpressionUUID->"469601f5-b9ca-4ca6-9d7d-db120544eb11"],
Cell[233952, 5056, 69083, 1207, 451, "Output",ExpressionUUID->"715d50f1-a54d-4ef1-b5eb-398a85b66192"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[303084, 6269, 188, 3, 54, "Subsection",ExpressionUUID->"46fc5f4c-3ffa-48b9-b86e-56250f6201ff"],
Cell[303275, 6274, 676, 18, 81, "Text",ExpressionUUID->"6a498b52-ba54-4e92-916a-0a93b2a9eda4"],
Cell[303954, 6294, 447, 12, 32, "Input",ExpressionUUID->"1101afb0-b9ed-4a5e-8e57-e88759e93b18"],
Cell[CellGroupData[{
Cell[304426, 6310, 309, 6, 28, "Input",ExpressionUUID->"e9bac504-adf3-4354-a947-4cc66e221648"],
Cell[304738, 6318, 3690, 96, 345, "Output",ExpressionUUID->"e11409e0-6469-4b72-8019-c37b8243e18c"]
}, Open  ]],
Cell[308443, 6417, 232, 6, 58, "Text",ExpressionUUID->"38d37acc-0bdb-4c4f-991d-7486c167803f"],
Cell[308678, 6425, 399, 10, 28, "Input",ExpressionUUID->"d0aaaaa4-02cf-43f3-aea4-58cec57aee6b"],
Cell[309080, 6437, 626, 17, 49, "Input",ExpressionUUID->"f327fc67-3e30-4410-9813-e304b51ea262"],
Cell[309709, 6456, 318, 7, 28, "Input",ExpressionUUID->"678e3286-b94c-485d-acf3-25570e058ee8"],
Cell[310030, 6465, 410, 11, 28, "Input",ExpressionUUID->"9b618a9e-151e-41be-a91f-f079fc9a8fe5"],
Cell[310443, 6478, 770, 20, 49, "Input",ExpressionUUID->"da8e7efe-3995-4489-9ef3-e0ad268cf335"],
Cell[CellGroupData[{
Cell[311238, 6502, 213, 3, 28, "Input",ExpressionUUID->"555a5713-ab34-4a56-bfac-1d2bd475a89a"],
Cell[311454, 6507, 1839, 48, 111, "Output",ExpressionUUID->"287e3c14-e27e-4632-97c8-6b2183f13a9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[313330, 6560, 630, 15, 74, "Input",ExpressionUUID->"4167eba9-7ac5-4749-8e35-0d6df87fb986"],
Cell[313963, 6577, 565, 15, 53, "Output",ExpressionUUID->"0b8cdde5-0522-4222-ae71-6ee77482c24b"]
}, Open  ]],
Cell[314543, 6595, 743, 20, 81, "Text",ExpressionUUID->"fb1441ae-dd99-4725-a8f5-f79776112d7c"],
Cell[CellGroupData[{
Cell[315311, 6619, 457, 11, 28, "Input",ExpressionUUID->"20c86bc5-6810-4fd0-85a6-eb8ccbc61237"],
Cell[315771, 6632, 374, 8, 32, "Output",ExpressionUUID->"bdad7087-2fcf-48a8-a44a-d11fca8480c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[316182, 6645, 622, 17, 28, "Input",ExpressionUUID->"201ebbf1-d7e2-45c3-ae29-176e5dd67421"],
Cell[316807, 6664, 220, 4, 32, "Output",ExpressionUUID->"3c82f088-6381-4980-a52f-26083465711b"]
}, Open  ]],
Cell[317042, 6671, 208, 4, 35, "Text",ExpressionUUID->"432d1d91-2cf6-43da-9e08-9c1be9cb08ec"],
Cell[CellGroupData[{
Cell[317275, 6679, 728, 20, 88, "Input",ExpressionUUID->"171fd1f7-5524-4bf0-b9bc-c89b16e27a6f"],
Cell[318006, 6701, 451, 10, 32, "Output",ExpressionUUID->"9061af7e-de85-49e8-94f4-87d3dea15f4b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318494, 6716, 979, 25, 88, "Input",ExpressionUUID->"0a1c5a0c-df74-4cf1-ae63-7fc217a4c47b"],
Cell[319476, 6743, 195546, 3160, 246, 134689, 2161, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"6abeb5f9-0b8d-49ae-9912-19ce5d5704eb"]
}, Open  ]],
Cell[515037, 9906, 185, 3, 35, "Text",ExpressionUUID->"5f1c4167-382c-42bf-83ff-ef71614c9388"],
Cell[CellGroupData[{
Cell[515247, 9913, 704, 20, 68, "Input",ExpressionUUID->"28cee7ac-875e-4cdf-957c-839a3247c0d6"],
Cell[515954, 9935, 382, 9, 32, "Output",ExpressionUUID->"6bc8b0db-65e2-4f7b-b643-16a97c38f33e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[516373, 9949, 1131, 27, 127, "Input",ExpressionUUID->"6ac297d6-aa98-47c5-b46c-1b129f562aa8"],
Cell[517507, 9978, 69059, 1207, 451, "Output",ExpressionUUID->"0cca38a0-8b68-4321-adaa-3ae5f1fb988f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[586603, 11190, 1612, 42, 185, "Input",ExpressionUUID->"31c609ef-fda8-46b5-b57d-15b4077e6233"],
Cell[588218, 11234, 26803, 525, 451, "Output",ExpressionUUID->"ac547234-b52b-4838-ac3f-5336a1d54389"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[615070, 11765, 185, 3, 54, "Subsection",ExpressionUUID->"9e25d241-1cf9-4572-b6f8-5b01afad8606"],
Cell[615258, 11770, 1311, 41, 102, "Text",ExpressionUUID->"1139c56a-36cd-4f56-843f-66c2dfee1852"],
Cell[616572, 11813, 778, 23, 51, "Input",ExpressionUUID->"7fe06579-08a3-452d-a7e5-582c4345b97f"],
Cell[617353, 11838, 485, 13, 58, "Text",ExpressionUUID->"db335bfd-2d20-4a9a-8c3f-e2e587fd670b"],
Cell[CellGroupData[{
Cell[617863, 11855, 235, 4, 28, "Input",ExpressionUUID->"d73b56ca-944e-422d-a216-a8d348e66ad7"],
Cell[618101, 11861, 2577, 73, 209, "Output",ExpressionUUID->"0d854a3e-30e4-4ec3-b292-8da8460e74ab"]
}, Open  ]],
Cell[620693, 11937, 624, 16, 49, "Input",ExpressionUUID->"71dd7b61-2545-4bf5-898c-812b144b2284"],
Cell[621320, 11955, 319, 7, 28, "Input",ExpressionUUID->"5e208ae1-798b-4a66-988e-8bf5002ecc42"],
Cell[621642, 11964, 412, 11, 28, "Input",ExpressionUUID->"a769be69-df42-413b-afcc-4fe6e0b8035b"],
Cell[622057, 11977, 1158, 30, 68, "Input",ExpressionUUID->"ed6dc244-c52d-4d17-b40d-f4db325bb572"],
Cell[623218, 12009, 556, 14, 49, "Input",ExpressionUUID->"91750c91-84ea-484a-9474-ccca9ac362b7"],
Cell[CellGroupData[{
Cell[623799, 12027, 212, 3, 28, "Input",ExpressionUUID->"d055d928-3247-4b6f-becd-9ab068dd9907"],
Cell[624014, 12032, 1838, 48, 111, "Output",ExpressionUUID->"aae200a3-57bd-47fa-b5ab-5cd78929675f"]
}, Open  ]],
Cell[625867, 12083, 332, 7, 81, "Text",ExpressionUUID->"c0803504-b416-4ab1-b175-a69e65a4abcc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[626236, 12095, 163, 3, 54, "Subsection",ExpressionUUID->"a3305560-56b0-42d2-b21f-f613acc54773"],
Cell[626402, 12100, 368, 7, 81, "Text",ExpressionUUID->"1a657693-4fa5-40a8-841d-52ff5cbb44b1"],
Cell[626773, 12109, 1284, 37, 88, "Input",ExpressionUUID->"2cac18ee-6101-4897-9886-234b81e053da"],
Cell[CellGroupData[{
Cell[628082, 12150, 329, 7, 28, "Input",ExpressionUUID->"6a07c581-d3be-4e48-94de-93aa6b3f595a"],
Cell[628414, 12159, 3210, 74, 245, "Output",ExpressionUUID->"2f5d3327-298b-460b-aba1-cb267a537b72"]
}, Open  ]],
Cell[631639, 12236, 755, 15, 150, "Text",ExpressionUUID->"eb4a4c44-8f19-4349-be9f-b4c29ed20b24"],
Cell[632397, 12253, 186, 3, 35, "Text",ExpressionUUID->"3d51c64a-579f-48d6-909a-38dd50116918"],
Cell[CellGroupData[{
Cell[632608, 12260, 448, 10, 49, "Input",ExpressionUUID->"8a058a80-52b6-43f4-ba95-dacb5f287245"],
Cell[633059, 12272, 51759, 978, 65, "Output",ExpressionUUID->"85ad0b0c-c83a-41c7-97a8-c74e2eaabe70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[684855, 13255, 1047, 27, 107, "Input",ExpressionUUID->"6dce9d81-3a03-499b-a0e6-b71e5e691447"],
Cell[685905, 13284, 12386, 236, 374, "Output",ExpressionUUID->"06705b5d-9e44-4237-9233-9b66275471d9"]
}, Open  ]],
Cell[698306, 13523, 211, 5, 35, "Text",ExpressionUUID->"af4083e9-c97a-4451-aa68-ef3827a8545a"],
Cell[CellGroupData[{
Cell[698542, 13532, 519, 11, 68, "Input",ExpressionUUID->"35700b94-83c0-46d8-85f5-11ef195ed815"],
Cell[699064, 13545, 45964, 873, 65, "Output",ExpressionUUID->"398114be-0555-4d74-b852-a24fa990e7fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[745065, 14423, 1049, 27, 107, "Input",ExpressionUUID->"8d06e01f-1255-4612-8232-9c842c6fa2fd"],
Cell[746117, 14452, 44184, 757, 374, "Output",ExpressionUUID->"ebdbf37d-3443-40b3-85ea-8fd25da9d789"]
}, Open  ]],
Cell[790316, 15212, 247, 4, 35, "Text",ExpressionUUID->"b13bba6c-3616-4f39-992f-cb29a2e45d59"],
Cell[CellGroupData[{
Cell[790588, 15220, 629, 15, 124, "Input",ExpressionUUID->"da820700-2ab6-40a1-88d0-4088cbd4033d"],
Cell[791220, 15237, 46577, 886, 65, "Output",ExpressionUUID->"4167ad63-eac7-4268-aebc-a9ab19c95fed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[837834, 16128, 1049, 27, 107, "Input",ExpressionUUID->"d54ab134-0dfb-4aec-b8ae-597cf95334d5"],
Cell[838886, 16157, 38315, 660, 374, "Output",ExpressionUUID->"2f96b399-1199-4bd0-b87c-223d7f7db947"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[877262, 16824, 251, 5, 105, "Section",ExpressionUUID->"5b7456a3-1a2f-41f1-a5be-9904c63118e1"],
Cell[877516, 16831, 302, 6, 81, "Text",ExpressionUUID->"5ec8ac3d-447b-4953-ba0e-0deec8bb5628"],
Cell[877821, 16839, 394, 9, 49, "Input",ExpressionUUID->"f96c09ec-4927-44fa-a984-f7963204d93c"],
Cell[878218, 16850, 396, 9, 49, "Input",ExpressionUUID->"968b9afe-3a7b-4a95-8d88-2f53ebe73e14"],
Cell[878617, 16861, 329, 7, 28, "Input",ExpressionUUID->"a6f1562e-8494-4f2b-a43a-101687ed430d"],
Cell[878949, 16870, 278, 6, 58, "Text",ExpressionUUID->"eaa048fa-eb2a-4e80-83d6-d4ea0b4f7340"],
Cell[879230, 16878, 295, 6, 28, "Input",ExpressionUUID->"275bb8fe-777b-42f8-a626-cb1409a52851"],
Cell[CellGroupData[{
Cell[879550, 16888, 333, 7, 28, "Input",ExpressionUUID->"1b411cae-969a-41a0-b78a-7e96a5857298"],
Cell[879886, 16897, 11743, 238, 85, "Output",ExpressionUUID->"a4adf5e0-e909-4bf5-afb5-10dcbb6c1b8d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[891666, 17140, 209, 3, 28, "Input",ExpressionUUID->"6cb68309-406c-4ea6-b8d5-210f05243df8"],
Cell[891878, 17145, 83175, 1687, 585, "Output",ExpressionUUID->"3b071272-a05e-4354-a48b-1f40b60faa25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[975090, 18837, 11062, 211, 34, "Input",ExpressionUUID->"b67b4493-0d65-435d-ae7f-dae6c3f84b59"],
Cell[986155, 19050, 280, 6, 32, "Output",ExpressionUUID->"def2b5fd-393a-4a23-9b6a-085012a2dc40"]
}, Open  ]],
Cell[986450, 19059, 251, 6, 58, "Text",ExpressionUUID->"c1843b7e-da22-4305-b0d9-50f9042468f7"],
Cell[CellGroupData[{
Cell[986726, 19069, 579, 14, 28, "Input",ExpressionUUID->"92201ddb-4d6f-482d-a635-a205ac17ba8c"],
Cell[987308, 19085, 305, 8, 32, "Output",ExpressionUUID->"df21aea3-0a09-444e-82d1-9e44a644ef76"]
}, Open  ]],
Cell[987628, 19096, 382, 8, 81, "Text",ExpressionUUID->"413ee70e-ba3b-4b17-afd8-cc7cd2cdabec"],
Cell[988013, 19106, 298, 6, 28, "Input",ExpressionUUID->"f7aa0f2e-309b-4eea-b461-eb05d42d5404"],
Cell[CellGroupData[{
Cell[988336, 19116, 339, 7, 49, "Input",ExpressionUUID->"031228fa-0e2f-49e8-a2c0-a5e57ab2d483"],
Cell[988678, 19125, 11721, 238, 85, "Output",ExpressionUUID->"cc188eb9-f1f3-4e9d-95e3-22a04817c770"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1000436, 19368, 222, 4, 28, "Input",ExpressionUUID->"1987a109-7278-4216-b71d-0d62d886c5c6"],
Cell[1000661, 19374, 87093, 1755, 585, "Output",ExpressionUUID->"0b207b17-cb5d-446d-a3dc-db627a47b68c"]
}, Open  ]],
Cell[1087769, 21132, 251, 6, 58, "Text",ExpressionUUID->"9e2b11b4-e5ab-44c7-bc3a-805813741f8d"],
Cell[CellGroupData[{
Cell[1088045, 21142, 588, 15, 49, "Input",ExpressionUUID->"d8d09969-5562-4af0-b927-0883c894f475"],
Cell[1088636, 21159, 309, 9, 32, "Output",ExpressionUUID->"a5226d06-0388-4be3-8ddd-e57a0ceed173"]
}, Open  ]],
Cell[1088960, 21171, 177, 3, 35, "Text",ExpressionUUID->"54ec42a6-53b3-4bb2-b07b-d6b50541c19f"],
Cell[CellGroupData[{
Cell[1089162, 21178, 425, 11, 49, "Input",ExpressionUUID->"df8ec54b-84ea-414f-936a-09171563b6ab"],
Cell[1089590, 21191, 774, 25, 53, "Output",ExpressionUUID->"c0fab6a8-2b9e-4de5-9e85-f42f07fa4644"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

